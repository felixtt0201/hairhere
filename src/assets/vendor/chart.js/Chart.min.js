/*!
 * Chart.js v2.9.4
 * https://www.chartjs.org
 * (c) 2020 Chart.js Contributors
 * Released under the MIT License
 */
!(function (t, e) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = e(function () { try { return require('moment'); } catch (t) {} }()) : typeof define === 'function' && define.amd ? define(['require'], ((t) => e(function () { try { return t('moment'); } catch (t) {} }()))) : (t = t || self).Chart = e(t.moment); }(this, ((t) => {
  t = t && t.hasOwnProperty('default') ? t.default : t; const e = {
    aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50],
  }; const n = (function (t, e) { return t(e = { exports: {} }, e.exports), e.exports; }(((t) => {
    const n = {}; for (const i in e)e.hasOwnProperty(i) && (n[e[i]] = i); const a = t.exports = {
      rgb: { channels: 3, labels: 'rgb' }, hsl: { channels: 3, labels: 'hsl' }, hsv: { channels: 3, labels: 'hsv' }, hwb: { channels: 3, labels: 'hwb' }, cmyk: { channels: 4, labels: 'cmyk' }, xyz: { channels: 3, labels: 'xyz' }, lab: { channels: 3, labels: 'lab' }, lch: { channels: 3, labels: 'lch' }, hex: { channels: 1, labels: ['hex'] }, keyword: { channels: 1, labels: ['keyword'] }, ansi16: { channels: 1, labels: ['ansi16'] }, ansi256: { channels: 1, labels: ['ansi256'] }, hcg: { channels: 3, labels: ['h', 'c', 'g'] }, apple: { channels: 3, labels: ['r16', 'g16', 'b16'] }, gray: { channels: 1, labels: ['gray'] },
    }; for (const r in a) if (a.hasOwnProperty(r)) { if (!('channels' in a[r])) throw new Error(`missing channels property: ${r}`); if (!('labels' in a[r])) throw new Error(`missing channel labels property: ${r}`); if (a[r].labels.length !== a[r].channels) throw new Error(`channel and label counts mismatch: ${r}`); const o = a[r].channels; const s = a[r].labels; delete a[r].channels, delete a[r].labels, Object.defineProperty(a[r], 'channels', { value: o }), Object.defineProperty(a[r], 'labels', { value: s }); }a.rgb.hsl = function (t) { let e; let n; const i = t[0] / 255; const a = t[1] / 255; const r = t[2] / 255; const o = Math.min(i, a, r); const s = Math.max(i, a, r); const l = s - o; return s === o ? e = 0 : i === s ? e = (a - r) / l : a === s ? e = 2 + (r - i) / l : r === s && (e = 4 + (i - a) / l), (e = Math.min(60 * e, 360)) < 0 && (e += 360), n = (o + s) / 2, [e, 100 * (s === o ? 0 : n <= 0.5 ? l / (s + o) : l / (2 - s - o)), 100 * n]; }, a.rgb.hsv = function (t) { let e; let n; let i; let a; let r; const o = t[0] / 255; const s = t[1] / 255; const l = t[2] / 255; const u = Math.max(o, s, l); const d = u - Math.min(o, s, l); const h = function (t) { return (u - t) / 6 / d + 0.5; }; return d === 0 ? a = r = 0 : (r = d / u, e = h(o), n = h(s), i = h(l), o === u ? a = i - n : s === u ? a = 1 / 3 + e - i : l === u && (a = 2 / 3 + n - e), a < 0 ? a += 1 : a > 1 && (a -= 1)), [360 * a, 100 * r, 100 * u]; }, a.rgb.hwb = function (t) { const e = t[0]; const n = t[1]; let i = t[2]; return [a.rgb.hsl(t)[0], 100 * (1 / 255 * Math.min(e, Math.min(n, i))), 100 * (i = 1 - 1 / 255 * Math.max(e, Math.max(n, i)))]; }, a.rgb.cmyk = function (t) { let e; const n = t[0] / 255; const i = t[1] / 255; const a = t[2] / 255; return [100 * ((1 - n - (e = Math.min(1 - n, 1 - i, 1 - a))) / (1 - e) || 0), 100 * ((1 - i - e) / (1 - e) || 0), 100 * ((1 - a - e) / (1 - e) || 0), 100 * e]; }, a.rgb.keyword = function (t) { const i = n[t]; if (i) return i; let a; let r; let o; let s = 1 / 0; for (const l in e) if (e.hasOwnProperty(l)) { const u = e[l]; const d = (r = t, o = u, Math.pow(r[0] - o[0], 2) + Math.pow(r[1] - o[1], 2) + Math.pow(r[2] - o[2], 2)); d < s && (s = d, a = l); } return a; }, a.keyword.rgb = function (t) { return e[t]; }, a.rgb.xyz = function (t) { let e = t[0] / 255; let n = t[1] / 255; let i = t[2] / 255; return [100 * (0.4124 * (e = e > 0.04045 ? Math.pow((e + 0.055) / 1.055, 2.4) : e / 12.92) + 0.3576 * (n = n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92) + 0.1805 * (i = i > 0.04045 ? Math.pow((i + 0.055) / 1.055, 2.4) : i / 12.92)), 100 * (0.2126 * e + 0.7152 * n + 0.0722 * i), 100 * (0.0193 * e + 0.1192 * n + 0.9505 * i)]; }, a.rgb.lab = function (t) { const e = a.rgb.xyz(t); let n = e[0]; let i = e[1]; let r = e[2]; return i /= 100, r /= 108.883, n = (n /= 95.047) > 0.008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116, [116 * (i = i > 0.008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116) - 16, 500 * (n - i), 200 * (i - (r = r > 0.008856 ? Math.pow(r, 1 / 3) : 7.787 * r + 16 / 116))]; }, a.hsl.rgb = function (t) { let e; let n; let i; let a; let r; const o = t[0] / 360; const s = t[1] / 100; const l = t[2] / 100; if (s === 0) return [r = 255 * l, r, r]; e = 2 * l - (n = l < 0.5 ? l * (1 + s) : l + s - l * s), a = [0, 0, 0]; for (let u = 0; u < 3; u++)(i = o + 1 / 3 * -(u - 1)) < 0 && i++, i > 1 && i--, r = 6 * i < 1 ? e + 6 * (n - e) * i : 2 * i < 1 ? n : 3 * i < 2 ? e + (n - e) * (2 / 3 - i) * 6 : e, a[u] = 255 * r; return a; }, a.hsl.hsv = function (t) { const e = t[0]; let n = t[1] / 100; let i = t[2] / 100; let a = n; const r = Math.max(i, 0.01); return n *= (i *= 2) <= 1 ? i : 2 - i, a *= r <= 1 ? r : 2 - r, [e, 100 * (i === 0 ? 2 * a / (r + a) : 2 * n / (i + n)), 100 * ((i + n) / 2)]; }, a.hsv.rgb = function (t) { const e = t[0] / 60; const n = t[1] / 100; let i = t[2] / 100; const a = Math.floor(e) % 6; const r = e - Math.floor(e); const o = 255 * i * (1 - n); const s = 255 * i * (1 - n * r); const l = 255 * i * (1 - n * (1 - r)); switch (i *= 255, a) { case 0: return [i, l, o]; case 1: return [s, i, o]; case 2: return [o, i, l]; case 3: return [o, s, i]; case 4: return [l, o, i]; case 5: return [i, o, s]; } }, a.hsv.hsl = function (t) { let e; let n; let i; const a = t[0]; const r = t[1] / 100; const o = t[2] / 100; const s = Math.max(o, 0.01); return i = (2 - r) * o, n = r * s, [a, 100 * (n = (n /= (e = (2 - r) * s) <= 1 ? e : 2 - e) || 0), 100 * (i /= 2)]; }, a.hwb.rgb = function (t) { let e; let n; let i; let a; let r; let o; let s; const l = t[0] / 360; let u = t[1] / 100; let d = t[2] / 100; const h = u + d; switch (h > 1 && (u /= h, d /= h), i = 6 * l - (e = Math.floor(6 * l)), (1 & e) != 0 && (i = 1 - i), a = u + i * ((n = 1 - d) - u), e) { default: case 6: case 0: r = n, o = a, s = u; break; case 1: r = a, o = n, s = u; break; case 2: r = u, o = n, s = a; break; case 3: r = u, o = a, s = n; break; case 4: r = a, o = u, s = n; break; case 5: r = n, o = u, s = a; } return [255 * r, 255 * o, 255 * s]; }, a.cmyk.rgb = function (t) { const e = t[0] / 100; const n = t[1] / 100; const i = t[2] / 100; const a = t[3] / 100; return [255 * (1 - Math.min(1, e * (1 - a) + a)), 255 * (1 - Math.min(1, n * (1 - a) + a)), 255 * (1 - Math.min(1, i * (1 - a) + a))]; }, a.xyz.rgb = function (t) { let e; let n; let i; const a = t[0] / 100; const r = t[1] / 100; const o = t[2] / 100; return n = -0.9689 * a + 1.8758 * r + 0.0415 * o, i = 0.0557 * a + -0.204 * r + 1.057 * o, e = (e = 3.2406 * a + -1.5372 * r + -0.4986 * o) > 0.0031308 ? 1.055 * Math.pow(e, 1 / 2.4) - 0.055 : 12.92 * e, n = n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n, i = i > 0.0031308 ? 1.055 * Math.pow(i, 1 / 2.4) - 0.055 : 12.92 * i, [255 * (e = Math.min(Math.max(0, e), 1)), 255 * (n = Math.min(Math.max(0, n), 1)), 255 * (i = Math.min(Math.max(0, i), 1))]; }, a.xyz.lab = function (t) { let e = t[0]; let n = t[1]; let i = t[2]; return n /= 100, i /= 108.883, e = (e /= 95.047) > 0.008856 ? Math.pow(e, 1 / 3) : 7.787 * e + 16 / 116, [116 * (n = n > 0.008856 ? Math.pow(n, 1 / 3) : 7.787 * n + 16 / 116) - 16, 500 * (e - n), 200 * (n - (i = i > 0.008856 ? Math.pow(i, 1 / 3) : 7.787 * i + 16 / 116))]; }, a.lab.xyz = function (t) { let e; let n; let i; const a = t[0]; e = t[1] / 500 + (n = (a + 16) / 116), i = n - t[2] / 200; const r = Math.pow(n, 3); const o = Math.pow(e, 3); const s = Math.pow(i, 3); return n = r > 0.008856 ? r : (n - 16 / 116) / 7.787, e = o > 0.008856 ? o : (e - 16 / 116) / 7.787, i = s > 0.008856 ? s : (i - 16 / 116) / 7.787, [e *= 95.047, n *= 100, i *= 108.883]; }, a.lab.lch = function (t) { let e; const n = t[0]; const i = t[1]; const a = t[2]; return (e = 360 * Math.atan2(a, i) / 2 / Math.PI) < 0 && (e += 360), [n, Math.sqrt(i * i + a * a), e]; }, a.lch.lab = function (t) { let e; const n = t[0]; const i = t[1]; return e = t[2] / 360 * 2 * Math.PI, [n, i * Math.cos(e), i * Math.sin(e)]; }, a.rgb.ansi16 = function (t) { const e = t[0]; const n = t[1]; const i = t[2]; let r = 1 in arguments ? arguments[1] : a.rgb.hsv(t)[2]; if ((r = Math.round(r / 50)) === 0) return 30; let o = 30 + (Math.round(i / 255) << 2 | Math.round(n / 255) << 1 | Math.round(e / 255)); return r === 2 && (o += 60), o; }, a.hsv.ansi16 = function (t) { return a.rgb.ansi16(a.hsv.rgb(t), t[2]); }, a.rgb.ansi256 = function (t) { const e = t[0]; const n = t[1]; const i = t[2]; return e === n && n === i ? e < 8 ? 16 : e > 248 ? 231 : Math.round((e - 8) / 247 * 24) + 232 : 16 + 36 * Math.round(e / 255 * 5) + 6 * Math.round(n / 255 * 5) + Math.round(i / 255 * 5); }, a.ansi16.rgb = function (t) { let e = t % 10; if (e === 0 || e === 7) return t > 50 && (e += 3.5), [e = e / 10.5 * 255, e, e]; const n = 0.5 * (1 + ~~(t > 50)); return [(1 & e) * n * 255, (e >> 1 & 1) * n * 255, (e >> 2 & 1) * n * 255]; }, a.ansi256.rgb = function (t) { if (t >= 232) { const e = 10 * (t - 232) + 8; return [e, e, e]; } let n; return t -= 16, [Math.floor(t / 36) / 5 * 255, Math.floor((n = t % 36) / 6) / 5 * 255, n % 6 / 5 * 255]; }, a.rgb.hex = function (t) { const e = (((255 & Math.round(t[0])) << 16) + ((255 & Math.round(t[1])) << 8) + (255 & Math.round(t[2]))).toString(16).toUpperCase(); return '000000'.substring(e.length) + e; }, a.hex.rgb = function (t) { const e = t.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i); if (!e) return [0, 0, 0]; let n = e[0]; e[0].length === 3 && (n = n.split('').map(((t) => t + t)).join('')); const i = parseInt(n, 16); return [i >> 16 & 255, i >> 8 & 255, 255 & i]; }, a.rgb.hcg = function (t) { let e; const n = t[0] / 255; const i = t[1] / 255; const a = t[2] / 255; const r = Math.max(Math.max(n, i), a); const o = Math.min(Math.min(n, i), a); const s = r - o; return e = s <= 0 ? 0 : r === n ? (i - a) / s % 6 : r === i ? 2 + (a - n) / s : 4 + (n - i) / s + 4, e /= 6, [360 * (e %= 1), 100 * s, 100 * (s < 1 ? o / (1 - s) : 0)]; }, a.hsl.hcg = function (t) { const e = t[1] / 100; const n = t[2] / 100; let i = 1; let a = 0; return (i = n < 0.5 ? 2 * e * n : 2 * e * (1 - n)) < 1 && (a = (n - 0.5 * i) / (1 - i)), [t[0], 100 * i, 100 * a]; }, a.hsv.hcg = function (t) { const e = t[1] / 100; const n = t[2] / 100; const i = e * n; let a = 0; return i < 1 && (a = (n - i) / (1 - i)), [t[0], 100 * i, 100 * a]; }, a.hcg.rgb = function (t) { const e = t[0] / 360; const n = t[1] / 100; const i = t[2] / 100; if (n === 0) return [255 * i, 255 * i, 255 * i]; let a; const r = [0, 0, 0]; const o = e % 1 * 6; const s = o % 1; const l = 1 - s; switch (Math.floor(o)) { case 0: r[0] = 1, r[1] = s, r[2] = 0; break; case 1: r[0] = l, r[1] = 1, r[2] = 0; break; case 2: r[0] = 0, r[1] = 1, r[2] = s; break; case 3: r[0] = 0, r[1] = l, r[2] = 1; break; case 4: r[0] = s, r[1] = 0, r[2] = 1; break; default: r[0] = 1, r[1] = 0, r[2] = l; } return a = (1 - n) * i, [255 * (n * r[0] + a), 255 * (n * r[1] + a), 255 * (n * r[2] + a)]; }, a.hcg.hsv = function (t) { const e = t[1] / 100; const n = e + t[2] / 100 * (1 - e); let i = 0; return n > 0 && (i = e / n), [t[0], 100 * i, 100 * n]; }, a.hcg.hsl = function (t) { const e = t[1] / 100; const n = t[2] / 100 * (1 - e) + 0.5 * e; let i = 0; return n > 0 && n < 0.5 ? i = e / (2 * n) : n >= 0.5 && n < 1 && (i = e / (2 * (1 - n))), [t[0], 100 * i, 100 * n]; }, a.hcg.hwb = function (t) { const e = t[1] / 100; const n = e + t[2] / 100 * (1 - e); return [t[0], 100 * (n - e), 100 * (1 - n)]; }, a.hwb.hcg = function (t) { const e = t[1] / 100; const n = 1 - t[2] / 100; const i = n - e; let a = 0; return i < 1 && (a = (n - i) / (1 - i)), [t[0], 100 * i, 100 * a]; }, a.apple.rgb = function (t) { return [t[0] / 65535 * 255, t[1] / 65535 * 255, t[2] / 65535 * 255]; }, a.rgb.apple = function (t) { return [t[0] / 255 * 65535, t[1] / 255 * 65535, t[2] / 255 * 65535]; }, a.gray.rgb = function (t) { return [t[0] / 100 * 255, t[0] / 100 * 255, t[0] / 100 * 255]; }, a.gray.hsl = a.gray.hsv = function (t) { return [0, 0, t[0]]; }, a.gray.hwb = function (t) { return [0, 100, t[0]]; }, a.gray.cmyk = function (t) { return [0, 0, 0, t[0]]; }, a.gray.lab = function (t) { return [t[0], 0, 0]; }, a.gray.hex = function (t) { const e = 255 & Math.round(t[0] / 100 * 255); const n = ((e << 16) + (e << 8) + e).toString(16).toUpperCase(); return '000000'.substring(n.length) + n; }, a.rgb.gray = function (t) { return [(t[0] + t[1] + t[2]) / 3 / 255 * 100]; };
  }))); n.rgb, n.hsl, n.hsv, n.hwb, n.cmyk, n.xyz, n.lab, n.lch, n.hex, n.keyword, n.ansi16, n.ansi256, n.hcg, n.apple, n.gray; function i(t) { const e = (function () { for (var t = {}, e = Object.keys(n), i = e.length, a = 0; a < i; a++)t[e[a]] = { distance: -1, parent: null }; return t; }()); const i = [t]; for (e[t].distance = 0; i.length;) for (let a = i.pop(), r = Object.keys(n[a]), o = r.length, s = 0; s < o; s++) { const l = r[s]; const u = e[l]; u.distance === -1 && (u.distance = e[a].distance + 1, u.parent = a, i.unshift(l)); } return e; } function a(t, e) { return function (n) { return e(t(n)); }; } function r(t, e) { for (var i = [e[t].parent, t], r = n[e[t].parent][t], o = e[t].parent; e[o].parent;)i.unshift(e[o].parent), r = a(n[e[o].parent][o], r), o = e[o].parent; return r.conversion = i, r; } const o = {}; Object.keys(n).forEach(((t) => { o[t] = {}, Object.defineProperty(o[t], 'channels', { value: n[t].channels }), Object.defineProperty(o[t], 'labels', { value: n[t].labels }); const e = (function (t) { for (var e = i(t), n = {}, a = Object.keys(e), o = a.length, s = 0; s < o; s++) { const l = a[s]; e[l].parent !== null && (n[l] = r(l, e)); } return n; }(t)); Object.keys(e).forEach(((n) => { const i = e[n]; o[t][n] = (function (t) { const e = function (e) { if (e == null) return e; arguments.length > 1 && (e = Array.prototype.slice.call(arguments)); const n = t(e); if (typeof n === 'object') for (let i = n.length, a = 0; a < i; a++)n[a] = Math.round(n[a]); return n; }; return 'conversion' in t && (e.conversion = t.conversion), e; }(i)), o[t][n].raw = (function (t) { const e = function (e) { return e == null ? e : (arguments.length > 1 && (e = Array.prototype.slice.call(arguments)), t(e)); }; return 'conversion' in t && (e.conversion = t.conversion), e; }(i)); })); })); const s = o; const l = {
    aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50],
  }; const u = {
    getRgba: d, getHsla: h, getRgb(t) { const e = d(t); return e && e.slice(0, 3); }, getHsl(t) { const e = h(t); return e && e.slice(0, 3); }, getHwb: c, getAlpha(t) { let e = d(t); if (e) return e[3]; if (e = h(t)) return e[3]; if (e = c(t)) return e[3]; }, hexString(t, e) { e = void 0 !== e && t.length === 3 ? e : t[3]; return `#${v(t[0])}${v(t[1])}${v(t[2])}${e >= 0 && e < 1 ? v(Math.round(255 * e)) : ''}`; }, rgbString(t, e) { if (e < 1 || t[3] && t[3] < 1) return f(t, e); return `rgb(${t[0]}, ${t[1]}, ${t[2]})`; }, rgbaString: f, percentString(t, e) { if (e < 1 || t[3] && t[3] < 1) return g(t, e); const n = Math.round(t[0] / 255 * 100); const i = Math.round(t[1] / 255 * 100); const a = Math.round(t[2] / 255 * 100); return `rgb(${n}%, ${i}%, ${a}%)`; }, percentaString: g, hslString(t, e) { if (e < 1 || t[3] && t[3] < 1) return p(t, e); return `hsl(${t[0]}, ${t[1]}%, ${t[2]}%)`; }, hslaString: p, hwbString(t, e) { void 0 === e && (e = void 0 !== t[3] ? t[3] : 1); return `hwb(${t[0]}, ${t[1]}%, ${t[2]}%${void 0 !== e && e !== 1 ? `, ${e}` : ''})`; }, keyword(t) { return b[t.slice(0, 3)]; },
  }; function d(t) { if (t) { let e = [0, 0, 0]; let n = 1; let i = t.match(/^#([a-fA-F0-9]{3,4})$/i); let a = ''; if (i) { a = (i = i[1])[3]; for (var r = 0; r < e.length; r++)e[r] = parseInt(i[r] + i[r], 16); a && (n = Math.round(parseInt(a + a, 16) / 255 * 100) / 100); } else if (i = t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)) { a = i[2], i = i[1]; for (r = 0; r < e.length; r++)e[r] = parseInt(i.slice(2 * r, 2 * r + 2), 16); a && (n = Math.round(parseInt(a, 16) / 255 * 100) / 100); } else if (i = t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)) { for (r = 0; r < e.length; r++)e[r] = parseInt(i[r + 1]); n = parseFloat(i[4]); } else if (i = t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)) { for (r = 0; r < e.length; r++)e[r] = Math.round(2.55 * parseFloat(i[r + 1])); n = parseFloat(i[4]); } else if (i = t.match(/(\w+)/)) { if (i[1] == 'transparent') return [0, 0, 0, 0]; if (!(e = l[i[1]])) return; } for (r = 0; r < e.length; r++)e[r] = m(e[r], 0, 255); return n = n || n == 0 ? m(n, 0, 1) : 1, e[3] = n, e; } } function h(t) { if (t) { const e = t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/); if (e) { const n = parseFloat(e[4]); return [m(parseInt(e[1]), 0, 360), m(parseFloat(e[2]), 0, 100), m(parseFloat(e[3]), 0, 100), m(isNaN(n) ? 1 : n, 0, 1)]; } } } function c(t) { if (t) { const e = t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/); if (e) { const n = parseFloat(e[4]); return [m(parseInt(e[1]), 0, 360), m(parseFloat(e[2]), 0, 100), m(parseFloat(e[3]), 0, 100), m(isNaN(n) ? 1 : n, 0, 1)]; } } } function f(t, e) { return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), `rgba(${t[0]}, ${t[1]}, ${t[2]}, ${e})`; } function g(t, e) { return `rgba(${Math.round(t[0] / 255 * 100)}%, ${Math.round(t[1] / 255 * 100)}%, ${Math.round(t[2] / 255 * 100)}%, ${e || t[3] || 1})`; } function p(t, e) { return void 0 === e && (e = void 0 !== t[3] ? t[3] : 1), `hsla(${t[0]}, ${t[1]}%, ${t[2]}%, ${e})`; } function m(t, e, n) { return Math.min(Math.max(e, t), n); } function v(t) { const e = t.toString(16).toUpperCase(); return e.length < 2 ? `0${e}` : e; } var b = {}; for (const x in l)b[l[x]] = x; var y = function (t) {
    return t instanceof y ? t : this instanceof y ? (this.valid = !1, this.values = {
      rgb: [0, 0, 0], hsl: [0, 0, 0], hsv: [0, 0, 0], hwb: [0, 0, 0], cmyk: [0, 0, 0, 0], alpha: 1,
    }, void (typeof t === 'string' ? (e = u.getRgba(t)) ? this.setValues('rgb', e) : (e = u.getHsla(t)) ? this.setValues('hsl', e) : (e = u.getHwb(t)) && this.setValues('hwb', e) : typeof t === 'object' && (void 0 !== (e = t).r || void 0 !== e.red ? this.setValues('rgb', e) : void 0 !== e.l || void 0 !== e.lightness ? this.setValues('hsl', e) : void 0 !== e.v || void 0 !== e.value ? this.setValues('hsv', e) : void 0 !== e.w || void 0 !== e.whiteness ? this.setValues('hwb', e) : void 0 === e.c && void 0 === e.cyan || this.setValues('cmyk', e)))) : new y(t); let e;
  }; y.prototype = {
    isValid() { return this.valid; }, rgb() { return this.setSpace('rgb', arguments); }, hsl() { return this.setSpace('hsl', arguments); }, hsv() { return this.setSpace('hsv', arguments); }, hwb() { return this.setSpace('hwb', arguments); }, cmyk() { return this.setSpace('cmyk', arguments); }, rgbArray() { return this.values.rgb; }, hslArray() { return this.values.hsl; }, hsvArray() { return this.values.hsv; }, hwbArray() { const t = this.values; return t.alpha !== 1 ? t.hwb.concat([t.alpha]) : t.hwb; }, cmykArray() { return this.values.cmyk; }, rgbaArray() { const t = this.values; return t.rgb.concat([t.alpha]); }, hslaArray() { const t = this.values; return t.hsl.concat([t.alpha]); }, alpha(t) { return void 0 === t ? this.values.alpha : (this.setValues('alpha', t), this); }, red(t) { return this.setChannel('rgb', 0, t); }, green(t) { return this.setChannel('rgb', 1, t); }, blue(t) { return this.setChannel('rgb', 2, t); }, hue(t) { return t && (t = (t %= 360) < 0 ? 360 + t : t), this.setChannel('hsl', 0, t); }, saturation(t) { return this.setChannel('hsl', 1, t); }, lightness(t) { return this.setChannel('hsl', 2, t); }, saturationv(t) { return this.setChannel('hsv', 1, t); }, whiteness(t) { return this.setChannel('hwb', 1, t); }, blackness(t) { return this.setChannel('hwb', 2, t); }, value(t) { return this.setChannel('hsv', 2, t); }, cyan(t) { return this.setChannel('cmyk', 0, t); }, magenta(t) { return this.setChannel('cmyk', 1, t); }, yellow(t) { return this.setChannel('cmyk', 2, t); }, black(t) { return this.setChannel('cmyk', 3, t); }, hexString() { return u.hexString(this.values.rgb); }, rgbString() { return u.rgbString(this.values.rgb, this.values.alpha); }, rgbaString() { return u.rgbaString(this.values.rgb, this.values.alpha); }, percentString() { return u.percentString(this.values.rgb, this.values.alpha); }, hslString() { return u.hslString(this.values.hsl, this.values.alpha); }, hslaString() { return u.hslaString(this.values.hsl, this.values.alpha); }, hwbString() { return u.hwbString(this.values.hwb, this.values.alpha); }, keyword() { return u.keyword(this.values.rgb, this.values.alpha); }, rgbNumber() { const t = this.values.rgb; return t[0] << 16 | t[1] << 8 | t[2]; }, luminosity() { for (var t = this.values.rgb, e = [], n = 0; n < t.length; n++) { const i = t[n] / 255; e[n] = i <= 0.03928 ? i / 12.92 : Math.pow((i + 0.055) / 1.055, 2.4); } return 0.2126 * e[0] + 0.7152 * e[1] + 0.0722 * e[2]; }, contrast(t) { const e = this.luminosity(); const n = t.luminosity(); return e > n ? (e + 0.05) / (n + 0.05) : (n + 0.05) / (e + 0.05); }, level(t) { const e = this.contrast(t); return e >= 7.1 ? 'AAA' : e >= 4.5 ? 'AA' : ''; }, dark() { const t = this.values.rgb; return (299 * t[0] + 587 * t[1] + 114 * t[2]) / 1e3 < 128; }, light() { return !this.dark(); }, negate() { for (var t = [], e = 0; e < 3; e++)t[e] = 255 - this.values.rgb[e]; return this.setValues('rgb', t), this; }, lighten(t) { const e = this.values.hsl; return e[2] += e[2] * t, this.setValues('hsl', e), this; }, darken(t) { const e = this.values.hsl; return e[2] -= e[2] * t, this.setValues('hsl', e), this; }, saturate(t) { const e = this.values.hsl; return e[1] += e[1] * t, this.setValues('hsl', e), this; }, desaturate(t) { const e = this.values.hsl; return e[1] -= e[1] * t, this.setValues('hsl', e), this; }, whiten(t) { const e = this.values.hwb; return e[1] += e[1] * t, this.setValues('hwb', e), this; }, blacken(t) { const e = this.values.hwb; return e[2] += e[2] * t, this.setValues('hwb', e), this; }, greyscale() { const t = this.values.rgb; const e = 0.3 * t[0] + 0.59 * t[1] + 0.11 * t[2]; return this.setValues('rgb', [e, e, e]), this; }, clearer(t) { const e = this.values.alpha; return this.setValues('alpha', e - e * t), this; }, opaquer(t) { const e = this.values.alpha; return this.setValues('alpha', e + e * t), this; }, rotate(t) { const e = this.values.hsl; const n = (e[0] + t) % 360; return e[0] = n < 0 ? 360 + n : n, this.setValues('hsl', e), this; }, mix(t, e) { const n = t; const i = void 0 === e ? 0.5 : e; const a = 2 * i - 1; const r = this.alpha() - n.alpha(); const o = ((a * r == -1 ? a : (a + r) / (1 + a * r)) + 1) / 2; const s = 1 - o; return this.rgb(o * this.red() + s * n.red(), o * this.green() + s * n.green(), o * this.blue() + s * n.blue()).alpha(this.alpha() * i + n.alpha() * (1 - i)); }, toJSON() { return this.rgb(); }, clone() { let t; let e; const n = new y(); const i = this.values; const a = n.values; for (const r in i)i.hasOwnProperty(r) && (t = i[r], (e = {}.toString.call(t)) === '[object Array]' ? a[r] = t.slice(0) : e === '[object Number]' ? a[r] = t : console.error('unexpected color value:', t)); return n; },
  }, y.prototype.spaces = {
    rgb: ['red', 'green', 'blue'], hsl: ['hue', 'saturation', 'lightness'], hsv: ['hue', 'saturation', 'value'], hwb: ['hue', 'whiteness', 'blackness'], cmyk: ['cyan', 'magenta', 'yellow', 'black'],
  }, y.prototype.maxes = {
    rgb: [255, 255, 255], hsl: [360, 100, 100], hsv: [360, 100, 100], hwb: [360, 100, 100], cmyk: [100, 100, 100, 100],
  }, y.prototype.getValues = function (t) { for (var e = this.values, n = {}, i = 0; i < t.length; i++)n[t.charAt(i)] = e[t][i]; return e.alpha !== 1 && (n.a = e.alpha), n; }, y.prototype.setValues = function (t, e) { let n; let i; const a = this.values; const r = this.spaces; const o = this.maxes; let l = 1; if (this.valid = !0, t === 'alpha')l = e; else if (e.length)a[t] = e.slice(0, t.length), l = e[t.length]; else if (void 0 !== e[t.charAt(0)]) { for (n = 0; n < t.length; n++)a[t][n] = e[t.charAt(n)]; l = e.a; } else if (void 0 !== e[r[t][0]]) { const u = r[t]; for (n = 0; n < t.length; n++)a[t][n] = e[u[n]]; l = e.alpha; } if (a.alpha = Math.max(0, Math.min(1, void 0 === l ? a.alpha : l)), t === 'alpha') return !1; for (n = 0; n < t.length; n++)i = Math.max(0, Math.min(o[t][n], a[t][n])), a[t][n] = Math.round(i); for (const d in r)d !== t && (a[d] = s[t][d](a[t])); return !0; }, y.prototype.setSpace = function (t, e) { let n = e[0]; return void 0 === n ? this.getValues(t) : (typeof n === 'number' && (n = Array.prototype.slice.call(e)), this.setValues(t, n), this); }, y.prototype.setChannel = function (t, e, n) { const i = this.values[t]; return void 0 === n ? i[e] : n === i[e] ? this : (i[e] = n, this.setValues(t, i), this); }, typeof window !== 'undefined' && (window.Color = y); const _ = y; function k(t) { return ['__proto__', 'prototype', 'constructor'].indexOf(t) === -1; } let w; var M = {
    noop() {}, uid: (w = 0, function () { return w++; }), isNullOrUndef(t) { return t == null; }, isArray(t) { if (Array.isArray && Array.isArray(t)) return !0; const e = Object.prototype.toString.call(t); return e.substr(0, 7) === '[object' && e.substr(-6) === 'Array]'; }, isObject(t) { return t !== null && Object.prototype.toString.call(t) === '[object Object]'; }, isFinite(t) { return (typeof t === 'number' || t instanceof Number) && isFinite(t); }, valueOrDefault(t, e) { return void 0 === t ? e : t; }, valueAtIndexOrDefault(t, e, n) { return M.valueOrDefault(M.isArray(t) ? t[e] : t, n); }, callback(t, e, n) { if (t && typeof t.call === 'function') return t.apply(n, e); }, each(t, e, n, i) { let a; let r; let o; if (M.isArray(t)) if (r = t.length, i) for (a = r - 1; a >= 0; a--)e.call(n, t[a], a); else for (a = 0; a < r; a++)e.call(n, t[a], a); else if (M.isObject(t)) for (r = (o = Object.keys(t)).length, a = 0; a < r; a++)e.call(n, t[o[a]], o[a]); }, arrayEquals(t, e) { let n; let i; let a; let r; if (!t || !e || t.length !== e.length) return !1; for (n = 0, i = t.length; n < i; ++n) if (a = t[n], r = e[n], a instanceof Array && r instanceof Array) { if (!M.arrayEquals(a, r)) return !1; } else if (a !== r) return !1; return !0; }, clone(t) { if (M.isArray(t)) return t.map(M.clone); if (M.isObject(t)) { for (var e = Object.create(t), n = Object.keys(t), i = n.length, a = 0; a < i; ++a)e[n[a]] = M.clone(t[n[a]]); return e; } return t; }, _merger(t, e, n, i) { if (k(t)) { const a = e[t]; const r = n[t]; M.isObject(a) && M.isObject(r) ? M.merge(a, r, i) : e[t] = M.clone(r); } }, _mergerIf(t, e, n) { if (k(t)) { const i = e[t]; const a = n[t]; M.isObject(i) && M.isObject(a) ? M.mergeIf(i, a) : e.hasOwnProperty(t) || (e[t] = M.clone(a)); } }, merge(t, e, n) { let i; let a; let r; let o; let s; const l = M.isArray(e) ? e : [e]; const u = l.length; if (!M.isObject(t)) return t; for (i = (n = n || {}).merger || M._merger, a = 0; a < u; ++a) if (e = l[a], M.isObject(e)) for (s = 0, o = (r = Object.keys(e)).length; s < o; ++s)i(r[s], t, e, n); return t; }, mergeIf(t, e) { return M.merge(t, e, { merger: M._mergerIf }); }, extend: Object.assign || function (t) { return M.merge(t, [].slice.call(arguments, 1), { merger(t, e, n) { e[t] = n[t]; } }); }, inherits(t) { const e = this; const n = t && t.hasOwnProperty('constructor') ? t.constructor : function () { return e.apply(this, arguments); }; const i = function () { this.constructor = n; }; return i.prototype = e.prototype, n.prototype = new i(), n.extend = M.inherits, t && M.extend(n.prototype, t), n.__super__ = e.prototype, n; }, _deprecated(t, e, n, i) { void 0 !== e && console.warn(`${t}: "${n}" is deprecated. Please use "${i}" instead`); },
  }; const S = M; M.callCallback = M.callback, M.indexOf = function (t, e, n) { return Array.prototype.indexOf.call(t, e, n); }, M.getValueOrDefault = M.valueOrDefault, M.getValueAtIndexOrDefault = M.valueAtIndexOrDefault; var C = {
    linear(t) { return t; }, easeInQuad(t) { return t * t; }, easeOutQuad(t) { return -t * (t - 2); }, easeInOutQuad(t) { return (t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1); }, easeInCubic(t) { return t * t * t; }, easeOutCubic(t) { return (t -= 1) * t * t + 1; }, easeInOutCubic(t) { return (t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2); }, easeInQuart(t) { return t * t * t * t; }, easeOutQuart(t) { return -((t -= 1) * t * t * t - 1); }, easeInOutQuart(t) { return (t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2); }, easeInQuint(t) { return t * t * t * t * t; }, easeOutQuint(t) { return (t -= 1) * t * t * t * t + 1; }, easeInOutQuint(t) { return (t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2); }, easeInSine(t) { return 1 - Math.cos(t * (Math.PI / 2)); }, easeOutSine(t) { return Math.sin(t * (Math.PI / 2)); }, easeInOutSine(t) { return -0.5 * (Math.cos(Math.PI * t) - 1); }, easeInExpo(t) { return t === 0 ? 0 : Math.pow(2, 10 * (t - 1)); }, easeOutExpo(t) { return t === 1 ? 1 : 1 - Math.pow(2, -10 * t); }, easeInOutExpo(t) { return t === 0 ? 0 : t === 1 ? 1 : (t /= 0.5) < 1 ? 0.5 * Math.pow(2, 10 * (t - 1)) : 0.5 * (2 - Math.pow(2, -10 * --t)); }, easeInCirc(t) { return t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1); }, easeOutCirc(t) { return Math.sqrt(1 - (t -= 1) * t); }, easeInOutCirc(t) { return (t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1); }, easeInElastic(t) { let e = 1.70158; let n = 0; let i = 1; return t === 0 ? 0 : t === 1 ? 1 : (n || (n = 0.3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), -i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n)); }, easeOutElastic(t) { let e = 1.70158; let n = 0; let i = 1; return t === 0 ? 0 : t === 1 ? 1 : (n || (n = 0.3), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), i * Math.pow(2, -10 * t) * Math.sin((t - e) * (2 * Math.PI) / n) + 1); }, easeInOutElastic(t) { let e = 1.70158; let n = 0; let i = 1; return t === 0 ? 0 : (t /= 0.5) == 2 ? 1 : (n || (n = 0.45), i < 1 ? (i = 1, e = n / 4) : e = n / (2 * Math.PI) * Math.asin(1 / i), t < 1 ? i * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * -0.5 : i * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - e) * (2 * Math.PI) / n) * 0.5 + 1); }, easeInBack(t) { const e = 1.70158; return t * t * ((e + 1) * t - e); }, easeOutBack(t) { const e = 1.70158; return (t -= 1) * t * ((e + 1) * t + e) + 1; }, easeInOutBack(t) { let e = 1.70158; return (t /= 0.5) < 1 ? t * t * ((1 + (e *= 1.525)) * t - e) * 0.5 : 0.5 * ((t -= 2) * t * ((1 + (e *= 1.525)) * t + e) + 2); }, easeInBounce(t) { return 1 - C.easeOutBounce(1 - t); }, easeOutBounce(t) { return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375 : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375; }, easeInOutBounce(t) { return t < 0.5 ? 0.5 * C.easeInBounce(2 * t) : 0.5 * C.easeOutBounce(2 * t - 1) + 0.5; },
  }; const P = { effects: C }; S.easingEffects = C; const A = Math.PI; const D = A / 180; const T = 2 * A; const I = A / 2; const F = A / 4; const O = 2 * A / 3; const L = {
    clear(t) { t.ctx.clearRect(0, 0, t.width, t.height); }, roundedRect(t, e, n, i, a, r) { if (r) { const o = Math.min(r, a / 2, i / 2); const s = e + o; const l = n + o; const u = e + i - o; const d = n + a - o; t.moveTo(e, l), s < u && l < d ? (t.arc(s, l, o, -A, -I), t.arc(u, l, o, -I, 0), t.arc(u, d, o, 0, I), t.arc(s, d, o, I, A)) : s < u ? (t.moveTo(s, n), t.arc(u, l, o, -I, I), t.arc(s, l, o, I, A + I)) : l < d ? (t.arc(s, l, o, -A, 0), t.arc(s, d, o, 0, A)) : t.arc(s, l, o, -A, A), t.closePath(), t.moveTo(e, n); } else t.rect(e, n, i, a); }, drawPoint(t, e, n, i, a, r) { let o; let s; let l; let u; let d; let h = (r || 0) * D; if (e && typeof e === 'object' && ((o = e.toString()) === '[object HTMLImageElement]' || o === '[object HTMLCanvasElement]')) return t.save(), t.translate(i, a), t.rotate(h), t.drawImage(e, -e.width / 2, -e.height / 2, e.width, e.height), void t.restore(); if (!(isNaN(n) || n <= 0)) { switch (t.beginPath(), e) { default: t.arc(i, a, n, 0, T), t.closePath(); break; case 'triangle': t.moveTo(i + Math.sin(h) * n, a - Math.cos(h) * n), h += O, t.lineTo(i + Math.sin(h) * n, a - Math.cos(h) * n), h += O, t.lineTo(i + Math.sin(h) * n, a - Math.cos(h) * n), t.closePath(); break; case 'rectRounded': u = n - (d = 0.516 * n), s = Math.cos(h + F) * u, l = Math.sin(h + F) * u, t.arc(i - s, a - l, d, h - A, h - I), t.arc(i + l, a - s, d, h - I, h), t.arc(i + s, a + l, d, h, h + I), t.arc(i - l, a + s, d, h + I, h + A), t.closePath(); break; case 'rect': if (!r) { u = Math.SQRT1_2 * n, t.rect(i - u, a - u, 2 * u, 2 * u); break; }h += F; case 'rectRot': s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + l, a - s), t.lineTo(i + s, a + l), t.lineTo(i - l, a + s), t.closePath(); break; case 'crossRot': h += F; case 'cross': s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s); break; case 'star': s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s), h += F, s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l), t.moveTo(i + l, a - s), t.lineTo(i - l, a + s); break; case 'line': s = Math.cos(h) * n, l = Math.sin(h) * n, t.moveTo(i - s, a - l), t.lineTo(i + s, a + l); break; case 'dash': t.moveTo(i, a), t.lineTo(i + Math.cos(h) * n, a + Math.sin(h) * n); }t.fill(), t.stroke(); } }, _isPointInArea(t, e) { return t.x > e.left - 1e-6 && t.x < e.right + 1e-6 && t.y > e.top - 1e-6 && t.y < e.bottom + 1e-6; }, clipArea(t, e) { t.save(), t.beginPath(), t.rect(e.left, e.top, e.right - e.left, e.bottom - e.top), t.clip(); }, unclipArea(t) { t.restore(); }, lineTo(t, e, n, i) { const a = n.steppedLine; if (a) { if (a === 'middle') { const r = (e.x + n.x) / 2; t.lineTo(r, i ? n.y : e.y), t.lineTo(r, i ? e.y : n.y); } else a === 'after' && !i || a !== 'after' && i ? t.lineTo(e.x, n.y) : t.lineTo(n.x, e.y); t.lineTo(n.x, n.y); } else n.tension ? t.bezierCurveTo(i ? e.controlPointPreviousX : e.controlPointNextX, i ? e.controlPointPreviousY : e.controlPointNextY, i ? n.controlPointNextX : n.controlPointPreviousX, i ? n.controlPointNextY : n.controlPointPreviousY, n.x, n.y) : t.lineTo(n.x, n.y); },
  }; const R = L; S.clear = L.clear, S.drawRoundedRectangle = function (t) { t.beginPath(), L.roundedRect.apply(L, arguments); }; const z = { _set(t, e) { return S.merge(this[t] || (this[t] = {}), e); } }; z._set('global', {
    defaultColor: 'rgba(0,0,0,0.1)', defaultFontColor: '#666', defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif", defaultFontSize: 12, defaultFontStyle: 'normal', defaultLineHeight: 1.2, showLines: !0,
  }); const N = z; const B = S.valueOrDefault; const E = {
    toLineHeight(t, e) { const n = (`${t}`).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/); if (!n || n[1] === 'normal') return 1.2 * e; switch (t = +n[2], n[3]) { case 'px': return t; case '%': t /= 100; } return e * t; },
    toPadding(t) {
      let e; let n; let i; let a; return S.isObject(t) ? (e = +t.top || 0, n = +t.right || 0, i = +t.bottom || 0, a = +t.left || 0) : e = n = i = a = +t || 0, {
        top: e, right: n, bottom: i, left: a, height: e + i, width: a + n,
      };
    },
    _parseFont(t) {
      const e = N.global; const n = B(t.fontSize, e.defaultFontSize); const i = {
        family: B(t.fontFamily, e.defaultFontFamily), lineHeight: S.options.toLineHeight(B(t.lineHeight, e.defaultLineHeight), n), size: n, style: B(t.fontStyle, e.defaultFontStyle), weight: null, string: '',
      }; return i.string = (function (t) { return !t || S.isNullOrUndef(t.size) || S.isNullOrUndef(t.family) ? null : `${(t.style ? `${t.style} ` : '') + (t.weight ? `${t.weight} ` : '') + t.size}px ${t.family}`; }(i)), i;
    },
    resolve(t, e, n, i) { let a; let r; let o; let s = !0; for (a = 0, r = t.length; a < r; ++a) if (void 0 !== (o = t[a]) && (void 0 !== e && typeof o === 'function' && (o = o(e), s = !1), void 0 !== n && S.isArray(o) && (o = o[n], s = !1), void 0 !== o)) return i && !s && (i.cacheable = !1), o; },
  }; const W = { _factorize(t) { let e; const n = []; const i = Math.sqrt(t); for (e = 1; e < i; e++)t % e == 0 && (n.push(e), n.push(t / e)); return i === (0 | i) && n.push(i), n.sort(((t, e) => t - e)).pop(), n; }, log10: Math.log10 || function (t) { const e = Math.log(t) * Math.LOG10E; const n = Math.round(e); return t === Math.pow(10, n) ? n : e; } }; const V = W; S.log10 = W.log10; const H = S; const j = P; const q = R; const U = E; const Y = V; const G = {
    getRtlAdapter(t, e, n) {
      return t ? (function (t, e) {
        return {
          x(n) { return t + t + e - n; }, setWidth(t) { e = t; }, textAlign(t) { return t === 'center' ? t : t === 'right' ? 'left' : 'right'; }, xPlus(t, e) { return t - e; }, leftForLtr(t, e) { return t - e; },
        };
      }(e, n)) : {
        x(t) { return t; }, setWidth(t) {}, textAlign(t) { return t; }, xPlus(t, e) { return t + e; }, leftForLtr(t, e) { return t; },
      };
    },
    overrideTextDirection(t, e) { let n; let i; e !== 'ltr' && e !== 'rtl' || (i = [(n = t.canvas.style).getPropertyValue('direction'), n.getPropertyPriority('direction')], n.setProperty('direction', e, 'important'), t.prevTextDirection = i); },
    restoreTextDirection(t) { const e = t.prevTextDirection; void 0 !== e && (delete t.prevTextDirection, t.canvas.style.setProperty('direction', e[0], e[1])); },
  }; H.easing = j, H.canvas = q, H.options = U, H.math = Y, H.rtl = G; const X = function (t) { H.extend(this, t), this.initialize.apply(this, arguments); }; H.extend(X.prototype, {
    _type: void 0, initialize() { this.hidden = !1; }, pivot() { const t = this; return t._view || (t._view = H.extend({}, t._model)), t._start = {}, t; }, transition(t) { const e = this; const n = e._model; let i = e._start; let a = e._view; return n && t !== 1 ? (a || (a = e._view = {}), i || (i = e._start = {}), (function (t, e, n, i) { let a; let r; let o; let s; let l; let u; let d; let h; let c; const f = Object.keys(n); for (a = 0, r = f.length; a < r; ++a) if (u = n[o = f[a]], e.hasOwnProperty(o) || (e[o] = u), (s = e[o]) !== u && o[0] !== '_') { if (t.hasOwnProperty(o) || (t[o] = s), (d = typeof u) === typeof (l = t[o])) if (d === 'string') { if ((h = _(l)).valid && (c = _(u)).valid) { e[o] = c.mix(h, i).rgbString(); continue; } } else if (H.isFinite(l) && H.isFinite(u)) { e[o] = l + (u - l) * i; continue; }e[o] = u; } }(i, a, n, t)), e) : (e._view = H.extend({}, n), e._start = null, e); }, tooltipPosition() { return { x: this._model.x, y: this._model.y }; }, hasValue() { return H.isNumber(this._model.x) && H.isNumber(this._model.y); },
  }), X.extend = H.inherits; const K = X; const Z = K.extend({
    chart: null, currentStep: 0, numSteps: 60, easing: '', render: null, onAnimationProgress: null, onAnimationComplete: null,
  }); const $ = Z; Object.defineProperty(Z.prototype, 'animationObject', { get() { return this; } }), Object.defineProperty(Z.prototype, 'chartInstance', { get() { return this.chart; }, set(t) { this.chart = t; } }), N._set('global', {
    animation: {
      duration: 1e3, easing: 'easeOutQuart', onProgress: H.noop, onComplete: H.noop,
    },
  }); const J = {
    animations: [], request: null, addAnimation(t, e, n, i) { let a; let r; const o = this.animations; for (e.chart = t, e.startTime = Date.now(), e.duration = n, i || (t.animating = !0), a = 0, r = o.length; a < r; ++a) if (o[a].chart === t) return void (o[a] = e); o.push(e), o.length === 1 && this.requestAnimationFrame(); }, cancelAnimation(t) { const e = H.findIndex(this.animations, ((e) => e.chart === t)); e !== -1 && (this.animations.splice(e, 1), t.animating = !1); }, requestAnimationFrame() { const t = this; t.request === null && (t.request = H.requestAnimFrame.call(window, (() => { t.request = null, t.startDigest(); }))); }, startDigest() { this.advance(), this.animations.length > 0 && this.requestAnimationFrame(); }, advance() { for (var t, e, n, i, a = this.animations, r = 0; r < a.length;)e = (t = a[r]).chart, n = t.numSteps, i = Math.floor((Date.now() - t.startTime) / t.duration * n) + 1, t.currentStep = Math.min(i, n), H.callback(t.render, [e, t], e), H.callback(t.onAnimationProgress, [t], e), t.currentStep >= n ? (H.callback(t.onAnimationComplete, [t], e), e.animating = !1, a.splice(r, 1)) : ++r; },
  }; const Q = H.options.resolve; const tt = ['push', 'pop', 'shift', 'splice', 'unshift']; function et(t, e) { const n = t._chartjs; if (n) { const i = n.listeners; const a = i.indexOf(e); a !== -1 && i.splice(a, 1), i.length > 0 || (tt.forEach(((e) => { delete t[e]; })), delete t._chartjs); } } const nt = function (t, e) { this.initialize(t, e); }; H.extend(nt.prototype, {
    datasetElementType: null,
    dataElementType: null,
    _datasetElementOptions: ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth'],
    _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'pointStyle'],
    initialize(t, e) { const n = this; n.chart = t, n.index = e, n.linkScales(), n.addElements(), n._type = n.getMeta().type; },
    updateIndex(t) { this.index = t; },
    linkScales() { const t = this.getMeta(); const e = this.chart; const n = e.scales; const i = this.getDataset(); const a = e.options.scales; t.xAxisID !== null && t.xAxisID in n && !i.xAxisID || (t.xAxisID = i.xAxisID || a.xAxes[0].id), t.yAxisID !== null && t.yAxisID in n && !i.yAxisID || (t.yAxisID = i.yAxisID || a.yAxes[0].id); },
    getDataset() { return this.chart.data.datasets[this.index]; },
    getMeta() { return this.chart.getDatasetMeta(this.index); },
    getScaleForId(t) { return this.chart.scales[t]; },
    _getValueScaleId() { return this.getMeta().yAxisID; },
    _getIndexScaleId() { return this.getMeta().xAxisID; },
    _getValueScale() { return this.getScaleForId(this._getValueScaleId()); },
    _getIndexScale() { return this.getScaleForId(this._getIndexScaleId()); },
    reset() { this._update(!0); },
    destroy() { this._data && et(this._data, this); },
    createMetaDataset() { const t = this.datasetElementType; return t && new t({ _chart: this.chart, _datasetIndex: this.index }); },
    createMetaData(t) { const e = this.dataElementType; return e && new e({ _chart: this.chart, _datasetIndex: this.index, _index: t }); },
    addElements() { let t; let e; const n = this.getMeta(); const i = this.getDataset().data || []; const a = n.data; for (t = 0, e = i.length; t < e; ++t)a[t] = a[t] || this.createMetaData(t); n.dataset = n.dataset || this.createMetaDataset(); },
    addElementAndReset(t) { const e = this.createMetaData(t); this.getMeta().data.splice(t, 0, e), this.updateElement(e, t, !0); },
    buildOrUpdateElements() { let t; let e; const n = this; const i = n.getDataset(); const a = i.data || (i.data = []); n._data !== a && (n._data && et(n._data, n), a && Object.isExtensible(a) && (e = n, (t = a)._chartjs ? t._chartjs.listeners.push(e) : (Object.defineProperty(t, '_chartjs', { configurable: !0, enumerable: !1, value: { listeners: [e] } }), tt.forEach(((e) => { const n = `onData${e.charAt(0).toUpperCase()}${e.slice(1)}`; const i = t[e]; Object.defineProperty(t, e, { configurable: !0, enumerable: !1, value() { const e = Array.prototype.slice.call(arguments); const a = i.apply(this, e); return H.each(t._chartjs.listeners, ((t) => { typeof t[n] === 'function' && t[n].apply(t, e); })), a; } }); })))), n._data = a), n.resyncElements(); },
    _configure() { this._config = H.merge(Object.create(null), [this.chart.options.datasets[this._type], this.getDataset()], { merger(t, e, n) { t !== '_meta' && t !== 'data' && H._merger(t, e, n); } }); },
    _update(t) { this._configure(), this._cachedDataOpts = null, this.update(t); },
    update: H.noop,
    transition(t) { for (var e = this.getMeta(), n = e.data || [], i = n.length, a = 0; a < i; ++a)n[a].transition(t); e.dataset && e.dataset.transition(t); },
    draw() { const t = this.getMeta(); const e = t.data || []; const n = e.length; let i = 0; for (t.dataset && t.dataset.draw(); i < n; ++i)e[i].draw(); },
    getStyle(t) { let e; const n = this.getMeta(); const i = n.dataset; return this._configure(), i && void 0 === t ? e = this._resolveDatasetElementOptions(i || {}) : (t = t || 0, e = this._resolveDataElementOptions(n.data[t] || {}, t)), !1 !== e.fill && e.fill !== null || (e.backgroundColor = e.borderColor), e; },
    _resolveDatasetElementOptions(t, e) {
      let n; let i; let a; let r; const o = this; const s = o.chart; const l = o._config; const u = t.custom || {}; const d = s.options.elements[o.datasetElementType.prototype._type] || {}; const h = o._datasetElementOptions; const c = {}; const f = {
        chart: s, dataset: o.getDataset(), datasetIndex: o.index, hover: e,
      }; for (n = 0, i = h.length; n < i; ++n)a = h[n], r = e ? `hover${a.charAt(0).toUpperCase()}${a.slice(1)}` : a, c[a] = Q([u[r], l[r], d[r]], f); return c;
    },
    _resolveDataElementOptions(t, e) {
      const n = this; let i = t && t.custom; const a = n._cachedDataOpts; if (a && !i) return a; let r; let o; let s; let l; const u = n.chart; const d = n._config; const h = u.options.elements[n.dataElementType.prototype._type] || {}; const c = n._dataElementOptions; const f = {}; const g = {
        chart: u, dataIndex: e, dataset: n.getDataset(), datasetIndex: n.index,
      }; const p = { cacheable: !i }; if (i = i || {}, H.isArray(c)) for (o = 0, s = c.length; o < s; ++o)f[l = c[o]] = Q([i[l], d[l], h[l]], g, e, p); else for (o = 0, s = (r = Object.keys(c)).length; o < s; ++o)f[l = r[o]] = Q([i[l], d[c[l]], d[l], h[l]], g, e, p); return p.cacheable && (n._cachedDataOpts = Object.freeze(f)), f;
    },
    removeHoverStyle(t) { H.merge(t._model, t.$previousStyle || {}), delete t.$previousStyle; },
    setHoverStyle(t) { const e = this.chart.data.datasets[t._datasetIndex]; const n = t._index; const i = t.custom || {}; const a = t._model; const r = H.getHoverColor; t.$previousStyle = { backgroundColor: a.backgroundColor, borderColor: a.borderColor, borderWidth: a.borderWidth }, a.backgroundColor = Q([i.hoverBackgroundColor, e.hoverBackgroundColor, r(a.backgroundColor)], void 0, n), a.borderColor = Q([i.hoverBorderColor, e.hoverBorderColor, r(a.borderColor)], void 0, n), a.borderWidth = Q([i.hoverBorderWidth, e.hoverBorderWidth, a.borderWidth], void 0, n); },
    _removeDatasetHoverStyle() { const t = this.getMeta().dataset; t && this.removeHoverStyle(t); },
    _setDatasetHoverStyle() { let t; let e; let n; let i; let a; let r; const o = this.getMeta().dataset; const s = {}; if (o) { for (r = o._model, a = this._resolveDatasetElementOptions(o, !0), t = 0, e = (i = Object.keys(a)).length; t < e; ++t)s[n = i[t]] = r[n], r[n] = a[n]; o.$previousStyle = s; } },
    resyncElements() { const t = this.getMeta(); const e = this.getDataset().data; const n = t.data.length; const i = e.length; i < n ? t.data.splice(i, n - i) : i > n && this.insertElements(n, i - n); },
    insertElements(t, e) { for (let n = 0; n < e; ++n) this.addElementAndReset(t + n); },
    onDataPush() { const t = arguments.length; this.insertElements(this.getDataset().data.length - t, t); },
    onDataPop() { this.getMeta().data.pop(); },
    onDataShift() { this.getMeta().data.shift(); },
    onDataSplice(t, e) { this.getMeta().data.splice(t, e), this.insertElements(t, arguments.length - 2); },
    onDataUnshift() { this.insertElements(0, arguments.length); },
  }), nt.extend = H.inherits; const it = nt; const at = 2 * Math.PI; function rt(t, e) { const n = e.startAngle; const i = e.endAngle; const a = e.pixelMargin; let r = a / e.outerRadius; const o = e.x; const s = e.y; t.beginPath(), t.arc(o, s, e.outerRadius, n - r, i + r), e.innerRadius > a ? (r = a / e.innerRadius, t.arc(o, s, e.innerRadius - a, i + r, n - r, !0)) : t.arc(o, s, a, i + Math.PI / 2, n - Math.PI / 2), t.closePath(), t.clip(); } function ot(t, e, n) { const i = e.borderAlign === 'inner'; i ? (t.lineWidth = 2 * e.borderWidth, t.lineJoin = 'round') : (t.lineWidth = e.borderWidth, t.lineJoin = 'bevel'), n.fullCircles && (function (t, e, n, i) { let a; const r = n.endAngle; for (i && (n.endAngle = n.startAngle + at, rt(t, n), n.endAngle = r, n.endAngle === n.startAngle && n.fullCircles && (n.endAngle += at, n.fullCircles--)), t.beginPath(), t.arc(n.x, n.y, n.innerRadius, n.startAngle + at, n.startAngle, !0), a = 0; a < n.fullCircles; ++a)t.stroke(); for (t.beginPath(), t.arc(n.x, n.y, e.outerRadius, n.startAngle, n.startAngle + at), a = 0; a < n.fullCircles; ++a)t.stroke(); }(t, e, n, i)), i && rt(t, n), t.beginPath(), t.arc(n.x, n.y, e.outerRadius, n.startAngle, n.endAngle), t.arc(n.x, n.y, n.innerRadius, n.endAngle, n.startAngle, !0), t.closePath(), t.stroke(); }N._set('global', {
    elements: {
      arc: {
        backgroundColor: N.global.defaultColor, borderColor: '#fff', borderWidth: 2, borderAlign: 'center',
      },
    },
  }); const st = K.extend({
    _type: 'arc',
    inLabelRange(t) { const e = this._view; return !!e && Math.pow(t - e.x, 2) < Math.pow(e.radius + e.hoverRadius, 2); },
    inRange(t, e) { const n = this._view; if (n) { for (var i = H.getAngleFromPoint(n, { x: t, y: e }), a = i.angle, r = i.distance, o = n.startAngle, s = n.endAngle; s < o;)s += at; for (;a > s;)a -= at; for (;a < o;)a += at; const l = a >= o && a <= s; const u = r >= n.innerRadius && r <= n.outerRadius; return l && u; } return !1; },
    getCenterPoint() { const t = this._view; const e = (t.startAngle + t.endAngle) / 2; const n = (t.innerRadius + t.outerRadius) / 2; return { x: t.x + Math.cos(e) * n, y: t.y + Math.sin(e) * n }; },
    getArea() { const t = this._view; return Math.PI * ((t.endAngle - t.startAngle) / (2 * Math.PI)) * (Math.pow(t.outerRadius, 2) - Math.pow(t.innerRadius, 2)); },
    tooltipPosition() { const t = this._view; const e = t.startAngle + (t.endAngle - t.startAngle) / 2; const n = (t.outerRadius - t.innerRadius) / 2 + t.innerRadius; return { x: t.x + Math.cos(e) * n, y: t.y + Math.sin(e) * n }; },
    draw() {
      let t; const e = this._chart.ctx; const n = this._view; const i = n.borderAlign === 'inner' ? 0.33 : 0; const a = {
        x: n.x, y: n.y, innerRadius: n.innerRadius, outerRadius: Math.max(n.outerRadius - i, 0), pixelMargin: i, startAngle: n.startAngle, endAngle: n.endAngle, fullCircles: Math.floor(n.circumference / at),
      }; if (e.save(), e.fillStyle = n.backgroundColor, e.strokeStyle = n.borderColor, a.fullCircles) { for (a.endAngle = a.startAngle + at, e.beginPath(), e.arc(a.x, a.y, a.outerRadius, a.startAngle, a.endAngle), e.arc(a.x, a.y, a.innerRadius, a.endAngle, a.startAngle, !0), e.closePath(), t = 0; t < a.fullCircles; ++t)e.fill(); a.endAngle = a.startAngle + n.circumference % at; }e.beginPath(), e.arc(a.x, a.y, a.outerRadius, a.startAngle, a.endAngle), e.arc(a.x, a.y, a.innerRadius, a.endAngle, a.startAngle, !0), e.closePath(), e.fill(), n.borderWidth && ot(e, n, a), e.restore();
    },
  }); const lt = H.valueOrDefault; const ut = N.global.defaultColor; N._set('global', {
    elements: {
      line: {
        tension: 0.4, backgroundColor: ut, borderWidth: 3, borderColor: ut, borderCapStyle: 'butt', borderDash: [], borderDashOffset: 0, borderJoinStyle: 'miter', capBezierPoints: !0, fill: !0,
      },
    },
  }); const dt = K.extend({ _type: 'line', draw() { let t; let e; let n; const i = this; const a = i._view; const r = i._chart.ctx; const o = a.spanGaps; let s = i._children.slice(); const l = N.global; const u = l.elements.line; let d = -1; let h = i._loop; if (s.length) { if (i._loop) { for (t = 0; t < s.length; ++t) if (e = H.previousItem(s, t), !s[t]._view.skip && e._view.skip) { s = s.slice(t).concat(s.slice(0, t)), h = o; break; }h && s.push(s[0]); } for (r.save(), r.lineCap = a.borderCapStyle || u.borderCapStyle, r.setLineDash && r.setLineDash(a.borderDash || u.borderDash), r.lineDashOffset = lt(a.borderDashOffset, u.borderDashOffset), r.lineJoin = a.borderJoinStyle || u.borderJoinStyle, r.lineWidth = lt(a.borderWidth, u.borderWidth), r.strokeStyle = a.borderColor || l.defaultColor, r.beginPath(), (n = s[0]._view).skip || (r.moveTo(n.x, n.y), d = 0), t = 1; t < s.length; ++t)n = s[t]._view, e = d === -1 ? H.previousItem(s, t) : s[d], n.skip || (d !== t - 1 && !o || d === -1 ? r.moveTo(n.x, n.y) : H.canvas.lineTo(r, e._view, n), d = t); h && r.closePath(), r.stroke(), r.restore(); } } }); const ht = H.valueOrDefault; const ct = N.global.defaultColor; function ft(t) { const e = this._view; return !!e && Math.abs(t - e.x) < e.radius + e.hitRadius; }N._set('global', {
    elements: {
      point: {
        radius: 3, pointStyle: 'circle', backgroundColor: ct, borderColor: ct, borderWidth: 1, hitRadius: 1, hoverRadius: 4, hoverBorderWidth: 1,
      },
    },
  }); const gt = K.extend({
    _type: 'point', inRange(t, e) { const n = this._view; return !!n && Math.pow(t - n.x, 2) + Math.pow(e - n.y, 2) < Math.pow(n.hitRadius + n.radius, 2); }, inLabelRange: ft, inXRange: ft, inYRange(t) { const e = this._view; return !!e && Math.abs(t - e.y) < e.radius + e.hitRadius; }, getCenterPoint() { const t = this._view; return { x: t.x, y: t.y }; }, getArea() { return Math.PI * Math.pow(this._view.radius, 2); }, tooltipPosition() { const t = this._view; return { x: t.x, y: t.y, padding: t.radius + t.borderWidth }; }, draw(t) { const e = this._view; const n = this._chart.ctx; const i = e.pointStyle; const a = e.rotation; const r = e.radius; const o = e.x; const s = e.y; const l = N.global; const u = l.defaultColor; e.skip || (void 0 === t || H.canvas._isPointInArea(e, t)) && (n.strokeStyle = e.borderColor || u, n.lineWidth = ht(e.borderWidth, l.elements.point.borderWidth), n.fillStyle = e.backgroundColor || u, H.canvas.drawPoint(n, i, r, o, s, a)); },
  }); const pt = N.global.defaultColor; function mt(t) { return t && void 0 !== t.width; } function vt(t) {
    let e; let n; let i; let a; let r; return mt(t) ? (r = t.width / 2, e = t.x - r, n = t.x + r, i = Math.min(t.y, t.base), a = Math.max(t.y, t.base)) : (r = t.height / 2, e = Math.min(t.x, t.base), n = Math.max(t.x, t.base), i = t.y - r, a = t.y + r), {
      left: e, top: i, right: n, bottom: a,
    };
  } function bt(t, e, n) { return t === e ? n : t === n ? e : t; } function xt(t, e, n) {
    let i; let a; let r; let o; const s = t.borderWidth; const l = (function (t) { let e = t.borderSkipped; const n = {}; return e ? (t.horizontal ? t.base > t.x && (e = bt(e, 'left', 'right')) : t.base < t.y && (e = bt(e, 'bottom', 'top')), n[e] = !0, n) : n; }(t)); return H.isObject(s) ? (i = +s.top || 0, a = +s.right || 0, r = +s.bottom || 0, o = +s.left || 0) : i = a = r = o = +s || 0, {
      t: l.top || i < 0 ? 0 : i > n ? n : i, r: l.right || a < 0 ? 0 : a > e ? e : a, b: l.bottom || r < 0 ? 0 : r > n ? n : r, l: l.left || o < 0 ? 0 : o > e ? e : o,
    };
  } function yt(t, e, n) { const i = e === null; const a = n === null; const r = !(!t || i && a) && vt(t); return r && (i || e >= r.left && e <= r.right) && (a || n >= r.top && n <= r.bottom); }N._set('global', {
    elements: {
      rectangle: {
        backgroundColor: pt, borderColor: pt, borderSkipped: 'bottom', borderWidth: 0,
      },
    },
  }); const _t = K.extend({
    _type: 'rectangle',
    draw() {
      const t = this._chart.ctx; const e = this._view; const n = (function (t) {
        const e = vt(t); const n = e.right - e.left; const i = e.bottom - e.top; const a = xt(t, n / 2, i / 2); return {
          outer: {
            x: e.left, y: e.top, w: n, h: i,
          },
          inner: {
            x: e.left + a.l, y: e.top + a.t, w: n - a.l - a.r, h: i - a.t - a.b,
          },
        };
      }(e)); const i = n.outer; const a = n.inner; t.fillStyle = e.backgroundColor, t.fillRect(i.x, i.y, i.w, i.h), i.w === a.w && i.h === a.h || (t.save(), t.beginPath(), t.rect(i.x, i.y, i.w, i.h), t.clip(), t.fillStyle = e.borderColor, t.rect(a.x, a.y, a.w, a.h), t.fill('evenodd'), t.restore());
    },
    height() { const t = this._view; return t.base - t.y; },
    inRange(t, e) { return yt(this._view, t, e); },
    inLabelRange(t, e) { const n = this._view; return mt(n) ? yt(n, t, null) : yt(n, null, e); },
    inXRange(t) { return yt(this._view, t, null); },
    inYRange(t) { return yt(this._view, null, t); },
    getCenterPoint() { let t; let e; const n = this._view; return mt(n) ? (t = n.x, e = (n.y + n.base) / 2) : (t = (n.x + n.base) / 2, e = n.y), { x: t, y: e }; },
    getArea() { const t = this._view; return mt(t) ? t.width * Math.abs(t.y - t.base) : t.height * Math.abs(t.x - t.base); },
    tooltipPosition() { const t = this._view; return { x: t.x, y: t.y }; },
  }); const kt = {}; const wt = st; const Mt = dt; const St = gt; const Ct = _t; kt.Arc = wt, kt.Line = Mt, kt.Point = St, kt.Rectangle = Ct; const Pt = H._deprecated; const At = H.valueOrDefault; function Dt(t, e, n) { let i; let a; const r = n.barThickness; const o = e.stackCount; const s = e.pixels[t]; const l = H.isNullOrUndef(r) ? (function (t, e) { let n; let i; let a; let r; let o = t._length; for (a = 1, r = e.length; a < r; ++a)o = Math.min(o, Math.abs(e[a] - e[a - 1])); for (a = 0, r = t.getTicks().length; a < r; ++a)i = t.getPixelForTick(a), o = a > 0 ? Math.min(o, Math.abs(i - n)) : o, n = i; return o; }(e.scale, e.pixels)) : -1; return H.isNullOrUndef(r) ? (i = l * n.categoryPercentage, a = n.barPercentage) : (i = r * o, a = 1), { chunk: i / o, ratio: a, start: s - i / 2 }; }N._set('bar', { hover: { mode: 'label' }, scales: { xAxes: [{ type: 'category', offset: !0, gridLines: { offsetGridLines: !0 } }], yAxes: [{ type: 'linear' }] } }), N._set('global', { datasets: { bar: { categoryPercentage: 0.8, barPercentage: 0.9 } } }); const Tt = it.extend({
    dataElementType: kt.Rectangle,
    _dataElementOptions: ['backgroundColor', 'borderColor', 'borderSkipped', 'borderWidth', 'barPercentage', 'barThickness', 'categoryPercentage', 'maxBarThickness', 'minBarLength'],
    initialize() { let t; let e; const n = this; it.prototype.initialize.apply(n, arguments), (t = n.getMeta()).stack = n.getDataset().stack, t.bar = !0, e = n._getIndexScale().options, Pt('bar chart', e.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage'), Pt('bar chart', e.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness'), Pt('bar chart', e.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage'), Pt('bar chart', n._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength'), Pt('bar chart', e.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness'); },
    update(t) { let e; let n; const i = this.getMeta().data; for (this._ruler = this.getRuler(), e = 0, n = i.length; e < n; ++e) this.updateElement(i[e], e, t); },
    updateElement(t, e, n) {
      const i = this; const a = i.getMeta(); const r = i.getDataset(); const o = i._resolveDataElementOptions(t, e); t._xScale = i.getScaleForId(a.xAxisID), t._yScale = i.getScaleForId(a.yAxisID), t._datasetIndex = i.index, t._index = e, t._model = {
        backgroundColor: o.backgroundColor, borderColor: o.borderColor, borderSkipped: o.borderSkipped, borderWidth: o.borderWidth, datasetLabel: r.label, label: i.chart.data.labels[e],
      }, H.isArray(r.data[e]) && (t._model.borderSkipped = null), i._updateElementGeometry(t, e, n, o), t.pivot();
    },
    _updateElementGeometry(t, e, n, i) { const a = this; const r = t._model; const o = a._getValueScale(); const s = o.getBasePixel(); const l = o.isHorizontal(); const u = a._ruler || a.getRuler(); const d = a.calculateBarValuePixels(a.index, e, i); const h = a.calculateBarIndexPixels(a.index, e, u, i); r.horizontal = l, r.base = n ? s : d.base, r.x = l ? n ? s : d.head : h.center, r.y = l ? h.center : n ? s : d.head, r.height = l ? h.size : void 0, r.width = l ? void 0 : h.size; },
    _getStacks(t) { let e; let n; const i = this._getIndexScale(); const a = i._getMatchingVisibleMetas(this._type); const r = i.options.stacked; const o = a.length; const s = []; for (e = 0; e < o && (n = a[e], (!1 === r || s.indexOf(n.stack) === -1 || void 0 === r && void 0 === n.stack) && s.push(n.stack), n.index !== t); ++e);return s; },
    getStackCount() { return this._getStacks().length; },
    getStackIndex(t, e) { const n = this._getStacks(t); const i = void 0 !== e ? n.indexOf(e) : -1; return i === -1 ? n.length - 1 : i; },
    getRuler() {
      let t; let e; const n = this._getIndexScale(); const i = []; for (t = 0, e = this.getMeta().data.length; t < e; ++t)i.push(n.getPixelForValue(null, t, this.index)); return {
        pixels: i, start: n._startPixel, end: n._endPixel, stackCount: this.getStackCount(), scale: n,
      };
    },
    calculateBarValuePixels(t, e, n) {
      let i; let a; let r; let o; let s; let l; let u; const d = this.chart; const h = this._getValueScale(); const c = h.isHorizontal(); const f = d.data.datasets; const g = h._getMatchingVisibleMetas(this._type); const p = h._parseValue(f[t].data[e]); const m = n.minBarLength; const v = h.options.stacked; const b = this.getMeta().stack; let x = void 0 === p.start ? 0 : p.max >= 0 && p.min >= 0 ? p.min : p.max; const y = void 0 === p.start ? p.end : p.max >= 0 && p.min >= 0 ? p.max - p.min : p.min - p.max; const _ = g.length; if (v || void 0 === v && void 0 !== b) for (i = 0; i < _ && (a = g[i]).index !== t; ++i)a.stack === b && (r = void 0 === (u = h._parseValue(f[a.index].data[e])).start ? u.end : u.min >= 0 && u.max >= 0 ? u.max : u.min, (p.min < 0 && r < 0 || p.max >= 0 && r > 0) && (x += r)); return o = h.getPixelForValue(x), l = (s = h.getPixelForValue(x + y)) - o, void 0 !== m && Math.abs(l) < m && (l = m, s = y >= 0 && !c || y < 0 && c ? o - m : o + m), {
        size: l, base: o, head: s, center: s + l / 2,
      };
    },
    calculateBarIndexPixels(t, e, n, i) {
      const a = i.barThickness === 'flex' ? (function (t, e, n) { let i; const a = e.pixels; const r = a[t]; let o = t > 0 ? a[t - 1] : null; let s = t < a.length - 1 ? a[t + 1] : null; const l = n.categoryPercentage; return o === null && (o = r - (s === null ? e.end - e.start : s - r)), s === null && (s = r + r - o), i = r - (r - Math.min(o, s)) / 2 * l, { chunk: Math.abs(s - o) / 2 * l / e.stackCount, ratio: n.barPercentage, start: i }; }(e, n, i)) : Dt(e, n, i); const r = this.getStackIndex(t, this.getMeta().stack); const o = a.start + a.chunk * r + a.chunk / 2; const s = Math.min(At(i.maxBarThickness, 1 / 0), a.chunk * a.ratio); return {
        base: o - s / 2, head: o + s / 2, center: o, size: s,
      };
    },
    draw() { const t = this.chart; const e = this._getValueScale(); const n = this.getMeta().data; const i = this.getDataset(); const a = n.length; let r = 0; for (H.canvas.clipArea(t.ctx, t.chartArea); r < a; ++r) { const o = e._parseValue(i.data[r]); isNaN(o.min) || isNaN(o.max) || n[r].draw(); }H.canvas.unclipArea(t.ctx); },
    _resolveDataElementOptions() { const t = this; const e = H.extend({}, it.prototype._resolveDataElementOptions.apply(t, arguments)); const n = t._getIndexScale().options; const i = t._getValueScale().options; return e.barPercentage = At(n.barPercentage, e.barPercentage), e.barThickness = At(n.barThickness, e.barThickness), e.categoryPercentage = At(n.categoryPercentage, e.categoryPercentage), e.maxBarThickness = At(n.maxBarThickness, e.maxBarThickness), e.minBarLength = At(i.minBarLength, e.minBarLength), e; },
  }); const It = H.valueOrDefault; const Ft = H.options.resolve; N._set('bubble', { hover: { mode: 'single' }, scales: { xAxes: [{ type: 'linear', position: 'bottom', id: 'x-axis-0' }], yAxes: [{ type: 'linear', position: 'left', id: 'y-axis-0' }] }, tooltips: { callbacks: { title() { return ''; }, label(t, e) { const n = e.datasets[t.datasetIndex].label || ''; const i = e.datasets[t.datasetIndex].data[t.index]; return `${n}: (${t.xLabel}, ${t.yLabel}, ${i.r})`; } } } }); const Ot = it.extend({
    dataElementType: kt.Point,
    _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth', 'hoverRadius', 'hitRadius', 'pointStyle', 'rotation'],
    update(t) { const e = this; const n = e.getMeta().data; H.each(n, ((n, i) => { e.updateElement(n, i, t); })); },
    updateElement(t, e, n) {
      const i = this; const a = i.getMeta(); const r = t.custom || {}; const o = i.getScaleForId(a.xAxisID); const s = i.getScaleForId(a.yAxisID); const l = i._resolveDataElementOptions(t, e); const u = i.getDataset().data[e]; const d = i.index; const h = n ? o.getPixelForDecimal(0.5) : o.getPixelForValue(typeof u === 'object' ? u : NaN, e, d); const c = n ? s.getBasePixel() : s.getPixelForValue(u, e, d); t._xScale = o, t._yScale = s, t._options = l, t._datasetIndex = d, t._index = e, t._model = {
        backgroundColor: l.backgroundColor, borderColor: l.borderColor, borderWidth: l.borderWidth, hitRadius: l.hitRadius, pointStyle: l.pointStyle, rotation: l.rotation, radius: n ? 0 : l.radius, skip: r.skip || isNaN(h) || isNaN(c), x: h, y: c,
      }, t.pivot();
    },
    setHoverStyle(t) {
      const e = t._model; const n = t._options; const i = H.getHoverColor; t.$previousStyle = {
        backgroundColor: e.backgroundColor, borderColor: e.borderColor, borderWidth: e.borderWidth, radius: e.radius,
      }, e.backgroundColor = It(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = It(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = It(n.hoverBorderWidth, n.borderWidth), e.radius = n.radius + n.hoverRadius;
    },
    _resolveDataElementOptions(t, e) {
      const n = this; const i = n.chart; const a = n.getDataset(); const r = t.custom || {}; const o = a.data[e] || {}; let s = it.prototype._resolveDataElementOptions.apply(n, arguments); const l = {
        chart: i, dataIndex: e, dataset: a, datasetIndex: n.index,
      }; return n._cachedDataOpts === s && (s = H.extend({}, s)), s.radius = Ft([r.radius, o.r, n._config.radius, i.options.elements.point.radius], l, e), s;
    },
  }); const Lt = H.valueOrDefault; const Rt = Math.PI; const zt = 2 * Rt; const Nt = Rt / 2; N._set('doughnut', {
    animation: { animateRotate: !0, animateScale: !1 },
    hover: { mode: 'single' },
    legendCallback(t) { let e; let n; let i; const a = document.createElement('ul'); const r = t.data; const o = r.datasets; const s = r.labels; if (a.setAttribute('class', `${t.id}-legend`), o.length) for (e = 0, n = o[0].data.length; e < n; ++e)(i = a.appendChild(document.createElement('li'))).appendChild(document.createElement('span')).style.backgroundColor = o[0].backgroundColor[e], s[e] && i.appendChild(document.createTextNode(s[e])); return a.outerHTML; },
    legend: {
      labels: {
        generateLabels(t) {
          const e = t.data; return e.labels.length && e.datasets.length ? e.labels.map(((n, i) => {
            const a = t.getDatasetMeta(0); const r = a.controller.getStyle(i); return {
              text: n, fillStyle: r.backgroundColor, strokeStyle: r.borderColor, lineWidth: r.borderWidth, hidden: isNaN(e.datasets[0].data[i]) || a.data[i].hidden, index: i,
            };
          })) : [];
        },
      },
      onClick(t, e) { let n; let i; let a; const r = e.index; const o = this.chart; for (n = 0, i = (o.data.datasets || []).length; n < i; ++n)(a = o.getDatasetMeta(n)).data[r] && (a.data[r].hidden = !a.data[r].hidden); o.update(); },
    },
    cutoutPercentage: 50,
    rotation: -Nt,
    circumference: zt,
    tooltips: { callbacks: { title() { return ''; }, label(t, e) { let n = e.labels[t.index]; const i = `: ${e.datasets[t.datasetIndex].data[t.index]}`; return H.isArray(n) ? (n = n.slice())[0] += i : n += i, n; } } },
  }); const Bt = it.extend({
    dataElementType: kt.Arc,
    linkScales: H.noop,
    _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'],
    getRingIndex(t) { for (var e = 0, n = 0; n < t; ++n) this.chart.isDatasetVisible(n) && ++e; return e; },
    update(t) { let e; let n; let i; let a; const r = this; const o = r.chart; const s = o.chartArea; const l = o.options; let u = 1; let d = 1; let h = 0; let c = 0; const f = r.getMeta(); const g = f.data; const p = l.cutoutPercentage / 100 || 0; const m = l.circumference; const v = r._getRingWeight(r.index); if (m < zt) { let b = l.rotation % zt; const x = (b += b >= Rt ? -zt : b < -Rt ? zt : 0) + m; const y = Math.cos(b); const _ = Math.sin(b); const k = Math.cos(x); const w = Math.sin(x); const M = b <= 0 && x >= 0 || x >= zt; const S = b <= Nt && x >= Nt || x >= zt + Nt; const C = b <= -Nt && x >= -Nt || x >= Rt + Nt; const P = b === -Rt || x >= Rt ? -1 : Math.min(y, y * p, k, k * p); const A = C ? -1 : Math.min(_, _ * p, w, w * p); const D = M ? 1 : Math.max(y, y * p, k, k * p); const T = S ? 1 : Math.max(_, _ * p, w, w * p); u = (D - P) / 2, d = (T - A) / 2, h = -(D + P) / 2, c = -(T + A) / 2; } for (i = 0, a = g.length; i < a; ++i)g[i]._options = r._resolveDataElementOptions(g[i], i); for (o.borderWidth = r.getMaxBorderWidth(), e = (s.right - s.left - o.borderWidth) / u, n = (s.bottom - s.top - o.borderWidth) / d, o.outerRadius = Math.max(Math.min(e, n) / 2, 0), o.innerRadius = Math.max(o.outerRadius * p, 0), o.radiusLength = (o.outerRadius - o.innerRadius) / (r._getVisibleDatasetWeightTotal() || 1), o.offsetX = h * o.outerRadius, o.offsetY = c * o.outerRadius, f.total = r.calculateTotal(), r.outerRadius = o.outerRadius - o.radiusLength * r._getRingWeightOffset(r.index), r.innerRadius = Math.max(r.outerRadius - o.radiusLength * v, 0), i = 0, a = g.length; i < a; ++i)r.updateElement(g[i], i, t); },
    updateElement(t, e, n) {
      const i = this; const a = i.chart; const r = a.chartArea; const o = a.options; const s = o.animation; const l = (r.left + r.right) / 2; const u = (r.top + r.bottom) / 2; const d = o.rotation; const h = o.rotation; const c = i.getDataset(); const f = n && s.animateRotate ? 0 : t.hidden ? 0 : i.calculateCircumference(c.data[e]) * (o.circumference / zt); const g = n && s.animateScale ? 0 : i.innerRadius; const p = n && s.animateScale ? 0 : i.outerRadius; const m = t._options || {}; H.extend(t, {
        _datasetIndex: i.index,
        _index: e,
        _model: {
          backgroundColor: m.backgroundColor, borderColor: m.borderColor, borderWidth: m.borderWidth, borderAlign: m.borderAlign, x: l + a.offsetX, y: u + a.offsetY, startAngle: d, endAngle: h, circumference: f, outerRadius: p, innerRadius: g, label: H.valueAtIndexOrDefault(c.label, e, a.data.labels[e]),
        },
      }); const v = t._model; n && s.animateRotate || (v.startAngle = e === 0 ? o.rotation : i.getMeta().data[e - 1]._model.endAngle, v.endAngle = v.startAngle + v.circumference), t.pivot();
    },
    calculateTotal() { let t; const e = this.getDataset(); const n = this.getMeta(); let i = 0; return H.each(n.data, ((n, a) => { t = e.data[a], isNaN(t) || n.hidden || (i += Math.abs(t)); })), i; },
    calculateCircumference(t) { const e = this.getMeta().total; return e > 0 && !isNaN(t) ? zt * (Math.abs(t) / e) : 0; },
    getMaxBorderWidth(t) { let e; let n; let i; let a; let r; let o; let s; let l; let u = 0; const d = this.chart; if (!t) for (e = 0, n = d.data.datasets.length; e < n; ++e) if (d.isDatasetVisible(e)) { t = (i = d.getDatasetMeta(e)).data, e !== this.index && (r = i.controller); break; } if (!t) return 0; for (e = 0, n = t.length; e < n; ++e)a = t[e], r ? (r._configure(), o = r._resolveDataElementOptions(a, e)) : o = a._options, o.borderAlign !== 'inner' && (s = o.borderWidth, u = (l = o.hoverBorderWidth) > (u = s > u ? s : u) ? l : u); return u; },
    setHoverStyle(t) { const e = t._model; const n = t._options; const i = H.getHoverColor; t.$previousStyle = { backgroundColor: e.backgroundColor, borderColor: e.borderColor, borderWidth: e.borderWidth }, e.backgroundColor = Lt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Lt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Lt(n.hoverBorderWidth, n.borderWidth); },
    _getRingWeightOffset(t) { for (var e = 0, n = 0; n < t; ++n) this.chart.isDatasetVisible(n) && (e += this._getRingWeight(n)); return e; },
    _getRingWeight(t) { return Math.max(Lt(this.chart.data.datasets[t].weight, 1), 0); },
    _getVisibleDatasetWeightTotal() { return this._getRingWeightOffset(this.chart.data.datasets.length); },
  }); N._set('horizontalBar', {
    hover: { mode: 'index', axis: 'y' },
    scales: {
      xAxes: [{ type: 'linear', position: 'bottom' }],
      yAxes: [{
        type: 'category', position: 'left', offset: !0, gridLines: { offsetGridLines: !0 },
      }],
    },
    elements: { rectangle: { borderSkipped: 'left' } },
    tooltips: { mode: 'index', axis: 'y' },
  }), N._set('global', { datasets: { horizontalBar: { categoryPercentage: 0.8, barPercentage: 0.9 } } }); const Et = Tt.extend({ _getValueScaleId() { return this.getMeta().xAxisID; }, _getIndexScaleId() { return this.getMeta().yAxisID; } }); const Wt = H.valueOrDefault; const Vt = H.options.resolve; const Ht = H.canvas._isPointInArea; function jt(t, e) { const n = t && t.options.ticks || {}; const i = n.reverse; const a = void 0 === n.min ? e : 0; const r = void 0 === n.max ? e : 0; return { start: i ? r : a, end: i ? a : r }; } function qt(t, e, n) {
    const i = n / 2; const a = jt(t, i); const r = jt(e, i); return {
      top: r.end, right: a.end, bottom: r.start, left: a.start,
    };
  } function Ut(t) {
    let e; let n; let i; let a; return H.isObject(t) ? (e = t.top, n = t.right, i = t.bottom, a = t.left) : e = n = i = a = t, {
      top: e, right: n, bottom: i, left: a,
    };
  }N._set('line', {
    showLines: !0, spanGaps: !1, hover: { mode: 'label' }, scales: { xAxes: [{ type: 'category', id: 'x-axis-0' }], yAxes: [{ type: 'linear', id: 'y-axis-0' }] },
  }); const Yt = it.extend({
    datasetElementType: kt.Line,
    dataElementType: kt.Point,
    _datasetElementOptions: ['backgroundColor', 'borderCapStyle', 'borderColor', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'borderWidth', 'cubicInterpolationMode', 'fill'],
    _dataElementOptions: {
      backgroundColor: 'pointBackgroundColor', borderColor: 'pointBorderColor', borderWidth: 'pointBorderWidth', hitRadius: 'pointHitRadius', hoverBackgroundColor: 'pointHoverBackgroundColor', hoverBorderColor: 'pointHoverBorderColor', hoverBorderWidth: 'pointHoverBorderWidth', hoverRadius: 'pointHoverRadius', pointStyle: 'pointStyle', radius: 'pointRadius', rotation: 'pointRotation',
    },
    update(t) { let e; let n; const i = this; const a = i.getMeta(); const r = a.dataset; const o = a.data || []; const s = i.chart.options; const l = i._config; const u = i._showLine = Wt(l.showLine, s.showLines); for (i._xScale = i.getScaleForId(a.xAxisID), i._yScale = i.getScaleForId(a.yAxisID), u && (void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), r._scale = i._yScale, r._datasetIndex = i.index, r._children = o, r._model = i._resolveDatasetElementOptions(r), r.pivot()), e = 0, n = o.length; e < n; ++e)i.updateElement(o[e], e, t); for (u && r._model.tension !== 0 && i.updateBezierControlPoints(), e = 0, n = o.length; e < n; ++e)o[e].pivot(); },
    updateElement(t, e, n) {
      let i; let a; const r = this; const o = r.getMeta(); const s = t.custom || {}; const l = r.getDataset(); const u = r.index; const d = l.data[e]; const h = r._xScale; const c = r._yScale; const f = o.dataset._model; const g = r._resolveDataElementOptions(t, e); i = h.getPixelForValue(typeof d === 'object' ? d : NaN, e, u), a = n ? c.getBasePixel() : r.calculatePointY(d, e, u), t._xScale = h, t._yScale = c, t._options = g, t._datasetIndex = u, t._index = e, t._model = {
        x: i, y: a, skip: s.skip || isNaN(i) || isNaN(a), radius: g.radius, pointStyle: g.pointStyle, rotation: g.rotation, backgroundColor: g.backgroundColor, borderColor: g.borderColor, borderWidth: g.borderWidth, tension: Wt(s.tension, f ? f.tension : 0), steppedLine: !!f && f.steppedLine, hitRadius: g.hitRadius,
      };
    },
    _resolveDatasetElementOptions(t) { const e = this; const n = e._config; const i = t.custom || {}; const a = e.chart.options; const r = a.elements.line; const o = it.prototype._resolveDatasetElementOptions.apply(e, arguments); return o.spanGaps = Wt(n.spanGaps, a.spanGaps), o.tension = Wt(n.lineTension, r.tension), o.steppedLine = Vt([i.steppedLine, n.steppedLine, r.stepped]), o.clip = Ut(Wt(n.clip, qt(e._xScale, e._yScale, o.borderWidth))), o; },
    calculatePointY(t, e, n) { let i; let a; let r; let o; let s; let l; let u; const d = this.chart; const h = this._yScale; let c = 0; let f = 0; if (h.options.stacked) { for (s = +h.getRightValue(t), u = (l = d._getSortedVisibleDatasetMetas()).length, i = 0; i < u && (r = l[i]).index !== n; ++i)a = d.data.datasets[r.index], r.type === 'line' && r.yAxisID === h.id && ((o = +h.getRightValue(a.data[e])) < 0 ? f += o || 0 : c += o || 0); return s < 0 ? h.getPixelForValue(f + s) : h.getPixelForValue(c + s); } return h.getPixelForValue(t); },
    updateBezierControlPoints() { let t; let e; let n; let i; const a = this.chart; const r = this.getMeta(); const o = r.dataset._model; const s = a.chartArea; let l = r.data || []; function u(t, e, n) { return Math.max(Math.min(t, n), e); } if (o.spanGaps && (l = l.filter(((t) => !t._model.skip))), o.cubicInterpolationMode === 'monotone')H.splineCurveMonotone(l); else for (t = 0, e = l.length; t < e; ++t)n = l[t]._model, i = H.splineCurve(H.previousItem(l, t)._model, n, H.nextItem(l, t)._model, o.tension), n.controlPointPreviousX = i.previous.x, n.controlPointPreviousY = i.previous.y, n.controlPointNextX = i.next.x, n.controlPointNextY = i.next.y; if (a.options.elements.line.capBezierPoints) for (t = 0, e = l.length; t < e; ++t)n = l[t]._model, Ht(n, s) && (t > 0 && Ht(l[t - 1]._model, s) && (n.controlPointPreviousX = u(n.controlPointPreviousX, s.left, s.right), n.controlPointPreviousY = u(n.controlPointPreviousY, s.top, s.bottom)), t < l.length - 1 && Ht(l[t + 1]._model, s) && (n.controlPointNextX = u(n.controlPointNextX, s.left, s.right), n.controlPointNextY = u(n.controlPointNextY, s.top, s.bottom))); },
    draw() {
      let t; const e = this.chart; const n = this.getMeta(); const i = n.data || []; const a = e.chartArea; const r = e.canvas; let o = 0; const s = i.length; for (this._showLine && (t = n.dataset._model.clip, H.canvas.clipArea(e.ctx, {
        left: !1 === t.left ? 0 : a.left - t.left, right: !1 === t.right ? r.width : a.right + t.right, top: !1 === t.top ? 0 : a.top - t.top, bottom: !1 === t.bottom ? r.height : a.bottom + t.bottom,
      }), n.dataset.draw(), H.canvas.unclipArea(e.ctx)); o < s; ++o)i[o].draw(a);
    },
    setHoverStyle(t) {
      const e = t._model; const n = t._options; const i = H.getHoverColor; t.$previousStyle = {
        backgroundColor: e.backgroundColor, borderColor: e.borderColor, borderWidth: e.borderWidth, radius: e.radius,
      }, e.backgroundColor = Wt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Wt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Wt(n.hoverBorderWidth, n.borderWidth), e.radius = Wt(n.hoverRadius, n.radius);
    },
  }); const Gt = H.options.resolve; N._set('polarArea', {
    scale: {
      type: 'radialLinear', angleLines: { display: !1 }, gridLines: { circular: !0 }, pointLabels: { display: !1 }, ticks: { beginAtZero: !0 },
    },
    animation: { animateRotate: !0, animateScale: !0 },
    startAngle: -0.5 * Math.PI,
    legendCallback(t) { let e; let n; let i; const a = document.createElement('ul'); const r = t.data; const o = r.datasets; const s = r.labels; if (a.setAttribute('class', `${t.id}-legend`), o.length) for (e = 0, n = o[0].data.length; e < n; ++e)(i = a.appendChild(document.createElement('li'))).appendChild(document.createElement('span')).style.backgroundColor = o[0].backgroundColor[e], s[e] && i.appendChild(document.createTextNode(s[e])); return a.outerHTML; },
    legend: {
      labels: {
        generateLabels(t) {
          const e = t.data; return e.labels.length && e.datasets.length ? e.labels.map(((n, i) => {
            const a = t.getDatasetMeta(0); const r = a.controller.getStyle(i); return {
              text: n, fillStyle: r.backgroundColor, strokeStyle: r.borderColor, lineWidth: r.borderWidth, hidden: isNaN(e.datasets[0].data[i]) || a.data[i].hidden, index: i,
            };
          })) : [];
        },
      },
      onClick(t, e) { let n; let i; let a; const r = e.index; const o = this.chart; for (n = 0, i = (o.data.datasets || []).length; n < i; ++n)(a = o.getDatasetMeta(n)).data[r].hidden = !a.data[r].hidden; o.update(); },
    },
    tooltips: { callbacks: { title() { return ''; }, label(t, e) { return `${e.labels[t.index]}: ${t.yLabel}`; } } },
  }); const Xt = it.extend({
    dataElementType: kt.Arc,
    linkScales: H.noop,
    _dataElementOptions: ['backgroundColor', 'borderColor', 'borderWidth', 'borderAlign', 'hoverBackgroundColor', 'hoverBorderColor', 'hoverBorderWidth'],
    _getIndexScaleId() { return this.chart.scale.id; },
    _getValueScaleId() { return this.chart.scale.id; },
    update(t) { let e; let n; let i; const a = this; const r = a.getDataset(); const o = a.getMeta(); let s = a.chart.options.startAngle || 0; const l = a._starts = []; const u = a._angles = []; const d = o.data; for (a._updateRadius(), o.count = a.countVisibleElements(), e = 0, n = r.data.length; e < n; e++)l[e] = s, i = a._computeAngle(e), u[e] = i, s += i; for (e = 0, n = d.length; e < n; ++e)d[e]._options = a._resolveDataElementOptions(d[e], e), a.updateElement(d[e], e, t); },
    _updateRadius() { const t = this; const e = t.chart; const n = e.chartArea; const i = e.options; const a = Math.min(n.right - n.left, n.bottom - n.top); e.outerRadius = Math.max(a / 2, 0), e.innerRadius = Math.max(i.cutoutPercentage ? e.outerRadius / 100 * i.cutoutPercentage : 1, 0), e.radiusLength = (e.outerRadius - e.innerRadius) / e.getVisibleDatasetCount(), t.outerRadius = e.outerRadius - e.radiusLength * t.index, t.innerRadius = t.outerRadius - e.radiusLength; },
    updateElement(t, e, n) {
      const i = this; const a = i.chart; const r = i.getDataset(); const o = a.options; const s = o.animation; const l = a.scale; const u = a.data.labels; const d = l.xCenter; const h = l.yCenter; const c = o.startAngle; const f = t.hidden ? 0 : l.getDistanceFromCenterForValue(r.data[e]); const g = i._starts[e]; const p = g + (t.hidden ? 0 : i._angles[e]); const m = s.animateScale ? 0 : l.getDistanceFromCenterForValue(r.data[e]); const v = t._options || {}; H.extend(t, {
        _datasetIndex: i.index,
        _index: e,
        _scale: l,
        _model: {
          backgroundColor: v.backgroundColor, borderColor: v.borderColor, borderWidth: v.borderWidth, borderAlign: v.borderAlign, x: d, y: h, innerRadius: 0, outerRadius: n ? m : f, startAngle: n && s.animateRotate ? c : g, endAngle: n && s.animateRotate ? c : p, label: H.valueAtIndexOrDefault(u, e, u[e]),
        },
      }), t.pivot();
    },
    countVisibleElements() { const t = this.getDataset(); const e = this.getMeta(); let n = 0; return H.each(e.data, ((e, i) => { isNaN(t.data[i]) || e.hidden || n++; })), n; },
    setHoverStyle(t) { const e = t._model; const n = t._options; const i = H.getHoverColor; const a = H.valueOrDefault; t.$previousStyle = { backgroundColor: e.backgroundColor, borderColor: e.borderColor, borderWidth: e.borderWidth }, e.backgroundColor = a(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = a(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = a(n.hoverBorderWidth, n.borderWidth); },
    _computeAngle(t) {
      const e = this; const n = this.getMeta().count; const i = e.getDataset(); const a = e.getMeta(); if (isNaN(i.data[t]) || a.data[t].hidden) return 0; const r = {
        chart: e.chart, dataIndex: t, dataset: i, datasetIndex: e.index,
      }; return Gt([e.chart.options.elements.arc.angle, 2 * Math.PI / n], r, t);
    },
  }); N._set('pie', H.clone(N.doughnut)), N._set('pie', { cutoutPercentage: 0 }); const Kt = Bt; const Zt = H.valueOrDefault; N._set('radar', { spanGaps: !1, scale: { type: 'radialLinear' }, elements: { line: { fill: 'start', tension: 0 } } }); const $t = it.extend({
    datasetElementType: kt.Line,
    dataElementType: kt.Point,
    linkScales: H.noop,
    _datasetElementOptions: ['backgroundColor', 'borderWidth', 'borderColor', 'borderCapStyle', 'borderDash', 'borderDashOffset', 'borderJoinStyle', 'fill'],
    _dataElementOptions: {
      backgroundColor: 'pointBackgroundColor', borderColor: 'pointBorderColor', borderWidth: 'pointBorderWidth', hitRadius: 'pointHitRadius', hoverBackgroundColor: 'pointHoverBackgroundColor', hoverBorderColor: 'pointHoverBorderColor', hoverBorderWidth: 'pointHoverBorderWidth', hoverRadius: 'pointHoverRadius', pointStyle: 'pointStyle', radius: 'pointRadius', rotation: 'pointRotation',
    },
    _getIndexScaleId() { return this.chart.scale.id; },
    _getValueScaleId() { return this.chart.scale.id; },
    update(t) { let e; let n; const i = this; const a = i.getMeta(); const r = a.dataset; const o = a.data || []; const s = i.chart.scale; const l = i._config; for (void 0 !== l.tension && void 0 === l.lineTension && (l.lineTension = l.tension), r._scale = s, r._datasetIndex = i.index, r._children = o, r._loop = !0, r._model = i._resolveDatasetElementOptions(r), r.pivot(), e = 0, n = o.length; e < n; ++e)i.updateElement(o[e], e, t); for (i.updateBezierControlPoints(), e = 0, n = o.length; e < n; ++e)o[e].pivot(); },
    updateElement(t, e, n) {
      const i = this; const a = t.custom || {}; const r = i.getDataset(); const o = i.chart.scale; const s = o.getPointPositionForValue(e, r.data[e]); const l = i._resolveDataElementOptions(t, e); const u = i.getMeta().dataset._model; const d = n ? o.xCenter : s.x; const h = n ? o.yCenter : s.y; t._scale = o, t._options = l, t._datasetIndex = i.index, t._index = e, t._model = {
        x: d, y: h, skip: a.skip || isNaN(d) || isNaN(h), radius: l.radius, pointStyle: l.pointStyle, rotation: l.rotation, backgroundColor: l.backgroundColor, borderColor: l.borderColor, borderWidth: l.borderWidth, tension: Zt(a.tension, u ? u.tension : 0), hitRadius: l.hitRadius,
      };
    },
    _resolveDatasetElementOptions() { const t = this; const e = t._config; const n = t.chart.options; const i = it.prototype._resolveDatasetElementOptions.apply(t, arguments); return i.spanGaps = Zt(e.spanGaps, n.spanGaps), i.tension = Zt(e.lineTension, n.elements.line.tension), i; },
    updateBezierControlPoints() { let t; let e; let n; let i; const a = this.getMeta(); const r = this.chart.chartArea; let o = a.data || []; function s(t, e, n) { return Math.max(Math.min(t, n), e); } for (a.dataset._model.spanGaps && (o = o.filter(((t) => !t._model.skip))), t = 0, e = o.length; t < e; ++t)n = o[t]._model, i = H.splineCurve(H.previousItem(o, t, !0)._model, n, H.nextItem(o, t, !0)._model, n.tension), n.controlPointPreviousX = s(i.previous.x, r.left, r.right), n.controlPointPreviousY = s(i.previous.y, r.top, r.bottom), n.controlPointNextX = s(i.next.x, r.left, r.right), n.controlPointNextY = s(i.next.y, r.top, r.bottom); },
    setHoverStyle(t) {
      const e = t._model; const n = t._options; const i = H.getHoverColor; t.$previousStyle = {
        backgroundColor: e.backgroundColor, borderColor: e.borderColor, borderWidth: e.borderWidth, radius: e.radius,
      }, e.backgroundColor = Zt(n.hoverBackgroundColor, i(n.backgroundColor)), e.borderColor = Zt(n.hoverBorderColor, i(n.borderColor)), e.borderWidth = Zt(n.hoverBorderWidth, n.borderWidth), e.radius = Zt(n.hoverRadius, n.radius);
    },
  }); N._set('scatter', { hover: { mode: 'single' }, scales: { xAxes: [{ id: 'x-axis-1', type: 'linear', position: 'bottom' }], yAxes: [{ id: 'y-axis-1', type: 'linear', position: 'left' }] }, tooltips: { callbacks: { title() { return ''; }, label(t) { return `(${t.xLabel}, ${t.yLabel})`; } } } }), N._set('global', { datasets: { scatter: { showLine: !1 } } }); const Jt = {
    bar: Tt, bubble: Ot, doughnut: Bt, horizontalBar: Et, line: Yt, polarArea: Xt, pie: Kt, radar: $t, scatter: Yt,
  }; function Qt(t, e) { return t.native ? { x: t.x, y: t.y } : H.getRelativePosition(t, e); } function te(t, e) { let n; let i; let a; let r; let o; let s; const l = t._getSortedVisibleDatasetMetas(); for (i = 0, r = l.length; i < r; ++i) for (a = 0, o = (n = l[i].data).length; a < o; ++a)(s = n[a])._view.skip || e(s); } function ee(t, e) { const n = []; return te(t, ((t) => { t.inRange(e.x, e.y) && n.push(t); })), n; } function ne(t, e, n, i) { let a = Number.POSITIVE_INFINITY; let r = []; return te(t, ((t) => { if (!n || t.inRange(e.x, e.y)) { const o = t.getCenterPoint(); const s = i(e, o); s < a ? (r = [t], a = s) : s === a && r.push(t); } })), r; } function ie(t) { const e = t.indexOf('x') !== -1; const n = t.indexOf('y') !== -1; return function (t, i) { const a = e ? Math.abs(t.x - i.x) : 0; const r = n ? Math.abs(t.y - i.y) : 0; return Math.sqrt(Math.pow(a, 2) + Math.pow(r, 2)); }; } function ae(t, e, n) { const i = Qt(e, t); n.axis = n.axis || 'x'; const a = ie(n.axis); const r = n.intersect ? ee(t, i) : ne(t, i, !1, a); const o = []; return r.length ? (t._getSortedVisibleDatasetMetas().forEach(((t) => { const e = t.data[r[0]._index]; e && !e._view.skip && o.push(e); })), o) : []; } const re = {
    modes: {
      single(t, e) { const n = Qt(e, t); const i = []; return te(t, ((t) => { if (t.inRange(n.x, n.y)) return i.push(t), i; })), i.slice(0, 1); }, label: ae, index: ae, dataset(t, e, n) { const i = Qt(e, t); n.axis = n.axis || 'xy'; const a = ie(n.axis); let r = n.intersect ? ee(t, i) : ne(t, i, !1, a); return r.length > 0 && (r = t.getDatasetMeta(r[0]._datasetIndex).data), r; }, 'x-axis': function (t, e) { return ae(t, e, { intersect: !1 }); }, point(t, e) { return ee(t, Qt(e, t)); }, nearest(t, e, n) { const i = Qt(e, t); n.axis = n.axis || 'xy'; const a = ie(n.axis); return ne(t, i, n.intersect, a); }, x(t, e, n) { const i = Qt(e, t); let a = []; let r = !1; return te(t, ((t) => { t.inXRange(i.x) && a.push(t), t.inRange(i.x, i.y) && (r = !0); })), n.intersect && !r && (a = []), a; }, y(t, e, n) { const i = Qt(e, t); let a = []; let r = !1; return te(t, ((t) => { t.inYRange(i.y) && a.push(t), t.inRange(i.x, i.y) && (r = !0); })), n.intersect && !r && (a = []), a; },
    },
  }; const oe = H.extend; function se(t, e) { return H.where(t, ((t) => t.pos === e)); } function le(t, e) { return t.sort(((t, n) => { const i = e ? n : t; const a = e ? t : n; return i.weight === a.weight ? i.index - a.index : i.weight - a.weight; })); } function ue(t, e, n, i) { return Math.max(t[n], e[n]) + Math.max(t[i], e[i]); } function de(t, e, n) { let i; let a; const r = n.box; const o = t.maxPadding; if (n.size && (t[n.pos] -= n.size), n.size = n.horizontal ? r.height : r.width, t[n.pos] += n.size, r.getPadding) { const s = r.getPadding(); o.top = Math.max(o.top, s.top), o.left = Math.max(o.left, s.left), o.bottom = Math.max(o.bottom, s.bottom), o.right = Math.max(o.right, s.right); } if (i = e.outerWidth - ue(o, t, 'left', 'right'), a = e.outerHeight - ue(o, t, 'top', 'bottom'), i !== t.w || a !== t.h) { t.w = i, t.h = a; const l = n.horizontal ? [i, t.w] : [a, t.h]; return !(l[0] === l[1] || isNaN(l[0]) && isNaN(l[1])); } } function he(t, e) {
    const n = e.maxPadding; function i(t) {
      const i = {
        left: 0, top: 0, right: 0, bottom: 0,
      }; return t.forEach(((t) => { i[t] = Math.max(e[t], n[t]); })), i;
    } return i(t ? ['left', 'right'] : ['top', 'bottom']);
  } function ce(t, e, n) { let i; let a; let r; let o; let s; let l; const u = []; for (i = 0, a = t.length; i < a; ++i)(o = (r = t[i]).box).update(r.width || e.w, r.height || e.h, he(r.horizontal, e)), de(e, n, r) && (l = !0, u.length && (s = !0)), o.fullWidth || u.push(r); return s && ce(u, e, n) || l; } function fe(t, e, n) { let i; let a; let r; let o; const s = n.padding; let l = e.x; let u = e.y; for (i = 0, a = t.length; i < a; ++i)o = (r = t[i]).box, r.horizontal ? (o.left = o.fullWidth ? s.left : e.left, o.right = o.fullWidth ? n.outerWidth - s.right : e.left + e.w, o.top = u, o.bottom = u + o.height, o.width = o.right - o.left, u = o.bottom) : (o.left = l, o.right = l + o.width, o.top = e.top, o.bottom = e.top + e.h, o.height = o.bottom - o.top, l = o.right); e.x = l, e.y = u; }N._set('global', {
    layout: {
      padding: {
        top: 0, right: 0, bottom: 0, left: 0,
      },
    },
  }); let ge; const pe = {
    defaults: {},
    addBox(t, e) { t.boxes || (t.boxes = []), e.fullWidth = e.fullWidth || !1, e.position = e.position || 'top', e.weight = e.weight || 0, e._layers = e._layers || function () { return [{ z: 0, draw() { e.draw.apply(e, arguments); } }]; }, t.boxes.push(e); },
    removeBox(t, e) { const n = t.boxes ? t.boxes.indexOf(e) : -1; n !== -1 && t.boxes.splice(n, 1); },
    configure(t, e, n) { for (var i, a = ['fullWidth', 'position', 'weight'], r = a.length, o = 0; o < r; ++o)i = a[o], n.hasOwnProperty(i) && (e[i] = n[i]); },
    update(t, e, n) {
      if (t) {
        const i = t.options.layout || {}; const a = H.options.toPadding(i.padding); const r = e - a.width; const o = n - a.height; const s = (function (t) {
          const e = (function (t) {
 let e; let n; let i; const a = []; for (e = 0, n = (t || []).length; e < n; ++e){i = t[e], a.push({
 index: e, box: i, pos: i.position, horizontal: i.isHorizontal(), weight: i.weight 
});} return a; 
}(t)); const n = le(se(e, 'left'), !0); const i = le(se(e, 'right')); const a = le(se(e, 'top'), !0); const r = le(se(e, 'bottom')); return {
            leftAndTop: n.concat(a), rightAndBottom: i.concat(r), chartArea: se(e, 'chartArea'), vertical: n.concat(i), horizontal: a.concat(r),
          };
        }(t.boxes)); const l = s.vertical; const u = s.horizontal; const d = Object.freeze({
          outerWidth: e, outerHeight: n, padding: a, availableWidth: r, vBoxMaxWidth: r / 2 / l.length, hBoxMaxHeight: o / 2,
        }); const h = oe({
          maxPadding: oe({}, a), w: r, h: o, x: a.left, y: a.top,
        }, a); !(function (t, e) { let n; let i; let a; for (n = 0, i = t.length; n < i; ++n)(a = t[n]).width = a.horizontal ? a.box.fullWidth && e.availableWidth : e.vBoxMaxWidth, a.height = a.horizontal && e.hBoxMaxHeight; }(l.concat(u), d)), ce(l, h, d), ce(u, h, d) && ce(l, h, d), (function (t) { const e = t.maxPadding; function n(n) { const i = Math.max(e[n] - t[n], 0); return t[n] += i, i; }t.y += n('top'), t.x += n('left'), n('right'), n('bottom'); }(h)), fe(s.leftAndTop, h, d), h.x += h.w, h.y += h.h, fe(s.rightAndBottom, h, d), t.chartArea = {
          left: h.left, top: h.top, right: h.left + h.w, bottom: h.top + h.h,
        }, H.each(s.chartArea, ((e) => { const n = e.box; oe(n, t.chartArea), n.update(h.w, h.h); }));
      }
    },
  }; const me = (ge = Object.freeze({ __proto__: null, default: '@keyframes chartjs-render-animation{from{opacity:.99}to{opacity:1}}.chartjs-render-monitor{animation:chartjs-render-animation 1ms}.chartjs-size-monitor,.chartjs-size-monitor-expand,.chartjs-size-monitor-shrink{position:absolute;direction:ltr;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1}.chartjs-size-monitor-expand>div{position:absolute;width:1000000px;height:1000000px;left:0;top:0}.chartjs-size-monitor-shrink>div{position:absolute;width:200%;height:200%;left:0;top:0}' })) && ge.default || ge; const ve = '$chartjs'; const be = 'chartjs-size-monitor'; const xe = 'chartjs-render-monitor'; const ye = 'chartjs-render-animation'; const _e = ['animationstart', 'webkitAnimationStart']; const ke = {
    touchstart: 'mousedown', touchmove: 'mousemove', touchend: 'mouseup', pointerenter: 'mouseenter', pointerdown: 'mousedown', pointermove: 'mousemove', pointerup: 'mouseup', pointerleave: 'mouseout', pointerout: 'mouseout',
  }; function we(t, e) { const n = H.getStyle(t, e); const i = n && n.match(/^(\d+)(\.\d+)?px$/); return i ? Number(i[1]) : void 0; } const Me = !!(function () { let t = !1; try { const e = Object.defineProperty({}, 'passive', { get() { t = !0; } }); window.addEventListener('e', null, e); } catch (t) {} return t; }()) && { passive: !0 }; function Se(t, e, n) { t.addEventListener(e, n, Me); } function Ce(t, e, n) { t.removeEventListener(e, n, Me); } function Pe(t, e, n, i, a) {
    return {
      type: t, chart: e, native: a || null, x: void 0 !== n ? n : null, y: void 0 !== i ? i : null,
    };
  } function Ae(t) { const e = document.createElement('div'); return e.className = t || '', e; } function De(t, e, n) { let i; let a; let r; let o; const s = t[ve] || (t[ve] = {}); const l = s.resizer = (function (t) { const e = Ae(be); const n = Ae(`${be}-expand`); const i = Ae(`${be}-shrink`); n.appendChild(Ae()), i.appendChild(Ae()), e.appendChild(n), e.appendChild(i), e._reset = function () { n.scrollLeft = 1e6, n.scrollTop = 1e6, i.scrollLeft = 1e6, i.scrollTop = 1e6; }; const a = function () { e._reset(), t(); }; return Se(n, 'scroll', a.bind(n, 'expand')), Se(i, 'scroll', a.bind(i, 'shrink')), e; }((i = function () { if (s.resizer) { const i = n.options.maintainAspectRatio && t.parentNode; const a = i ? i.clientWidth : 0; e(Pe('resize', n)), i && i.clientWidth < a && n.canvas && e(Pe('resize', n)); } }, r = !1, o = [], function () { o = Array.prototype.slice.call(arguments), a = a || this, r || (r = !0, H.requestAnimFrame.call(window, (() => { r = !1, i.apply(a, o); }))); }))); !(function (t, e) { const n = t[ve] || (t[ve] = {}); const i = n.renderProxy = function (t) { t.animationName === ye && e(); }; H.each(_e, ((e) => { Se(t, e, i); })), n.reflow = !!t.offsetParent, t.classList.add(xe); }(t, (() => { if (s.resizer) { const e = t.parentNode; e && e !== l.parentNode && e.insertBefore(l, e.firstChild), l._reset(); } }))); } function Te(t) { const e = t[ve] || {}; const n = e.resizer; delete e.resizer, (function (t) { const e = t[ve] || {}; const n = e.renderProxy; n && (H.each(_e, ((e) => { Ce(t, e, n); })), delete e.renderProxy), t.classList.remove(xe); }(t)), n && n.parentNode && n.parentNode.removeChild(n); } const Ie = {
    disableCSSInjection: !1, _enabled: typeof window !== 'undefined' && typeof document !== 'undefined', _ensureLoaded(t) { if (!this.disableCSSInjection) { const e = t.getRootNode ? t.getRootNode() : document; !(function (t, e) { const n = t[ve] || (t[ve] = {}); if (!n.containsStyles) { n.containsStyles = !0, e = `/* Chart.js */\n${e}`; const i = document.createElement('style'); i.setAttribute('type', 'text/css'), i.appendChild(document.createTextNode(e)), t.appendChild(i); } }(e.host ? e : document.head, me)); } }, acquireContext(t, e) { typeof t === 'string' ? t = document.getElementById(t) : t.length && (t = t[0]), t && t.canvas && (t = t.canvas); const n = t && t.getContext && t.getContext('2d'); return n && n.canvas === t ? (this._ensureLoaded(t), (function (t, e) { const n = t.style; const i = t.getAttribute('height'); const a = t.getAttribute('width'); if (t[ve] = { initial: { height: i, width: a, style: { display: n.display, height: n.height, width: n.width } } }, n.display = n.display || 'block', a === null || a === '') { var r = we(t, 'width'); void 0 !== r && (t.width = r); } if (i === null || i === '') if (t.style.height === '')t.height = t.width / (e.options.aspectRatio || 2); else { const o = we(t, 'height'); void 0 !== r && (t.height = o); } }(t, e)), n) : null; }, releaseContext(t) { const e = t.canvas; if (e[ve]) { const n = e[ve].initial; ['height', 'width'].forEach(((t) => { const i = n[t]; H.isNullOrUndef(i) ? e.removeAttribute(t) : e.setAttribute(t, i); })), H.each(n.style || {}, ((t, n) => { e.style[n] = t; })), e.width = e.width, delete e[ve]; } }, addEventListener(t, e, n) { const i = t.canvas; if (e !== 'resize') { const a = n[ve] || (n[ve] = {}); Se(i, e, (a.proxies || (a.proxies = {}))[`${t.id}_${e}`] = function (e) { n(function (t, e) { const n = ke[t.type] || t.type; const i = H.getRelativePosition(t, e); return Pe(n, e, i.x, i.y, t); }(e, t)); }); } else De(i, n, t); }, removeEventListener(t, e, n) { const i = t.canvas; if (e !== 'resize') { const a = ((n[ve] || {}).proxies || {})[`${t.id}_${e}`]; a && Ce(i, e, a); } else Te(i); },
  }; H.addEvent = Se, H.removeEvent = Ce; const Fe = Ie._enabled ? Ie : { acquireContext(t) { return t && t.canvas && (t = t.canvas), t && t.getContext('2d') || null; } }; const Oe = H.extend({
    initialize() {}, acquireContext() {}, releaseContext() {}, addEventListener() {}, removeEventListener() {},
  }, Fe); N._set('global', { plugins: {} }); const Le = {
    _plugins: [], _cacheId: 0, register(t) { const e = this._plugins; [].concat(t).forEach(((t) => { e.indexOf(t) === -1 && e.push(t); })), this._cacheId++; }, unregister(t) { const e = this._plugins; [].concat(t).forEach(((t) => { const n = e.indexOf(t); n !== -1 && e.splice(n, 1); })), this._cacheId++; }, clear() { this._plugins = [], this._cacheId++; }, count() { return this._plugins.length; }, getAll() { return this._plugins; }, notify(t, e, n) { let i; let a; let r; let o; let s; const l = this.descriptors(t); const u = l.length; for (i = 0; i < u; ++i) if (typeof (s = (r = (a = l[i]).plugin)[e]) === 'function' && ((o = [t].concat(n || [])).push(a.options), !1 === s.apply(r, o))) return !1; return !0; }, descriptors(t) { const e = t.$plugins || (t.$plugins = {}); if (e.id === this._cacheId) return e.descriptors; const n = []; const i = []; const a = t && t.config || {}; const r = a.options && a.options.plugins || {}; return this._plugins.concat(a.plugins || []).forEach(((t) => { if (n.indexOf(t) === -1) { const e = t.id; let a = r[e]; !1 !== a && (!0 === a && (a = H.clone(N.global.plugins[e])), n.push(t), i.push({ plugin: t, options: a || {} })); } })), e.descriptors = i, e.id = this._cacheId, i; }, _invalidate(t) { delete t.$plugins; },
  }; const Re = {
    constructors: {}, defaults: {}, registerScaleType(t, e, n) { this.constructors[t] = e, this.defaults[t] = H.clone(n); }, getScaleConstructor(t) { return this.constructors.hasOwnProperty(t) ? this.constructors[t] : void 0; }, getScaleDefaults(t) { return this.defaults.hasOwnProperty(t) ? H.merge(Object.create(null), [N.scale, this.defaults[t]]) : {}; }, updateScaleDefaults(t, e) { this.defaults.hasOwnProperty(t) && (this.defaults[t] = H.extend(this.defaults[t], e)); }, addScalesToLayout(t) { H.each(t.scales, ((e) => { e.fullWidth = e.options.fullWidth, e.position = e.options.position, e.weight = e.options.weight, pe.addBox(t, e); })); },
  }; const ze = H.valueOrDefault; const Ne = H.rtl.getRtlAdapter; N._set('global', {
    tooltips: {
      enabled: !0,
      custom: null,
      mode: 'nearest',
      position: 'average',
      intersect: !0,
      backgroundColor: 'rgba(0,0,0,0.8)',
      titleFontStyle: 'bold',
      titleSpacing: 2,
      titleMarginBottom: 6,
      titleFontColor: '#fff',
      titleAlign: 'left',
      bodySpacing: 2,
      bodyFontColor: '#fff',
      bodyAlign: 'left',
      footerFontStyle: 'bold',
      footerSpacing: 2,
      footerMarginTop: 6,
      footerFontColor: '#fff',
      footerAlign: 'left',
      yPadding: 6,
      xPadding: 6,
      caretPadding: 2,
      caretSize: 5,
      cornerRadius: 6,
      multiKeyBackground: '#fff',
      displayColors: !0,
      borderColor: 'rgba(0,0,0,0)',
      borderWidth: 0,
      callbacks: {
        beforeTitle: H.noop, title(t, e) { let n = ''; const i = e.labels; const a = i ? i.length : 0; if (t.length > 0) { const r = t[0]; r.label ? n = r.label : r.xLabel ? n = r.xLabel : a > 0 && r.index < a && (n = i[r.index]); } return n; }, afterTitle: H.noop, beforeBody: H.noop, beforeLabel: H.noop, label(t, e) { let n = e.datasets[t.datasetIndex].label || ''; return n && (n += ': '), H.isNullOrUndef(t.value) ? n += t.yLabel : n += t.value, n; }, labelColor(t, e) { const n = e.getDatasetMeta(t.datasetIndex).data[t.index]._view; return { borderColor: n.borderColor, backgroundColor: n.backgroundColor }; }, labelTextColor() { return this._options.bodyFontColor; }, afterLabel: H.noop, afterBody: H.noop, beforeFooter: H.noop, footer: H.noop, afterFooter: H.noop,
      },
    },
  }); const Be = { average(t) { if (!t.length) return !1; let e; let n; let i = 0; let a = 0; let r = 0; for (e = 0, n = t.length; e < n; ++e) { const o = t[e]; if (o && o.hasValue()) { const s = o.tooltipPosition(); i += s.x, a += s.y, ++r; } } return { x: i / r, y: a / r }; }, nearest(t, e) { let n; let i; let a; let r = e.x; let o = e.y; let s = Number.POSITIVE_INFINITY; for (n = 0, i = t.length; n < i; ++n) { const l = t[n]; if (l && l.hasValue()) { const u = l.getCenterPoint(); const d = H.distanceBetweenPoints(e, u); d < s && (s = d, a = l); } } if (a) { const h = a.tooltipPosition(); r = h.x, o = h.y; } return { x: r, y: o }; } }; function Ee(t, e) { return e && (H.isArray(e) ? Array.prototype.push.apply(t, e) : t.push(e)), t; } function We(t) { return (typeof t === 'string' || t instanceof String) && t.indexOf('\n') > -1 ? t.split('\n') : t; } function Ve(t) {
    const e = N.global; return {
      xPadding: t.xPadding, yPadding: t.yPadding, xAlign: t.xAlign, yAlign: t.yAlign, rtl: t.rtl, textDirection: t.textDirection, bodyFontColor: t.bodyFontColor, _bodyFontFamily: ze(t.bodyFontFamily, e.defaultFontFamily), _bodyFontStyle: ze(t.bodyFontStyle, e.defaultFontStyle), _bodyAlign: t.bodyAlign, bodyFontSize: ze(t.bodyFontSize, e.defaultFontSize), bodySpacing: t.bodySpacing, titleFontColor: t.titleFontColor, _titleFontFamily: ze(t.titleFontFamily, e.defaultFontFamily), _titleFontStyle: ze(t.titleFontStyle, e.defaultFontStyle), titleFontSize: ze(t.titleFontSize, e.defaultFontSize), _titleAlign: t.titleAlign, titleSpacing: t.titleSpacing, titleMarginBottom: t.titleMarginBottom, footerFontColor: t.footerFontColor, _footerFontFamily: ze(t.footerFontFamily, e.defaultFontFamily), _footerFontStyle: ze(t.footerFontStyle, e.defaultFontStyle), footerFontSize: ze(t.footerFontSize, e.defaultFontSize), _footerAlign: t.footerAlign, footerSpacing: t.footerSpacing, footerMarginTop: t.footerMarginTop, caretSize: t.caretSize, cornerRadius: t.cornerRadius, backgroundColor: t.backgroundColor, opacity: 0, legendColorBackground: t.multiKeyBackground, displayColors: t.displayColors, borderColor: t.borderColor, borderWidth: t.borderWidth,
    };
  } function He(t, e) { return e === 'center' ? t.x + t.width / 2 : e === 'right' ? t.x + t.width - t.xPadding : t.x + t.xPadding; } function je(t) { return Ee([], We(t)); } const qe = K.extend({
    initialize() { this._model = Ve(this._options), this._lastActive = []; },
    getTitle() { const t = this; const e = t._options; const n = e.callbacks; const i = n.beforeTitle.apply(t, arguments); const a = n.title.apply(t, arguments); const r = n.afterTitle.apply(t, arguments); let o = []; return o = Ee(o, We(i)), o = Ee(o, We(a)), o = Ee(o, We(r)); },
    getBeforeBody() { return je(this._options.callbacks.beforeBody.apply(this, arguments)); },
    getBody(t, e) { const n = this; const i = n._options.callbacks; const a = []; return H.each(t, ((t) => { const r = { before: [], lines: [], after: [] }; Ee(r.before, We(i.beforeLabel.call(n, t, e))), Ee(r.lines, i.label.call(n, t, e)), Ee(r.after, We(i.afterLabel.call(n, t, e))), a.push(r); })), a; },
    getAfterBody() { return je(this._options.callbacks.afterBody.apply(this, arguments)); },
    getFooter() { const t = this; const e = t._options.callbacks; const n = e.beforeFooter.apply(t, arguments); const i = e.footer.apply(t, arguments); const a = e.afterFooter.apply(t, arguments); let r = []; return r = Ee(r, We(n)), r = Ee(r, We(i)), r = Ee(r, We(a)); },
    update(t) {
      let e; let n; let i; let a; let r; let o; let s; let l; let u; let d; const h = this; const c = h._options; const f = h._model; const g = h._model = Ve(c); const p = h._active; const m = h._data; let v = { xAlign: f.xAlign, yAlign: f.yAlign }; let b = { x: f.x, y: f.y }; let x = { width: f.width, height: f.height }; let y = { x: f.caretX, y: f.caretY }; if (p.length) {
        g.opacity = 1; const _ = []; const k = []; y = Be[c.position].call(h, p, h._eventPosition); let w = []; for (e = 0, n = p.length; e < n; ++e) {
          w.push((i = p[e], a = void 0, r = void 0, o = void 0, s = void 0, l = void 0, u = void 0, d = void 0, a = i._xScale, r = i._yScale || i._scale, o = i._index, s = i._datasetIndex, l = i._chart.getDatasetMeta(s).controller, u = l._getIndexScale(), d = l._getValueScale(), {
            xLabel: a ? a.getLabelForIndex(o, s) : '', yLabel: r ? r.getLabelForIndex(o, s) : '', label: u ? `${u.getLabelForIndex(o, s)}` : '', value: d ? `${d.getLabelForIndex(o, s)}` : '', index: o, datasetIndex: s, x: i._model.x, y: i._model.y,
          }));
        } c.filter && (w = w.filter(((t) => c.filter(t, m)))), c.itemSort && (w = w.sort(((t, e) => c.itemSort(t, e, m)))), H.each(w, ((t) => { _.push(c.callbacks.labelColor.call(h, t, h._chart)), k.push(c.callbacks.labelTextColor.call(h, t, h._chart)); })), g.title = h.getTitle(w, m), g.beforeBody = h.getBeforeBody(w, m), g.body = h.getBody(w, m), g.afterBody = h.getAfterBody(w, m), g.footer = h.getFooter(w, m), g.x = y.x, g.y = y.y, g.caretPadding = c.caretPadding, g.labelColors = _, g.labelTextColors = k, g.dataPoints = w, x = (function (t, e) { const n = t._chart.ctx; let i = 2 * e.yPadding; let a = 0; const r = e.body; let o = r.reduce(((t, e) => t + e.before.length + e.lines.length + e.after.length), 0); o += e.beforeBody.length + e.afterBody.length; const s = e.title.length; const l = e.footer.length; const u = e.titleFontSize; const d = e.bodyFontSize; const h = e.footerFontSize; i += s * u, i += s ? (s - 1) * e.titleSpacing : 0, i += s ? e.titleMarginBottom : 0, i += o * d, i += o ? (o - 1) * e.bodySpacing : 0, i += l ? e.footerMarginTop : 0, i += l * h, i += l ? (l - 1) * e.footerSpacing : 0; let c = 0; const f = function (t) { a = Math.max(a, n.measureText(t).width + c); }; return n.font = H.fontString(u, e._titleFontStyle, e._titleFontFamily), H.each(e.title, f), n.font = H.fontString(d, e._bodyFontStyle, e._bodyFontFamily), H.each(e.beforeBody.concat(e.afterBody), f), c = e.displayColors ? d + 2 : 0, H.each(r, ((t) => { H.each(t.before, f), H.each(t.lines, f), H.each(t.after, f); })), c = 0, n.font = H.fontString(h, e._footerFontStyle, e._footerFontFamily), H.each(e.footer, f), { width: a += 2 * e.xPadding, height: i }; }(this, g)), b = (function (t, e, n, i) { let a = t.x; let r = t.y; const o = t.caretSize; const s = t.caretPadding; const l = t.cornerRadius; const u = n.xAlign; const d = n.yAlign; const h = o + s; const c = l + s; return u === 'right' ? a -= e.width : u === 'center' && ((a -= e.width / 2) + e.width > i.width && (a = i.width - e.width), a < 0 && (a = 0)), d === 'top' ? r += h : r -= d === 'bottom' ? e.height + h : e.height / 2, d === 'center' ? u === 'left' ? a += h : u === 'right' && (a -= h) : u === 'left' ? a -= c : u === 'right' && (a += c), { x: a, y: r }; }(g, x, v = (function (t, e) { let n; let i; let a; let r; let o; const s = t._model; const l = t._chart; const u = t._chart.chartArea; let d = 'center'; let h = 'center'; s.y < e.height ? h = 'top' : s.y > l.height - e.height && (h = 'bottom'); const c = (u.left + u.right) / 2; const f = (u.top + u.bottom) / 2; h === 'center' ? (n = function (t) { return t <= c; }, i = function (t) { return t > c; }) : (n = function (t) { return t <= e.width / 2; }, i = function (t) { return t >= l.width - e.width / 2; }), a = function (t) { return t + e.width + s.caretSize + s.caretPadding > l.width; }, r = function (t) { return t - e.width - s.caretSize - s.caretPadding < 0; }, o = function (t) { return t <= f ? 'top' : 'bottom'; }, n(s.x) ? (d = 'left', a(s.x) && (d = 'center', h = o(s.y))) : i(s.x) && (d = 'right', r(s.x) && (d = 'center', h = o(s.y))); const g = t._options; return { xAlign: g.xAlign ? g.xAlign : d, yAlign: g.yAlign ? g.yAlign : h }; }(this, x)), h._chart));
      } else g.opacity = 0; return g.xAlign = v.xAlign, g.yAlign = v.yAlign, g.x = b.x, g.y = b.y, g.width = x.width, g.height = x.height, g.caretX = y.x, g.caretY = y.y, h._model = g, t && c.custom && c.custom.call(h, g), h;
    },
    drawCaret(t, e) { const n = this._chart.ctx; const i = this._view; const a = this.getCaretPosition(t, e, i); n.lineTo(a.x1, a.y1), n.lineTo(a.x2, a.y2), n.lineTo(a.x3, a.y3); },
    getCaretPosition(t, e, n) {
      let i; let a; let r; let o; let s; let l; const u = n.caretSize; const d = n.cornerRadius; const h = n.xAlign; const c = n.yAlign; const f = t.x; const g = t.y; const p = e.width; const m = e.height; if (c === 'center')s = g + m / 2, h === 'left' ? (a = (i = f) - u, r = i, o = s + u, l = s - u) : (a = (i = f + p) + u, r = i, o = s - u, l = s + u); else if (h === 'left' ? (i = (a = f + d + u) - u, r = a + u) : h === 'right' ? (i = (a = f + p - d - u) - u, r = a + u) : (i = (a = n.caretX) - u, r = a + u), c === 'top')s = (o = g) - u, l = o; else { s = (o = g + m) + u, l = o; const v = r; r = i, i = v; } return {
        x1: i, x2: a, x3: r, y1: o, y2: s, y3: l,
      };
    },
    drawTitle(t, e, n) { let i; let a; let r; const o = e.title; const s = o.length; if (s) { const l = Ne(e.rtl, e.x, e.width); for (t.x = He(e, e._titleAlign), n.textAlign = l.textAlign(e._titleAlign), n.textBaseline = 'middle', i = e.titleFontSize, a = e.titleSpacing, n.fillStyle = e.titleFontColor, n.font = H.fontString(i, e._titleFontStyle, e._titleFontFamily), r = 0; r < s; ++r)n.fillText(o[r], l.x(t.x), t.y + i / 2), t.y += i + a, r + 1 === s && (t.y += e.titleMarginBottom - a); } },
    drawBody(t, e, n) { let i; let a; let r; let o; let s; let l; let u; let d; const h = e.bodyFontSize; const c = e.bodySpacing; const f = e._bodyAlign; const g = e.body; const p = e.displayColors; let m = 0; const v = p ? He(e, 'left') : 0; const b = Ne(e.rtl, e.x, e.width); const x = function (e) { n.fillText(e, b.x(t.x + m), t.y + h / 2), t.y += h + c; }; const y = b.textAlign(f); for (n.textAlign = f, n.textBaseline = 'middle', n.font = H.fontString(h, e._bodyFontStyle, e._bodyFontFamily), t.x = He(e, y), n.fillStyle = e.bodyFontColor, H.each(e.beforeBody, x), m = p && y !== 'right' ? f === 'center' ? h / 2 + 1 : h + 2 : 0, s = 0, u = g.length; s < u; ++s) { for (i = g[s], a = e.labelTextColors[s], r = e.labelColors[s], n.fillStyle = a, H.each(i.before, x), l = 0, d = (o = i.lines).length; l < d; ++l) { if (p) { const _ = b.x(v); n.fillStyle = e.legendColorBackground, n.fillRect(b.leftForLtr(_, h), t.y, h, h), n.lineWidth = 1, n.strokeStyle = r.borderColor, n.strokeRect(b.leftForLtr(_, h), t.y, h, h), n.fillStyle = r.backgroundColor, n.fillRect(b.leftForLtr(b.xPlus(_, 1), h - 2), t.y + 1, h - 2, h - 2), n.fillStyle = a; }x(o[l]); }H.each(i.after, x); }m = 0, H.each(e.afterBody, x), t.y -= c; },
    drawFooter(t, e, n) { let i; let a; const r = e.footer; const o = r.length; if (o) { const s = Ne(e.rtl, e.x, e.width); for (t.x = He(e, e._footerAlign), t.y += e.footerMarginTop, n.textAlign = s.textAlign(e._footerAlign), n.textBaseline = 'middle', i = e.footerFontSize, n.fillStyle = e.footerFontColor, n.font = H.fontString(i, e._footerFontStyle, e._footerFontFamily), a = 0; a < o; ++a)n.fillText(r[a], s.x(t.x), t.y + i / 2), t.y += i + e.footerSpacing; } },
    drawBackground(t, e, n, i) { n.fillStyle = e.backgroundColor, n.strokeStyle = e.borderColor, n.lineWidth = e.borderWidth; const a = e.xAlign; const r = e.yAlign; const o = t.x; const s = t.y; const l = i.width; const u = i.height; const d = e.cornerRadius; n.beginPath(), n.moveTo(o + d, s), r === 'top' && this.drawCaret(t, i), n.lineTo(o + l - d, s), n.quadraticCurveTo(o + l, s, o + l, s + d), r === 'center' && a === 'right' && this.drawCaret(t, i), n.lineTo(o + l, s + u - d), n.quadraticCurveTo(o + l, s + u, o + l - d, s + u), r === 'bottom' && this.drawCaret(t, i), n.lineTo(o + d, s + u), n.quadraticCurveTo(o, s + u, o, s + u - d), r === 'center' && a === 'left' && this.drawCaret(t, i), n.lineTo(o, s + d), n.quadraticCurveTo(o, s, o + d, s), n.closePath(), n.fill(), e.borderWidth > 0 && n.stroke(); },
    draw() { const t = this._chart.ctx; const e = this._view; if (e.opacity !== 0) { const n = { width: e.width, height: e.height }; const i = { x: e.x, y: e.y }; const a = Math.abs(e.opacity < 0.001) ? 0 : e.opacity; const r = e.title.length || e.beforeBody.length || e.body.length || e.afterBody.length || e.footer.length; this._options.enabled && r && (t.save(), t.globalAlpha = a, this.drawBackground(i, e, t, n), i.y += e.yPadding, H.rtl.overrideTextDirection(t, e.textDirection), this.drawTitle(i, e, t), this.drawBody(i, e, t), this.drawFooter(i, e, t), H.rtl.restoreTextDirection(t, e.textDirection), t.restore()); } },
    handleEvent(t) { let e; const n = this; const i = n._options; return n._lastActive = n._lastActive || [], t.type === 'mouseout' ? n._active = [] : (n._active = n._chart.getElementsAtEventForMode(t, i.mode, i), i.reverse && n._active.reverse()), (e = !H.arrayEquals(n._active, n._lastActive)) && (n._lastActive = n._active, (i.enabled || i.custom) && (n._eventPosition = { x: t.x, y: t.y }, n.update(!0), n.pivot())), e; },
  }); const Ue = Be; const Ye = qe; Ye.positioners = Ue; const Ge = H.valueOrDefault; function Xe() { return H.merge(Object.create(null), [].slice.call(arguments), { merger(t, e, n, i) { if (t === 'xAxes' || t === 'yAxes') { let a; let r; let o; const s = n[t].length; for (e[t] || (e[t] = []), a = 0; a < s; ++a)o = n[t][a], r = Ge(o.type, t === 'xAxes' ? 'category' : 'linear'), a >= e[t].length && e[t].push({}), !e[t][a].type || o.type && o.type !== e[t][a].type ? H.merge(e[t][a], [Re.getScaleDefaults(r), o]) : H.merge(e[t][a], o); } else H._merger(t, e, n, i); } }); } function Ke() { return H.merge(Object.create(null), [].slice.call(arguments), { merger(t, e, n, i) { const a = e[t] || Object.create(null); const r = n[t]; t === 'scales' ? e[t] = Xe(a, r) : t === 'scale' ? e[t] = H.merge(a, [Re.getScaleDefaults(r.type), r]) : H._merger(t, e, n, i); } }); } function Ze(t) { let e = t.options; H.each(t.scales, ((e) => { pe.removeBox(t, e); })), e = Ke(N.global, N[t.config.type], e), t.options = t.config.options = e, t.ensureScalesHaveIDs(), t.buildOrUpdateScales(), t.tooltip._options = e.tooltips, t.tooltip.initialize(); } function $e(t, e, n) { let i; const a = function (t) { return t.id === i; }; do { i = e + n++; } while (H.findIndex(t, a) >= 0);return i; } function Je(t) { return t === 'top' || t === 'bottom'; } function Qe(t, e) { return function (n, i) { return n[t] === i[t] ? n[e] - i[e] : n[t] - i[t]; }; }N._set('global', {
    elements: {},
    events: ['mousemove', 'mouseout', 'click', 'touchstart', 'touchmove'],
    hover: {
      onHover: null, mode: 'nearest', intersect: !0, animationDuration: 400,
    },
    onClick: null,
    maintainAspectRatio: !0,
    responsive: !0,
    responsiveAnimationDuration: 0,
  }); const tn = function (t, e) { return this.construct(t, e), this; }; H.extend(tn.prototype, {
    construct(t, e) { const n = this; e = (function (t) { const e = (t = t || Object.create(null)).data = t.data || {}; return e.datasets = e.datasets || [], e.labels = e.labels || [], t.options = Ke(N.global, N[t.type], t.options || {}), t; }(e)); const i = Oe.acquireContext(t, e); const a = i && i.canvas; const r = a && a.height; const o = a && a.width; n.id = H.uid(), n.ctx = i, n.canvas = a, n.config = e, n.width = o, n.height = r, n.aspectRatio = r ? o / r : null, n.options = e.options, n._bufferedRender = !1, n._layers = [], n.chart = n, n.controller = n, tn.instances[n.id] = n, Object.defineProperty(n, 'data', { get() { return n.config.data; }, set(t) { n.config.data = t; } }), i && a ? (n.initialize(), n.update()) : console.error("Failed to create chart: can't acquire context from the given item"); },
    initialize() { const t = this; return Le.notify(t, 'beforeInit'), H.retinaScale(t, t.options.devicePixelRatio), t.bindEvents(), t.options.responsive && t.resize(!0), t.initToolTip(), Le.notify(t, 'afterInit'), t; },
    clear() { return H.canvas.clear(this), this; },
    stop() { return J.cancelAnimation(this), this; },
    resize(t) { const e = this; const n = e.options; const i = e.canvas; const a = n.maintainAspectRatio && e.aspectRatio || null; const r = Math.max(0, Math.floor(H.getMaximumWidth(i))); const o = Math.max(0, Math.floor(a ? r / a : H.getMaximumHeight(i))); if ((e.width !== r || e.height !== o) && (i.width = e.width = r, i.height = e.height = o, i.style.width = `${r}px`, i.style.height = `${o}px`, H.retinaScale(e, n.devicePixelRatio), !t)) { const s = { width: r, height: o }; Le.notify(e, 'resize', [s]), n.onResize && n.onResize(e, s), e.stop(), e.update({ duration: n.responsiveAnimationDuration }); } },
    ensureScalesHaveIDs() { const t = this.options; const e = t.scales || {}; const n = t.scale; H.each(e.xAxes, ((t, n) => { t.id || (t.id = $e(e.xAxes, 'x-axis-', n)); })), H.each(e.yAxes, ((t, n) => { t.id || (t.id = $e(e.yAxes, 'y-axis-', n)); })), n && (n.id = n.id || 'scale'); },
    buildOrUpdateScales() {
      const t = this; const e = t.options; const n = t.scales || {}; let i = []; const a = Object.keys(n).reduce(((t, e) => (t[e] = !1, t)), {}); e.scales && (i = i.concat((e.scales.xAxes || []).map(((t) => ({ options: t, dtype: 'category', dposition: 'bottom' }))), (e.scales.yAxes || []).map(((t) => ({ options: t, dtype: 'linear', dposition: 'left' }))))), e.scale && i.push({
        options: e.scale, dtype: 'radialLinear', isDefault: !0, dposition: 'chartArea',
      }), H.each(i, ((e) => {
        const i = e.options; const r = i.id; const o = Ge(i.type, e.dtype); Je(i.position) !== Je(e.dposition) && (i.position = e.dposition), a[r] = !0; let s = null; if (r in n && n[r].type === o)(s = n[r]).options = i, s.ctx = t.ctx, s.chart = t; else {
          const l = Re.getScaleConstructor(o); if (!l) return; s = new l({
            id: r, type: o, options: i, ctx: t.ctx, chart: t,
          }), n[s.id] = s;
        }s.mergeTicksOptions(), e.isDefault && (t.scale = s);
      })), H.each(a, ((t, e) => { t || delete n[e]; })), t.scales = n, Re.addScalesToLayout(this);
    },
    buildOrUpdateControllers() { let t; let e; const n = this; const i = []; const a = n.data.datasets; for (t = 0, e = a.length; t < e; t++) { const r = a[t]; let o = n.getDatasetMeta(t); const s = r.type || n.config.type; if (o.type && o.type !== s && (n.destroyDatasetMeta(t), o = n.getDatasetMeta(t)), o.type = s, o.order = r.order || 0, o.index = t, o.controller)o.controller.updateIndex(t), o.controller.linkScales(); else { const l = Jt[o.type]; if (void 0 === l) throw new Error(`"${o.type}" is not a chart type.`); o.controller = new l(n, t), i.push(o.controller); } } return i; },
    resetElements() { const t = this; H.each(t.data.datasets, ((e, n) => { t.getDatasetMeta(n).controller.reset(); }), t); },
    reset() { this.resetElements(), this.tooltip.initialize(); },
    update(t) { let e; let n; const i = this; if (t && typeof t === 'object' || (t = { duration: t, lazy: arguments[1] }), Ze(i), Le._invalidate(i), !1 !== Le.notify(i, 'beforeUpdate')) { i.tooltip._data = i.data; const a = i.buildOrUpdateControllers(); for (e = 0, n = i.data.datasets.length; e < n; e++)i.getDatasetMeta(e).controller.buildOrUpdateElements(); i.updateLayout(), i.options.animation && i.options.animation.duration && H.each(a, ((t) => { t.reset(); })), i.updateDatasets(), i.tooltip.initialize(), i.lastActive = [], Le.notify(i, 'afterUpdate'), i._layers.sort(Qe('z', '_idx')), i._bufferedRender ? i._bufferedRequest = { duration: t.duration, easing: t.easing, lazy: t.lazy } : i.render(t); } },
    updateLayout() { const t = this; !1 !== Le.notify(t, 'beforeLayout') && (pe.update(this, this.width, this.height), t._layers = [], H.each(t.boxes, ((e) => { e._configure && e._configure(), t._layers.push.apply(t._layers, e._layers()); }), t), t._layers.forEach(((t, e) => { t._idx = e; })), Le.notify(t, 'afterScaleUpdate'), Le.notify(t, 'afterLayout')); },
    updateDatasets() { if (!1 !== Le.notify(this, 'beforeDatasetsUpdate')) { for (let t = 0, e = this.data.datasets.length; t < e; ++t) this.updateDataset(t); Le.notify(this, 'afterDatasetsUpdate'); } },
    updateDataset(t) { const e = this.getDatasetMeta(t); const n = { meta: e, index: t }; !1 !== Le.notify(this, 'beforeDatasetUpdate', [n]) && (e.controller._update(), Le.notify(this, 'afterDatasetUpdate', [n])); },
    render(t) {
      const e = this; t && typeof t === 'object' || (t = { duration: t, lazy: arguments[1] }); const n = e.options.animation; const i = Ge(t.duration, n && n.duration); const a = t.lazy; if (!1 !== Le.notify(e, 'beforeRender')) {
        const r = function (t) { Le.notify(e, 'afterRender'), H.callback(n && n.onComplete, [t], e); }; if (n && i) {
          const o = new $({
            numSteps: i / 16.66, easing: t.easing || n.easing, render(t, e) { const n = H.easing.effects[e.easing]; const i = e.currentStep; const a = i / e.numSteps; t.draw(n(a), a, i); }, onAnimationProgress: n.onProgress, onAnimationComplete: r,
          }); J.addAnimation(e, o, i, a);
        } else e.draw(), r(new $({ numSteps: 0, chart: e })); return e;
      }
    },
    draw(t) { let e; let n; const i = this; if (i.clear(), H.isNullOrUndef(t) && (t = 1), i.transition(t), !(i.width <= 0 || i.height <= 0) && !1 !== Le.notify(i, 'beforeDraw', [t])) { for (n = i._layers, e = 0; e < n.length && n[e].z <= 0; ++e)n[e].draw(i.chartArea); for (i.drawDatasets(t); e < n.length; ++e)n[e].draw(i.chartArea); i._drawTooltip(t), Le.notify(i, 'afterDraw', [t]); } },
    transition(t) { for (let e = 0, n = (this.data.datasets || []).length; e < n; ++e) this.isDatasetVisible(e) && this.getDatasetMeta(e).controller.transition(t); this.tooltip.transition(t); },
    _getSortedDatasetMetas(t) { let e; let n; const i = []; for (e = 0, n = (this.data.datasets || []).length; e < n; ++e)t && !this.isDatasetVisible(e) || i.push(this.getDatasetMeta(e)); return i.sort(Qe('order', 'index')), i; },
    _getSortedVisibleDatasetMetas() { return this._getSortedDatasetMetas(!0); },
    drawDatasets(t) { let e; let n; if (!1 !== Le.notify(this, 'beforeDatasetsDraw', [t])) { for (n = (e = this._getSortedVisibleDatasetMetas()).length - 1; n >= 0; --n) this.drawDataset(e[n], t); Le.notify(this, 'afterDatasetsDraw', [t]); } },
    drawDataset(t, e) { const n = { meta: t, index: t.index, easingValue: e }; !1 !== Le.notify(this, 'beforeDatasetDraw', [n]) && (t.controller.draw(e), Le.notify(this, 'afterDatasetDraw', [n])); },
    _drawTooltip(t) { const e = this.tooltip; const n = { tooltip: e, easingValue: t }; !1 !== Le.notify(this, 'beforeTooltipDraw', [n]) && (e.draw(), Le.notify(this, 'afterTooltipDraw', [n])); },
    getElementAtEvent(t) { return re.modes.single(this, t); },
    getElementsAtEvent(t) { return re.modes.label(this, t, { intersect: !0 }); },
    getElementsAtXAxis(t) { return re.modes['x-axis'](this, t, { intersect: !0 }); },
    getElementsAtEventForMode(t, e, n) { const i = re.modes[e]; return typeof i === 'function' ? i(this, t, n) : []; },
    getDatasetAtEvent(t) { return re.modes.dataset(this, t, { intersect: !0 }); },
    getDatasetMeta(t) {
      const e = this.data.datasets[t]; e._meta || (e._meta = {}); let n = e._meta[this.id]; return n || (n = e._meta[this.id] = {
        type: null, data: [], dataset: null, controller: null, hidden: null, xAxisID: null, yAxisID: null, order: e.order || 0, index: t,
      }), n;
    },
    getVisibleDatasetCount() { for (var t = 0, e = 0, n = this.data.datasets.length; e < n; ++e) this.isDatasetVisible(e) && t++; return t; },
    isDatasetVisible(t) { const e = this.getDatasetMeta(t); return typeof e.hidden === 'boolean' ? !e.hidden : !this.data.datasets[t].hidden; },
    generateLegend() { return this.options.legendCallback(this); },
    destroyDatasetMeta(t) { const e = this.id; const n = this.data.datasets[t]; const i = n._meta && n._meta[e]; i && (i.controller.destroy(), delete n._meta[e]); },
    destroy() { let t; let e; const n = this; const i = n.canvas; for (n.stop(), t = 0, e = n.data.datasets.length; t < e; ++t)n.destroyDatasetMeta(t); i && (n.unbindEvents(), H.canvas.clear(n), Oe.releaseContext(n.ctx), n.canvas = null, n.ctx = null), Le.notify(n, 'destroy'), delete tn.instances[n.id]; },
    toBase64Image() { return this.canvas.toDataURL.apply(this.canvas, arguments); },
    initToolTip() {
      const t = this; t.tooltip = new Ye({
        _chart: t, _chartInstance: t, _data: t.data, _options: t.options.tooltips,
      }, t);
    },
    bindEvents() { const t = this; const e = t._listeners = {}; let n = function () { t.eventHandler.apply(t, arguments); }; H.each(t.options.events, ((i) => { Oe.addEventListener(t, i, n), e[i] = n; })), t.options.responsive && (n = function () { t.resize(); }, Oe.addEventListener(t, 'resize', n), e.resize = n); },
    unbindEvents() { const t = this; const e = t._listeners; e && (delete t._listeners, H.each(e, ((e, n) => { Oe.removeEventListener(t, n, e); }))); },
    updateHoverStyle(t, e, n) { let i; let a; let r; const o = n ? 'set' : 'remove'; for (a = 0, r = t.length; a < r; ++a)(i = t[a]) && this.getDatasetMeta(i._datasetIndex).controller[`${o}HoverStyle`](i); e === 'dataset' && this.getDatasetMeta(t[0]._datasetIndex).controller[`_${o}DatasetHoverStyle`](); },
    eventHandler(t) { const e = this; const n = e.tooltip; if (!1 !== Le.notify(e, 'beforeEvent', [t])) { e._bufferedRender = !0, e._bufferedRequest = null; let i = e.handleEvent(t); n && (i = n._start ? n.handleEvent(t) : i | n.handleEvent(t)), Le.notify(e, 'afterEvent', [t]); const a = e._bufferedRequest; return a ? e.render(a) : i && !e.animating && (e.stop(), e.render({ duration: e.options.hover.animationDuration, lazy: !0 })), e._bufferedRender = !1, e._bufferedRequest = null, e; } },
    handleEvent(t) { let e; const n = this; const i = n.options || {}; const a = i.hover; return n.lastActive = n.lastActive || [], t.type === 'mouseout' ? n.active = [] : n.active = n.getElementsAtEventForMode(t, a.mode, a), H.callback(i.onHover || i.hover.onHover, [t.native, n.active], n), t.type !== 'mouseup' && t.type !== 'click' || i.onClick && i.onClick.call(n, t.native, n.active), n.lastActive.length && n.updateHoverStyle(n.lastActive, a.mode, !1), n.active.length && a.mode && n.updateHoverStyle(n.active, a.mode, !0), e = !H.arrayEquals(n.active, n.lastActive), n.lastActive = n.active, e; },
  }), tn.instances = {}; const en = tn; tn.Controller = tn, tn.types = {}, H.configMerge = Ke, H.scaleMerge = Xe; function nn() { throw new Error('This method is not implemented: either no adapter can be found or an incomplete integration was provided.'); } function an(t) { this.options = t || {}; }H.extend(an.prototype, {
    formats: nn, parse: nn, format: nn, add: nn, diff: nn, startOf: nn, endOf: nn, _create(t) { return t; },
  }), an.override = function (t) { H.extend(an.prototype, t); }; const rn = { _date: an }; const on = { formatters: { values(t) { return H.isArray(t) ? t : `${t}`; }, linear(t, e, n) { let i = n.length > 3 ? n[2] - n[1] : n[1] - n[0]; Math.abs(i) > 1 && t !== Math.floor(t) && (i = t - Math.floor(t)); const a = H.log10(Math.abs(i)); let r = ''; if (t !== 0) if (Math.max(Math.abs(n[0]), Math.abs(n[n.length - 1])) < 1e-4) { const o = H.log10(Math.abs(t)); let s = Math.floor(o) - Math.floor(a); s = Math.max(Math.min(s, 20), 0), r = t.toExponential(s); } else { let l = -1 * Math.floor(a); l = Math.max(Math.min(l, 20), 0), r = t.toFixed(l); } else r = '0'; return r; }, logarithmic(t, e, n) { const i = t / Math.pow(10, Math.floor(H.log10(t))); return t === 0 ? '0' : i === 1 || i === 2 || i === 5 || e === 0 || e === n.length - 1 ? t.toExponential() : ''; } } }; const sn = H.isArray; const ln = H.isNullOrUndef; const un = H.valueOrDefault; const dn = H.valueAtIndexOrDefault; function hn(t, e, n) { let i; const a = t.getTicks().length; const r = Math.min(e, a - 1); let o = t.getPixelForTick(r); const s = t._startPixel; const l = t._endPixel; if (!(n && (i = a === 1 ? Math.max(o - s, l - o) : e === 0 ? (t.getPixelForTick(1) - o) / 2 : (o - t.getPixelForTick(r - 1)) / 2, (o += r < e ? i : -i) < s - 1e-6 || o > l + 1e-6))) return o; } function cn(t, e, n, i) {
    let a; let r; let o; let s; let l; let u; let d; let h; let c; let f; let g; let p; let m; const v = n.length; const b = []; const x = []; const y = []; let _ = 0; let k = 0; for (a = 0; a < v; ++a) { if (s = n[a].label, l = n[a].major ? e.major : e.minor, t.font = u = l.string, d = i[u] = i[u] || { data: {}, gc: [] }, h = l.lineHeight, c = f = 0, ln(s) || sn(s)) { if (sn(s)) for (r = 0, o = s.length; r < o; ++r)g = s[r], ln(g) || sn(g) || (c = H.measureText(t, d.data, d.gc, c, g), f += h); } else c = H.measureText(t, d.data, d.gc, c, s), f = h; b.push(c), x.push(f), y.push(h / 2), _ = Math.max(c, _), k = Math.max(f, k); } function w(t) { return { width: b[t] || 0, height: x[t] || 0, offset: y[t] || 0 }; } return (function (t, e) { H.each(t, ((t) => { let n; const i = t.gc; const a = i.length / 2; if (a > e) { for (n = 0; n < a; ++n) delete t.data[i[n]]; i.splice(0, a); } })); }(i, v)), p = b.indexOf(_), m = x.indexOf(k), {
      first: w(0), last: w(v - 1), widest: w(p), highest: w(m),
    };
  } function fn(t) { return t.drawTicks ? t.tickMarkLength : 0; } function gn(t) { let e; let n; return t.display ? (e = H.options._parseFont(t), n = H.options.toPadding(t.padding), e.lineHeight + n.height) : 0; } function pn(t, e) {
    return H.extend(H.options._parseFont({
      fontFamily: un(e.fontFamily, t.fontFamily), fontSize: un(e.fontSize, t.fontSize), fontStyle: un(e.fontStyle, t.fontStyle), lineHeight: un(e.lineHeight, t.lineHeight),
    }), { color: H.options.resolve([e.fontColor, t.fontColor, N.global.defaultFontColor]) });
  } function mn(t) { const e = pn(t, t.minor); return { minor: e, major: t.major.enabled ? pn(t, t.major) : e }; } function vn(t) { let e; let n; let i; const a = []; for (n = 0, i = t.length; n < i; ++n) void 0 !== (e = t[n])._index && a.push(e); return a; } function bn(t, e, n, i) { let a; let r; let o; let s; const l = un(n, 0); const u = Math.min(un(i, t.length), t.length); let d = 0; for (e = Math.ceil(e), i && (e = (a = i - n) / Math.floor(a / e)), s = l; s < 0;)d++, s = Math.round(l + d * e); for (r = Math.max(l, 0); r < u; r++)o = t[r], r === s ? (o._index = r, d++, s = Math.round(l + d * e)) : delete o.label; }N._set('scale', {
    display: !0,
    position: 'left',
    offset: !1,
    gridLines: {
      display: !0, color: 'rgba(0,0,0,0.1)', lineWidth: 1, drawBorder: !0, drawOnChartArea: !0, drawTicks: !0, tickMarkLength: 10, zeroLineWidth: 1, zeroLineColor: 'rgba(0,0,0,0.25)', zeroLineBorderDash: [], zeroLineBorderDashOffset: 0, offsetGridLines: !1, borderDash: [], borderDashOffset: 0,
    },
    scaleLabel: { display: !1, labelString: '', padding: { top: 4, bottom: 4 } },
    ticks: {
      beginAtZero: !1, minRotation: 0, maxRotation: 50, mirror: !1, padding: 0, reverse: !1, display: !0, autoSkip: !0, autoSkipPadding: 0, labelOffset: 0, callback: on.formatters.values, minor: {}, major: {},
    },
  }); const xn = K.extend({
    zeroLineIndex: 0,
    getPadding() {
      return {
        left: this.paddingLeft || 0, top: this.paddingTop || 0, right: this.paddingRight || 0, bottom: this.paddingBottom || 0,
      };
    },
    getTicks() { return this._ticks; },
    _getLabels() { const t = this.chart.data; return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || []; },
    mergeTicksOptions() {},
    beforeUpdate() { H.callback(this.options.beforeUpdate, [this]); },
    update(t, e, n) {
      let i; let a; let r; let o; let s; const l = this; const u = l.options.ticks; const d = u.sampleSize; if (l.beforeUpdate(), l.maxWidth = t, l.maxHeight = e, l.margins = H.extend({
        left: 0, right: 0, top: 0, bottom: 0,
      }, n), l._ticks = null, l.ticks = null, l._labelSizes = null, l._maxLabelLines = 0, l.longestLabelWidth = 0, l.longestTextCache = l.longestTextCache || {}, l._gridLineItems = null, l._labelItems = null, l.beforeSetDimensions(), l.setDimensions(), l.afterSetDimensions(), l.beforeDataLimits(), l.determineDataLimits(), l.afterDataLimits(), l.beforeBuildTicks(), o = l.buildTicks() || [], (!(o = l.afterBuildTicks(o) || o) || !o.length) && l.ticks) for (o = [], i = 0, a = l.ticks.length; i < a; ++i)o.push({ value: l.ticks[i], major: !1 }); return l._ticks = o, s = d < o.length, r = l._convertTicksToLabels(s ? (function (t, e) { for (var n = [], i = t.length / e, a = 0, r = t.length; a < r; a += i)n.push(t[Math.floor(a)]); return n; }(o, d)) : o), l._configure(), l.beforeCalculateTickRotation(), l.calculateTickRotation(), l.afterCalculateTickRotation(), l.beforeFit(), l.fit(), l.afterFit(), l._ticksToDraw = u.display && (u.autoSkip || u.source === 'auto') ? l._autoSkip(o) : o, s && (r = l._convertTicksToLabels(l._ticksToDraw)), l.ticks = r, l.afterUpdate(), l.minSize;
    },
    _configure() { let t; let e; const n = this; let i = n.options.ticks.reverse; n.isHorizontal() ? (t = n.left, e = n.right) : (t = n.top, e = n.bottom, i = !i), n._startPixel = t, n._endPixel = e, n._reversePixels = i, n._length = e - t; },
    afterUpdate() { H.callback(this.options.afterUpdate, [this]); },
    beforeSetDimensions() { H.callback(this.options.beforeSetDimensions, [this]); },
    setDimensions() { const t = this; t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0; },
    afterSetDimensions() { H.callback(this.options.afterSetDimensions, [this]); },
    beforeDataLimits() { H.callback(this.options.beforeDataLimits, [this]); },
    determineDataLimits: H.noop,
    afterDataLimits() { H.callback(this.options.afterDataLimits, [this]); },
    beforeBuildTicks() { H.callback(this.options.beforeBuildTicks, [this]); },
    buildTicks: H.noop,
    afterBuildTicks(t) { const e = this; return sn(t) && t.length ? H.callback(e.options.afterBuildTicks, [e, t]) : (e.ticks = H.callback(e.options.afterBuildTicks, [e, e.ticks]) || e.ticks, t); },
    beforeTickToLabelConversion() { H.callback(this.options.beforeTickToLabelConversion, [this]); },
    convertTicksToLabels() { const t = this.options.ticks; this.ticks = this.ticks.map(t.userCallback || t.callback, this); },
    afterTickToLabelConversion() { H.callback(this.options.afterTickToLabelConversion, [this]); },
    beforeCalculateTickRotation() { H.callback(this.options.beforeCalculateTickRotation, [this]); },
    calculateTickRotation() { let t; let e; let n; let i; let a; let r; let o; const s = this; const l = s.options; const u = l.ticks; const d = s.getTicks().length; const h = u.minRotation || 0; const c = u.maxRotation; let f = h; !s._isVisible() || !u.display || h >= c || d <= 1 || !s.isHorizontal() ? s.labelRotation = h : (e = (t = s._getLabelSizes()).widest.width, n = t.highest.height - t.highest.offset, i = Math.min(s.maxWidth, s.chart.width - e), e + 6 > (a = l.offset ? s.maxWidth / d : i / (d - 1)) && (a = i / (d - (l.offset ? 0.5 : 1)), r = s.maxHeight - fn(l.gridLines) - u.padding - gn(l.scaleLabel), o = Math.sqrt(e * e + n * n), f = H.toDegrees(Math.min(Math.asin(Math.min((t.highest.height + 6) / a, 1)), Math.asin(Math.min(r / o, 1)) - Math.asin(n / o))), f = Math.max(h, Math.min(c, f))), s.labelRotation = f); },
    afterCalculateTickRotation() { H.callback(this.options.afterCalculateTickRotation, [this]); },
    beforeFit() { H.callback(this.options.beforeFit, [this]); },
    fit() { const t = this; const e = t.minSize = { width: 0, height: 0 }; const n = t.chart; const i = t.options; const a = i.ticks; const r = i.scaleLabel; const o = i.gridLines; const s = t._isVisible(); const l = i.position === 'bottom'; const u = t.isHorizontal(); if (u ? e.width = t.maxWidth : s && (e.width = fn(o) + gn(r)), u ? s && (e.height = fn(o) + gn(r)) : e.height = t.maxHeight, a.display && s) { const d = mn(a); const h = t._getLabelSizes(); const c = h.first; const f = h.last; const g = h.widest; const p = h.highest; const m = 0.4 * d.minor.lineHeight; const v = a.padding; if (u) { const b = t.labelRotation !== 0; const x = H.toRadians(t.labelRotation); const y = Math.cos(x); const _ = Math.sin(x); const k = _ * g.width + y * (p.height - (b ? p.offset : 0)) + (b ? 0 : m); e.height = Math.min(t.maxHeight, e.height + k + v); let w; let M; const S = t.getPixelForTick(0) - t.left; const C = t.right - t.getPixelForTick(t.getTicks().length - 1); b ? (w = l ? y * c.width + _ * c.offset : _ * (c.height - c.offset), M = l ? _ * (f.height - f.offset) : y * f.width + _ * f.offset) : (w = c.width / 2, M = f.width / 2), t.paddingLeft = Math.max((w - S) * t.width / (t.width - S), 0) + 3, t.paddingRight = Math.max((M - C) * t.width / (t.width - C), 0) + 3; } else { const P = a.mirror ? 0 : g.width + v + m; e.width = Math.min(t.maxWidth, e.width + P), t.paddingTop = c.height / 2, t.paddingBottom = f.height / 2; } }t.handleMargins(), u ? (t.width = t._length = n.width - t.margins.left - t.margins.right, t.height = e.height) : (t.width = e.width, t.height = t._length = n.height - t.margins.top - t.margins.bottom); },
    handleMargins() { const t = this; t.margins && (t.margins.left = Math.max(t.paddingLeft, t.margins.left), t.margins.top = Math.max(t.paddingTop, t.margins.top), t.margins.right = Math.max(t.paddingRight, t.margins.right), t.margins.bottom = Math.max(t.paddingBottom, t.margins.bottom)); },
    afterFit() { H.callback(this.options.afterFit, [this]); },
    isHorizontal() { const t = this.options.position; return t === 'top' || t === 'bottom'; },
    isFullWidth() { return this.options.fullWidth; },
    getRightValue(t) { if (ln(t)) return NaN; if ((typeof t === 'number' || t instanceof Number) && !isFinite(t)) return NaN; if (t) if (this.isHorizontal()) { if (void 0 !== t.x) return this.getRightValue(t.x); } else if (void 0 !== t.y) return this.getRightValue(t.y); return t; },
    _convertTicksToLabels(t) { let e; let n; let i; const a = this; for (a.ticks = t.map(((t) => t.value)), a.beforeTickToLabelConversion(), e = a.convertTicksToLabels(t) || a.ticks, a.afterTickToLabelConversion(), n = 0, i = t.length; n < i; ++n)t[n].label = e[n]; return e; },
    _getLabelSizes() { const t = this; let e = t._labelSizes; return e || (t._labelSizes = e = cn(t.ctx, mn(t.options.ticks), t.getTicks(), t.longestTextCache), t.longestLabelWidth = e.widest.width), e; },
    _parseValue(t) {
      let e; let n; let i; let a; return sn(t) ? (e = +this.getRightValue(t[0]), n = +this.getRightValue(t[1]), i = Math.min(e, n), a = Math.max(e, n)) : (e = void 0, n = t = +this.getRightValue(t), i = t, a = t), {
        min: i, max: a, start: e, end: n,
      };
    },
    _getScaleLabel(t) { const e = this._parseValue(t); return void 0 !== e.start ? `[${e.start}, ${e.end}]` : +this.getRightValue(t); },
    getLabelForIndex: H.noop,
    getPixelForValue: H.noop,
    getValueForPixel: H.noop,
    getPixelForTick(t) { const e = this.options.offset; const n = this._ticks.length; const i = 1 / Math.max(n - (e ? 0 : 1), 1); return t < 0 || t > n - 1 ? null : this.getPixelForDecimal(t * i + (e ? i / 2 : 0)); },
    getPixelForDecimal(t) { return this._reversePixels && (t = 1 - t), this._startPixel + t * this._length; },
    getDecimalForPixel(t) { const e = (t - this._startPixel) / this._length; return this._reversePixels ? 1 - e : e; },
    getBasePixel() { return this.getPixelForValue(this.getBaseValue()); },
    getBaseValue() { const t = this.min; const e = this.max; return this.beginAtZero ? 0 : t < 0 && e < 0 ? e : t > 0 && e > 0 ? t : 0; },
    _autoSkip(t) { let e; let n; let i; let a; const r = this.options.ticks; const o = this._length; const s = r.maxTicksLimit || o / this._tickSize() + 1; const l = r.major.enabled ? (function (t) { let e; let n; const i = []; for (e = 0, n = t.length; e < n; e++)t[e].major && i.push(e); return i; }(t)) : []; const u = l.length; const d = l[0]; const h = l[u - 1]; if (u > s) return (function (t, e, n) { let i; let a; let r = 0; let o = e[0]; for (n = Math.ceil(n), i = 0; i < t.length; i++)a = t[i], i === o ? (a._index = i, o = e[++r * n]) : delete a.label; }(t, l, u / s)), vn(t); if (i = (function (t, e, n, i) { let a; let r; let o; let s; const l = (function (t) { let e; let n; const i = t.length; if (i < 2) return !1; for (n = t[0], e = 1; e < i; ++e) if (t[e] - t[e - 1] !== n) return !1; return n; }(t)); const u = (e.length - 1) / i; if (!l) return Math.max(u, 1); for (o = 0, s = (a = H.math._factorize(l)).length - 1; o < s; o++) if ((r = a[o]) > u) return r; return Math.max(u, 1); }(l, t, 0, s)), u > 0) { for (e = 0, n = u - 1; e < n; e++)bn(t, i, l[e], l[e + 1]); return a = u > 1 ? (h - d) / (u - 1) : null, bn(t, i, H.isNullOrUndef(a) ? 0 : d - a, d), bn(t, i, h, H.isNullOrUndef(a) ? t.length : h + a), vn(t); } return bn(t, i), vn(t); },
    _tickSize() { const t = this.options.ticks; const e = H.toRadians(this.labelRotation); const n = Math.abs(Math.cos(e)); const i = Math.abs(Math.sin(e)); const a = this._getLabelSizes(); const r = t.autoSkipPadding || 0; const o = a ? a.widest.width + r : 0; const s = a ? a.highest.height + r : 0; return this.isHorizontal() ? s * n > o * i ? o / n : s / i : s * i < o * n ? s / n : o / i; },
    _isVisible() { let t; let e; let n; const i = this.chart; const a = this.options.display; if (a !== 'auto') return !!a; for (t = 0, e = i.data.datasets.length; t < e; ++t) if (i.isDatasetVisible(t) && ((n = i.getDatasetMeta(t)).xAxisID === this.id || n.yAxisID === this.id)) return !0; return !1; },
    _computeGridLineItems(t) {
      let e; let n; let i; let a; let r; let o; let s; let l; let u; let d; let h; let c; let f; let g; let p; let m; let v; const b = this; const x = b.chart; const y = b.options; const _ = y.gridLines; const k = y.position; const w = _.offsetGridLines; const M = b.isHorizontal(); const S = b._ticksToDraw; const C = S.length + (w ? 1 : 0); const P = fn(_); const A = []; const D = _.drawBorder ? dn(_.lineWidth, 0, 0) : 0; const T = D / 2; const I = H._alignPixel; const F = function (t) { return I(x, t, D); }; for (k === 'top' ? (e = F(b.bottom), s = b.bottom - P, u = e - T, h = F(t.top) + T, f = t.bottom) : k === 'bottom' ? (e = F(b.top), h = t.top, f = F(t.bottom) - T, s = e + T, u = b.top + P) : k === 'left' ? (e = F(b.right), o = b.right - P, l = e - T, d = F(t.left) + T, c = t.right) : (e = F(b.left), d = t.left, c = F(t.right) - T, o = e + T, l = b.left + P), n = 0; n < C; ++n) {
        i = S[n] || {}, ln(i.label) && n < S.length || (n === b.zeroLineIndex && y.offset === w ? (g = _.zeroLineWidth, p = _.zeroLineColor, m = _.zeroLineBorderDash || [], v = _.zeroLineBorderDashOffset || 0) : (g = dn(_.lineWidth, n, 1), p = dn(_.color, n, 'rgba(0,0,0,0.1)'), m = _.borderDash || [], v = _.borderDashOffset || 0), void 0 !== (a = hn(b, i._index || n, w)) && (r = I(x, a, g), M ? o = l = d = c = r : s = u = h = f = r, A.push({
          tx1: o, ty1: s, tx2: l, ty2: u, x1: d, y1: h, x2: c, y2: f, width: g, color: p, borderDash: m, borderDashOffset: v,
        })));
      } return A.ticksLength = C, A.borderValue = e, A;
    },
    _computeLabelItems() {
      let t; let e; let n; let i; let a; let r; let o; let s; let l; let u; let d; let h; const c = this; const f = c.options; const g = f.ticks; const p = f.position; const m = g.mirror; const v = c.isHorizontal(); const b = c._ticksToDraw; const x = mn(g); const y = g.padding; const _ = fn(f.gridLines); const k = -H.toRadians(c.labelRotation); const w = []; for (p === 'top' ? (r = c.bottom - _ - y, o = k ? 'left' : 'center') : p === 'bottom' ? (r = c.top + _ + y, o = k ? 'right' : 'center') : p === 'left' ? (a = c.right - (m ? 0 : _) - y, o = m ? 'left' : 'right') : (a = c.left + (m ? 0 : _) + y, o = m ? 'right' : 'left'), t = 0, e = b.length; t < e; ++t) {
        i = (n = b[t]).label, ln(i) || (s = c.getPixelForTick(n._index || t) + g.labelOffset, u = (l = n.major ? x.major : x.minor).lineHeight, d = sn(i) ? i.length : 1, v ? (a = s, h = p === 'top' ? ((k ? 1 : 0.5) - d) * u : (k ? 0 : 0.5) * u) : (r = s, h = (1 - d) * u / 2), w.push({
          x: a, y: r, rotation: k, label: i, font: l, textOffset: h, textAlign: o,
        }));
      } return w;
    },
    _drawGrid(t) { const e = this; const n = e.options.gridLines; if (n.display) { let i; let a; let r; let o; let s; const l = e.ctx; const u = e.chart; const d = H._alignPixel; const h = n.drawBorder ? dn(n.lineWidth, 0, 0) : 0; const c = e._gridLineItems || (e._gridLineItems = e._computeGridLineItems(t)); for (r = 0, o = c.length; r < o; ++r)i = (s = c[r]).width, a = s.color, i && a && (l.save(), l.lineWidth = i, l.strokeStyle = a, l.setLineDash && (l.setLineDash(s.borderDash), l.lineDashOffset = s.borderDashOffset), l.beginPath(), n.drawTicks && (l.moveTo(s.tx1, s.ty1), l.lineTo(s.tx2, s.ty2)), n.drawOnChartArea && (l.moveTo(s.x1, s.y1), l.lineTo(s.x2, s.y2)), l.stroke(), l.restore()); if (h) { let f; let g; let p; let m; const v = h; const b = dn(n.lineWidth, c.ticksLength - 1, 1); const x = c.borderValue; e.isHorizontal() ? (f = d(u, e.left, v) - v / 2, g = d(u, e.right, b) + b / 2, p = m = x) : (p = d(u, e.top, v) - v / 2, m = d(u, e.bottom, b) + b / 2, f = g = x), l.lineWidth = h, l.strokeStyle = dn(n.color, 0), l.beginPath(), l.moveTo(f, p), l.lineTo(g, m), l.stroke(); } } },
    _drawLabels() { const t = this; if (t.options.ticks.display) { let e; let n; let i; let a; let r; let o; let s; let l; const u = t.ctx; const d = t._labelItems || (t._labelItems = t._computeLabelItems()); for (e = 0, i = d.length; e < i; ++e) { if (o = (r = d[e]).font, u.save(), u.translate(r.x, r.y), u.rotate(r.rotation), u.font = o.string, u.fillStyle = o.color, u.textBaseline = 'middle', u.textAlign = r.textAlign, s = r.label, l = r.textOffset, sn(s)) for (n = 0, a = s.length; n < a; ++n)u.fillText(`${s[n]}`, 0, l), l += o.lineHeight; else u.fillText(s, 0, l); u.restore(); } } },
    _drawTitle() { const t = this; const e = t.ctx; const n = t.options; const i = n.scaleLabel; if (i.display) { let a; let r; const o = un(i.fontColor, N.global.defaultFontColor); const s = H.options._parseFont(i); const l = H.options.toPadding(i.padding); const u = s.lineHeight / 2; const d = n.position; let h = 0; if (t.isHorizontal())a = t.left + t.width / 2, r = d === 'bottom' ? t.bottom - u - l.bottom : t.top + u + l.top; else { const c = d === 'left'; a = c ? t.left + u + l.top : t.right - u - l.top, r = t.top + t.height / 2, h = c ? -0.5 * Math.PI : 0.5 * Math.PI; }e.save(), e.translate(a, r), e.rotate(h), e.textAlign = 'center', e.textBaseline = 'middle', e.fillStyle = o, e.font = s.string, e.fillText(i.labelString, 0, 0), e.restore(); } },
    draw(t) { this._isVisible() && (this._drawGrid(t), this._drawTitle(), this._drawLabels()); },
    _layers() { const t = this; const e = t.options; const n = e.ticks && e.ticks.z || 0; const i = e.gridLines && e.gridLines.z || 0; return t._isVisible() && n !== i && t.draw === t._draw ? [{ z: i, draw() { t._drawGrid.apply(t, arguments), t._drawTitle.apply(t, arguments); } }, { z: n, draw() { t._drawLabels.apply(t, arguments); } }] : [{ z: n, draw() { t.draw.apply(t, arguments); } }]; },
    _getMatchingVisibleMetas(t) { const e = this; const n = e.isHorizontal(); return e.chart._getSortedVisibleDatasetMetas().filter(((i) => (!t || i.type === t) && (n ? i.xAxisID === e.id : i.yAxisID === e.id))); },
  }); xn.prototype._draw = xn.prototype.draw; const yn = xn; const _n = H.isNullOrUndef; const kn = yn.extend({
    determineDataLimits() { let t; const e = this; const n = e._getLabels(); const i = e.options.ticks; const a = i.min; const r = i.max; let o = 0; let s = n.length - 1; void 0 !== a && (t = n.indexOf(a)) >= 0 && (o = t), void 0 !== r && (t = n.indexOf(r)) >= 0 && (s = t), e.minIndex = o, e.maxIndex = s, e.min = n[o], e.max = n[s]; }, buildTicks() { const t = this._getLabels(); const e = this.minIndex; const n = this.maxIndex; this.ticks = e === 0 && n === t.length - 1 ? t : t.slice(e, n + 1); }, getLabelForIndex(t, e) { const n = this.chart; return n.getDatasetMeta(e).controller._getValueScaleId() === this.id ? this.getRightValue(n.data.datasets[e].data[t]) : this._getLabels()[t]; }, _configure() { const t = this; const e = t.options.offset; const n = t.ticks; yn.prototype._configure.call(t), t.isHorizontal() || (t._reversePixels = !t._reversePixels), n && (t._startValue = t.minIndex - (e ? 0.5 : 0), t._valueRange = Math.max(n.length - (e ? 0 : 1), 1)); }, getPixelForValue(t, e, n) { let i; let a; let r; const o = this; return _n(e) || _n(n) || (t = o.chart.data.datasets[n].data[e]), _n(t) || (i = o.isHorizontal() ? t.x : t.y), (void 0 !== i || void 0 !== t && isNaN(e)) && (a = o._getLabels(), t = H.valueOrDefault(i, t), e = (r = a.indexOf(t)) !== -1 ? r : e, isNaN(e) && (e = t)), o.getPixelForDecimal((e - o._startValue) / o._valueRange); }, getPixelForTick(t) { const e = this.ticks; return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t], t + this.minIndex); }, getValueForPixel(t) { const e = Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange); return Math.min(Math.max(e, 0), this.ticks.length - 1); }, getBasePixel() { return this.bottom; },
  }); const wn = { position: 'bottom' }; kn._defaults = wn; const Mn = H.noop; const Sn = H.isNullOrUndef; const Cn = yn.extend({
    getRightValue(t) { return typeof t === 'string' ? +t : yn.prototype.getRightValue.call(this, t); },
    handleTickRangeOptions() { const t = this; const e = t.options.ticks; if (e.beginAtZero) { const n = H.sign(t.min); const i = H.sign(t.max); n < 0 && i < 0 ? t.max = 0 : n > 0 && i > 0 && (t.min = 0); } const a = void 0 !== e.min || void 0 !== e.suggestedMin; const r = void 0 !== e.max || void 0 !== e.suggestedMax; void 0 !== e.min ? t.min = e.min : void 0 !== e.suggestedMin && (t.min === null ? t.min = e.suggestedMin : t.min = Math.min(t.min, e.suggestedMin)), void 0 !== e.max ? t.max = e.max : void 0 !== e.suggestedMax && (t.max === null ? t.max = e.suggestedMax : t.max = Math.max(t.max, e.suggestedMax)), a !== r && t.min >= t.max && (a ? t.max = t.min + 1 : t.min = t.max - 1), t.min === t.max && (t.max++, e.beginAtZero || t.min--); },
    getTickLimit() { let t; const e = this.options.ticks; const n = e.stepSize; let i = e.maxTicksLimit; return n ? t = Math.ceil(this.max / n) - Math.floor(this.min / n) + 1 : (t = this._computeTickLimit(), i = i || 11), i && (t = Math.min(i, t)), t; },
    _computeTickLimit() { return Number.POSITIVE_INFINITY; },
    handleDirectionalChanges: Mn,
    buildTicks() {
      const t = this; const e = t.options.ticks; let n = t.getTickLimit(); const i = {
        maxTicks: n = Math.max(2, n), min: e.min, max: e.max, precision: e.precision, stepSize: H.valueOrDefault(e.fixedStepSize, e.stepSize),
      }; const a = t.ticks = (function (t, e) { let n; let i; let a; let r; const o = []; const s = t.stepSize; const l = s || 1; const u = t.maxTicks - 1; const d = t.min; const h = t.max; const c = t.precision; const f = e.min; const g = e.max; let p = H.niceNum((g - f) / u / l) * l; if (p < 1e-14 && Sn(d) && Sn(h)) return [f, g]; (r = Math.ceil(g / p) - Math.floor(f / p)) > u && (p = H.niceNum(r * p / u / l) * l), s || Sn(c) ? n = Math.pow(10, H._decimalPlaces(p)) : (n = Math.pow(10, c), p = Math.ceil(p * n) / n), i = Math.floor(f / p) * p, a = Math.ceil(g / p) * p, s && (!Sn(d) && H.almostWhole(d / p, p / 1e3) && (i = d), !Sn(h) && H.almostWhole(h / p, p / 1e3) && (a = h)), r = (a - i) / p, r = H.almostEquals(r, Math.round(r), p / 1e3) ? Math.round(r) : Math.ceil(r), i = Math.round(i * n) / n, a = Math.round(a * n) / n, o.push(Sn(d) ? i : d); for (let m = 1; m < r; ++m)o.push(Math.round((i + m * p) * n) / n); return o.push(Sn(h) ? a : h), o; }(i, t)); t.handleDirectionalChanges(), t.max = H.max(a), t.min = H.min(a), e.reverse ? (a.reverse(), t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max);
    },
    convertTicksToLabels() { const t = this; t.ticksAsNumbers = t.ticks.slice(), t.zeroLineIndex = t.ticks.indexOf(0), yn.prototype.convertTicksToLabels.call(t); },
    _configure() { let t; const e = this; const n = e.getTicks(); let i = e.min; let a = e.max; yn.prototype._configure.call(e), e.options.offset && n.length && (i -= t = (a - i) / Math.max(n.length - 1, 1) / 2, a += t), e._startValue = i, e._endValue = a, e._valueRange = a - i; },
  }); const Pn = { position: 'left', ticks: { callback: on.formatters.linear } }; function An(t, e, n, i) { let a; let r; const o = t.options; const s = (function (t, e, n) { const i = [n.type, void 0 === e && void 0 === n.stack ? n.index : '', n.stack].join('.'); return void 0 === t[i] && (t[i] = { pos: [], neg: [] }), t[i]; }(e, o.stacked, n)); const l = s.pos; const u = s.neg; const d = i.length; for (a = 0; a < d; ++a)r = t._parseValue(i[a]), isNaN(r.min) || isNaN(r.max) || n.data[a].hidden || (l[a] = l[a] || 0, u[a] = u[a] || 0, o.relativePoints ? l[a] = 100 : r.min < 0 || r.max < 0 ? u[a] += r.min : l[a] += r.max); } function Dn(t, e, n) { let i; let a; const r = n.length; for (i = 0; i < r; ++i)a = t._parseValue(n[i]), isNaN(a.min) || isNaN(a.max) || e.data[i].hidden || (t.min = Math.min(t.min, a.min), t.max = Math.max(t.max, a.max)); } const Tn = Cn.extend({
    determineDataLimits() { let t; let e; let n; let i; const a = this; const r = a.options; const o = a.chart.data.datasets; const s = a._getMatchingVisibleMetas(); let l = r.stacked; const u = {}; const d = s.length; if (a.min = Number.POSITIVE_INFINITY, a.max = Number.NEGATIVE_INFINITY, void 0 === l) for (t = 0; !l && t < d; ++t)l = void 0 !== (e = s[t]).stack; for (t = 0; t < d; ++t)n = o[(e = s[t]).index].data, l ? An(a, u, e, n) : Dn(a, e, n); H.each(u, ((t) => { i = t.pos.concat(t.neg), a.min = Math.min(a.min, H.min(i)), a.max = Math.max(a.max, H.max(i)); })), a.min = H.isFinite(a.min) && !isNaN(a.min) ? a.min : 0, a.max = H.isFinite(a.max) && !isNaN(a.max) ? a.max : 1, a.handleTickRangeOptions(); }, _computeTickLimit() { let t; return this.isHorizontal() ? Math.ceil(this.width / 40) : (t = H.options._parseFont(this.options.ticks), Math.ceil(this.height / t.lineHeight)); }, handleDirectionalChanges() { this.isHorizontal() || this.ticks.reverse(); }, getLabelForIndex(t, e) { return this._getScaleLabel(this.chart.data.datasets[e].data[t]); }, getPixelForValue(t) { return this.getPixelForDecimal((+this.getRightValue(t) - this._startValue) / this._valueRange); }, getValueForPixel(t) { return this._startValue + this.getDecimalForPixel(t) * this._valueRange; }, getPixelForTick(t) { const e = this.ticksAsNumbers; return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t]); },
  }); const In = Pn; Tn._defaults = In; const Fn = H.valueOrDefault; const On = H.math.log10; const Ln = { position: 'left', ticks: { callback: on.formatters.logarithmic } }; function Rn(t, e) { return H.isFinite(t) && t >= 0 ? t : e; } const zn = yn.extend({
    determineDataLimits() { let t; let e; let n; let i; let a; let r; const o = this; const s = o.options; const l = o.chart; const u = l.data.datasets; const d = o.isHorizontal(); function h(t) { return d ? t.xAxisID === o.id : t.yAxisID === o.id; }o.min = Number.POSITIVE_INFINITY, o.max = Number.NEGATIVE_INFINITY, o.minNotZero = Number.POSITIVE_INFINITY; let c = s.stacked; if (void 0 === c) for (t = 0; t < u.length; t++) if (e = l.getDatasetMeta(t), l.isDatasetVisible(t) && h(e) && void 0 !== e.stack) { c = !0; break; } if (s.stacked || c) { const f = {}; for (t = 0; t < u.length; t++) { const g = [(e = l.getDatasetMeta(t)).type, void 0 === s.stacked && void 0 === e.stack ? t : '', e.stack].join('.'); if (l.isDatasetVisible(t) && h(e)) for (void 0 === f[g] && (f[g] = []), a = 0, r = (i = u[t].data).length; a < r; a++) { const p = f[g]; n = o._parseValue(i[a]), isNaN(n.min) || isNaN(n.max) || e.data[a].hidden || n.min < 0 || n.max < 0 || (p[a] = p[a] || 0, p[a] += n.max); } }H.each(f, ((t) => { if (t.length > 0) { const e = H.min(t); const n = H.max(t); o.min = Math.min(o.min, e), o.max = Math.max(o.max, n); } })); } else for (t = 0; t < u.length; t++) if (e = l.getDatasetMeta(t), l.isDatasetVisible(t) && h(e)) for (a = 0, r = (i = u[t].data).length; a < r; a++)n = o._parseValue(i[a]), isNaN(n.min) || isNaN(n.max) || e.data[a].hidden || n.min < 0 || n.max < 0 || (o.min = Math.min(n.min, o.min), o.max = Math.max(n.max, o.max), n.min !== 0 && (o.minNotZero = Math.min(n.min, o.minNotZero))); o.min = H.isFinite(o.min) ? o.min : null, o.max = H.isFinite(o.max) ? o.max : null, o.minNotZero = H.isFinite(o.minNotZero) ? o.minNotZero : null, this.handleTickRangeOptions(); }, handleTickRangeOptions() { const t = this; const e = t.options.ticks; t.min = Rn(e.min, t.min), t.max = Rn(e.max, t.max), t.min === t.max && (t.min !== 0 && t.min !== null ? (t.min = Math.pow(10, Math.floor(On(t.min)) - 1), t.max = Math.pow(10, Math.floor(On(t.max)) + 1)) : (t.min = 1, t.max = 10)), t.min === null && (t.min = Math.pow(10, Math.floor(On(t.max)) - 1)), t.max === null && (t.max = t.min !== 0 ? Math.pow(10, Math.floor(On(t.min)) + 1) : 10), t.minNotZero === null && (t.min > 0 ? t.minNotZero = t.min : t.max < 1 ? t.minNotZero = Math.pow(10, Math.floor(On(t.max))) : t.minNotZero = 1); }, buildTicks() { const t = this; const e = t.options.ticks; let n = !t.isHorizontal(); const i = { min: Rn(e.min), max: Rn(e.max) }; const a = t.ticks = (function (t, e) { let n; let i; const a = []; let r = Fn(t.min, Math.pow(10, Math.floor(On(e.min)))); const o = Math.floor(On(e.max)); const s = Math.ceil(e.max / Math.pow(10, o)); r === 0 ? (n = Math.floor(On(e.minNotZero)), i = Math.floor(e.minNotZero / Math.pow(10, n)), a.push(r), r = i * Math.pow(10, n)) : (n = Math.floor(On(r)), i = Math.floor(r / Math.pow(10, n))); let l = n < 0 ? Math.pow(10, Math.abs(n)) : 1; do { a.push(r), ++i === 10 && (i = 1, l = ++n >= 0 ? 1 : l), r = Math.round(i * Math.pow(10, n) * l) / l; } while (n < o || n === o && i < s);const u = Fn(t.max, r); return a.push(u), a; }(i, t)); t.max = H.max(a), t.min = H.min(a), e.reverse ? (n = !n, t.start = t.max, t.end = t.min) : (t.start = t.min, t.end = t.max), n && a.reverse(); }, convertTicksToLabels() { this.tickValues = this.ticks.slice(), yn.prototype.convertTicksToLabels.call(this); }, getLabelForIndex(t, e) { return this._getScaleLabel(this.chart.data.datasets[e].data[t]); }, getPixelForTick(t) { const e = this.tickValues; return t < 0 || t > e.length - 1 ? null : this.getPixelForValue(e[t]); }, _getFirstTickValue(t) { const e = Math.floor(On(t)); return Math.floor(t / Math.pow(10, e)) * Math.pow(10, e); }, _configure() { const t = this; let e = t.min; let n = 0; yn.prototype._configure.call(t), e === 0 && (e = t._getFirstTickValue(t.minNotZero), n = Fn(t.options.ticks.fontSize, N.global.defaultFontSize) / t._length), t._startValue = On(e), t._valueOffset = n, t._valueRange = (On(t.max) - On(e)) / (1 - n); }, getPixelForValue(t) { const e = this; let n = 0; return (t = +e.getRightValue(t)) > e.min && t > 0 && (n = (On(t) - e._startValue) / e._valueRange + e._valueOffset), e.getPixelForDecimal(n); }, getValueForPixel(t) { const e = this; const n = e.getDecimalForPixel(t); return n === 0 && e.min === 0 ? 0 : Math.pow(10, e._startValue + (n - e._valueOffset) * e._valueRange); },
  }); const Nn = Ln; zn._defaults = Nn; const Bn = H.valueOrDefault; const En = H.valueAtIndexOrDefault; const Wn = H.options.resolve; const Vn = {
    display: !0,
    animate: !0,
    position: 'chartArea',
    angleLines: {
      display: !0, color: 'rgba(0,0,0,0.1)', lineWidth: 1, borderDash: [], borderDashOffset: 0,
    },
    gridLines: { circular: !1 },
    ticks: {
      showLabelBackdrop: !0, backdropColor: 'rgba(255,255,255,0.75)', backdropPaddingY: 2, backdropPaddingX: 2, callback: on.formatters.linear,
    },
    pointLabels: { display: !0, fontSize: 10, callback(t) { return t; } },
  }; function Hn(t) { const e = t.ticks; return e.display && t.display ? Bn(e.fontSize, N.global.defaultFontSize) + 2 * e.backdropPaddingY : 0; } function jn(t, e, n, i, a) { return t === i || t === a ? { start: e - n / 2, end: e + n / 2 } : t < i || t > a ? { start: e - n, end: e } : { start: e, end: e + n }; } function qn(t) { return t === 0 || t === 180 ? 'center' : t < 180 ? 'left' : 'right'; } function Un(t, e, n, i) { let a; let r; let o = n.y + i / 2; if (H.isArray(e)) for (a = 0, r = e.length; a < r; ++a)t.fillText(e[a], n.x, o), o += i; else t.fillText(e, n.x, o); } function Yn(t, e, n) { t === 90 || t === 270 ? n.y -= e.h / 2 : (t > 270 || t < 90) && (n.y -= e.h); } function Gn(t) { return H.isNumber(t) ? t : 0; } const Xn = Cn.extend({
    setDimensions() { const t = this; t.width = t.maxWidth, t.height = t.maxHeight, t.paddingTop = Hn(t.options) / 2, t.xCenter = Math.floor(t.width / 2), t.yCenter = Math.floor((t.height - t.paddingTop) / 2), t.drawingArea = Math.min(t.height - t.paddingTop, t.width) / 2; },
    determineDataLimits() { const t = this; const e = t.chart; let n = Number.POSITIVE_INFINITY; let i = Number.NEGATIVE_INFINITY; H.each(e.data.datasets, ((a, r) => { if (e.isDatasetVisible(r)) { const o = e.getDatasetMeta(r); H.each(a.data, ((e, a) => { const r = +t.getRightValue(e); isNaN(r) || o.data[a].hidden || (n = Math.min(r, n), i = Math.max(r, i)); })); } })), t.min = n === Number.POSITIVE_INFINITY ? 0 : n, t.max = i === Number.NEGATIVE_INFINITY ? 0 : i, t.handleTickRangeOptions(); },
    _computeTickLimit() { return Math.ceil(this.drawingArea / Hn(this.options)); },
    convertTicksToLabels() { const t = this; Cn.prototype.convertTicksToLabels.call(t), t.pointLabels = t.chart.data.labels.map((function () { const e = H.callback(t.options.pointLabels.callback, arguments, t); return e || e === 0 ? e : ''; })); },
    getLabelForIndex(t, e) { return +this.getRightValue(this.chart.data.datasets[e].data[t]); },
    fit() {
      const t = this.options; t.display && t.pointLabels.display ? (function (t) {
        let e; let n; let i; const a = H.options._parseFont(t.options.pointLabels); const r = {
          l: 0, r: t.width, t: 0, b: t.height - t.paddingTop,
        }; const o = {}; t.ctx.font = a.string, t._pointLabelSizes = []; let s; let l; let u; const d = t.chart.data.labels.length; for (e = 0; e < d; e++) { i = t.getPointPosition(e, t.drawingArea + 5), s = t.ctx, l = a.lineHeight, u = t.pointLabels[e], n = H.isArray(u) ? { w: H.longestText(s, s.font, u), h: u.length * l } : { w: s.measureText(u).width, h: l }, t._pointLabelSizes[e] = n; const h = t.getIndexAngle(e); const c = H.toDegrees(h) % 360; const f = jn(c, i.x, n.w, 0, 180); const g = jn(c, i.y, n.h, 90, 270); f.start < r.l && (r.l = f.start, o.l = h), f.end > r.r && (r.r = f.end, o.r = h), g.start < r.t && (r.t = g.start, o.t = h), g.end > r.b && (r.b = g.end, o.b = h); }t.setReductions(t.drawingArea, r, o);
      }(this)) : this.setCenterPoint(0, 0, 0, 0);
    },
    setReductions(t, e, n) { const i = this; let a = e.l / Math.sin(n.l); let r = Math.max(e.r - i.width, 0) / Math.sin(n.r); let o = -e.t / Math.cos(n.t); let s = -Math.max(e.b - (i.height - i.paddingTop), 0) / Math.cos(n.b); a = Gn(a), r = Gn(r), o = Gn(o), s = Gn(s), i.drawingArea = Math.min(Math.floor(t - (a + r) / 2), Math.floor(t - (o + s) / 2)), i.setCenterPoint(a, r, o, s); },
    setCenterPoint(t, e, n, i) { const a = this; const r = a.width - e - a.drawingArea; const o = t + a.drawingArea; const s = n + a.drawingArea; const l = a.height - a.paddingTop - i - a.drawingArea; a.xCenter = Math.floor((o + r) / 2 + a.left), a.yCenter = Math.floor((s + l) / 2 + a.top + a.paddingTop); },
    getIndexAngle(t) { const e = this.chart; const n = (t * (360 / e.data.labels.length) + ((e.options || {}).startAngle || 0)) % 360; return (n < 0 ? n + 360 : n) * Math.PI * 2 / 360; },
    getDistanceFromCenterForValue(t) { const e = this; if (H.isNullOrUndef(t)) return NaN; const n = e.drawingArea / (e.max - e.min); return e.options.ticks.reverse ? (e.max - t) * n : (t - e.min) * n; },
    getPointPosition(t, e) { const n = this.getIndexAngle(t) - Math.PI / 2; return { x: Math.cos(n) * e + this.xCenter, y: Math.sin(n) * e + this.yCenter }; },
    getPointPositionForValue(t, e) { return this.getPointPosition(t, this.getDistanceFromCenterForValue(e)); },
    getBasePosition(t) { const e = this.min; const n = this.max; return this.getPointPositionForValue(t || 0, this.beginAtZero ? 0 : e < 0 && n < 0 ? n : e > 0 && n > 0 ? e : 0); },
    _drawGrid() { let t; let e; let n; const i = this; const a = i.ctx; const r = i.options; const o = r.gridLines; const s = r.angleLines; const l = Bn(s.lineWidth, o.lineWidth); const u = Bn(s.color, o.color); if (r.pointLabels.display && (function (t) { const e = t.ctx; const n = t.options; const i = n.pointLabels; const a = Hn(n); const r = t.getDistanceFromCenterForValue(n.ticks.reverse ? t.min : t.max); const o = H.options._parseFont(i); e.save(), e.font = o.string, e.textBaseline = 'middle'; for (let s = t.chart.data.labels.length - 1; s >= 0; s--) { const l = s === 0 ? a / 2 : 0; const u = t.getPointPosition(s, r + l + 5); const d = En(i.fontColor, s, N.global.defaultFontColor); e.fillStyle = d; const h = t.getIndexAngle(s); const c = H.toDegrees(h); e.textAlign = qn(c), Yn(c, t._pointLabelSizes[s], u), Un(e, t.pointLabels[s], u, o.lineHeight); }e.restore(); }(i)), o.display && H.each(i.ticks, ((t, n) => { n !== 0 && (e = i.getDistanceFromCenterForValue(i.ticksAsNumbers[n]), (function (t, e, n, i) { let a; const r = t.ctx; const o = e.circular; const s = t.chart.data.labels.length; const l = En(e.color, i - 1); const u = En(e.lineWidth, i - 1); if ((o || s) && l && u) { if (r.save(), r.strokeStyle = l, r.lineWidth = u, r.setLineDash && (r.setLineDash(e.borderDash || []), r.lineDashOffset = e.borderDashOffset || 0), r.beginPath(), o)r.arc(t.xCenter, t.yCenter, n, 0, 2 * Math.PI); else { a = t.getPointPosition(0, n), r.moveTo(a.x, a.y); for (let d = 1; d < s; d++)a = t.getPointPosition(d, n), r.lineTo(a.x, a.y); }r.closePath(), r.stroke(), r.restore(); } }(i, o, e, n))); })), s.display && l && u) { for (a.save(), a.lineWidth = l, a.strokeStyle = u, a.setLineDash && (a.setLineDash(Wn([s.borderDash, o.borderDash, []])), a.lineDashOffset = Wn([s.borderDashOffset, o.borderDashOffset, 0])), t = i.chart.data.labels.length - 1; t >= 0; t--)e = i.getDistanceFromCenterForValue(r.ticks.reverse ? i.min : i.max), n = i.getPointPosition(t, e), a.beginPath(), a.moveTo(i.xCenter, i.yCenter), a.lineTo(n.x, n.y), a.stroke(); a.restore(); } },
    _drawLabels() { const t = this; const e = t.ctx; const n = t.options.ticks; if (n.display) { let i; let a; const r = t.getIndexAngle(0); const o = H.options._parseFont(n); const s = Bn(n.fontColor, N.global.defaultFontColor); e.save(), e.font = o.string, e.translate(t.xCenter, t.yCenter), e.rotate(r), e.textAlign = 'center', e.textBaseline = 'middle', H.each(t.ticks, ((r, l) => { (l !== 0 || n.reverse) && (i = t.getDistanceFromCenterForValue(t.ticksAsNumbers[l]), n.showLabelBackdrop && (a = e.measureText(r).width, e.fillStyle = n.backdropColor, e.fillRect(-a / 2 - n.backdropPaddingX, -i - o.size / 2 - n.backdropPaddingY, a + 2 * n.backdropPaddingX, o.size + 2 * n.backdropPaddingY)), e.fillStyle = s, e.fillText(r, 0, -i)); })), e.restore(); } },
    _drawTitle: H.noop,
  }); const Kn = Vn; Xn._defaults = Kn; const Zn = H._deprecated; const $n = H.options.resolve; const Jn = H.valueOrDefault; const Qn = Number.MIN_SAFE_INTEGER || -9007199254740991; const ti = Number.MAX_SAFE_INTEGER || 9007199254740991; const ei = {
    millisecond: { common: !0, size: 1, steps: 1e3 }, second: { common: !0, size: 1e3, steps: 60 }, minute: { common: !0, size: 6e4, steps: 60 }, hour: { common: !0, size: 36e5, steps: 24 }, day: { common: !0, size: 864e5, steps: 30 }, week: { common: !1, size: 6048e5, steps: 4 }, month: { common: !0, size: 2628e6, steps: 12 }, quarter: { common: !1, size: 7884e6, steps: 4 }, year: { common: !0, size: 3154e7 },
  }; const ni = Object.keys(ei); function ii(t, e) { return t - e; } function ai(t) { return H.valueOrDefault(t.time.min, t.ticks.min); } function ri(t) { return H.valueOrDefault(t.time.max, t.ticks.max); } function oi(t, e, n, i) { const a = (function (t, e, n) { for (var i, a, r, o = 0, s = t.length - 1; o >= 0 && o <= s;) { if (a = t[(i = o + s >> 1) - 1] || null, r = t[i], !a) return { lo: null, hi: r }; if (r[e] < n)o = i + 1; else { if (!(a[e] > n)) return { lo: a, hi: r }; s = i - 1; } } return { lo: r, hi: null }; }(t, e, n)); const r = a.lo ? a.hi ? a.lo : t[t.length - 2] : t[0]; const o = a.lo ? a.hi ? a.hi : t[t.length - 1] : t[1]; const s = o[e] - r[e]; const l = s ? (n - r[e]) / s : 0; const u = (o[i] - r[i]) * l; return r[i] + u; } function si(t, e) { const n = t._adapter; const i = t.options.time; const a = i.parser; const r = a || i.format; let o = e; return typeof a === 'function' && (o = a(o)), H.isFinite(o) || (o = typeof r === 'string' ? n.parse(o, r) : n.parse(o)), o !== null ? +o : (a || typeof r !== 'function' || (o = r(e), H.isFinite(o) || (o = n.parse(o))), o); } function li(t, e) { if (H.isNullOrUndef(e)) return null; const n = t.options.time; let i = si(t, t.getRightValue(e)); return i === null ? i : (n.round && (i = +t._adapter.startOf(i, n.round)), i); } function ui(t, e, n, i) { let a; let r; let o; const s = ni.length; for (a = ni.indexOf(t); a < s - 1; ++a) if (o = (r = ei[ni[a]]).steps ? r.steps : ti, r.common && Math.ceil((n - e) / (o * r.size)) <= i) return ni[a]; return ni[s - 1]; } function di(t, e, n) { let i; let a; const r = []; const o = {}; const s = e.length; for (i = 0; i < s; ++i)o[a = e[i]] = i, r.push({ value: a, major: !1 }); return s !== 0 && n ? (function (t, e, n, i) { let a; let r; const o = t._adapter; const s = +o.startOf(e[0].value, i); const l = e[e.length - 1].value; for (a = s; a <= l; a = +o.add(a, 1, i))(r = n[a]) >= 0 && (e[r].major = !0); return e; }(t, r, o, n)) : r; } const hi = yn.extend({
    initialize() { this.mergeTicksOptions(), yn.prototype.initialize.call(this); }, update() { const t = this; const e = t.options; const n = e.time || (e.time = {}); const i = t._adapter = new rn._date(e.adapters.date); return Zn('time scale', n.format, 'time.format', 'time.parser'), Zn('time scale', n.min, 'time.min', 'ticks.min'), Zn('time scale', n.max, 'time.max', 'ticks.max'), H.mergeIf(n.displayFormats, i.formats()), yn.prototype.update.apply(t, arguments); }, getRightValue(t) { return t && void 0 !== t.t && (t = t.t), yn.prototype.getRightValue.call(this, t); }, determineDataLimits() { let t; let e; let n; let i; let a; let r; let o; const s = this; const l = s.chart; const u = s._adapter; const d = s.options; const h = d.time.unit || 'day'; let c = ti; let f = Qn; let g = []; const p = []; const m = []; const v = s._getLabels(); for (t = 0, n = v.length; t < n; ++t)m.push(li(s, v[t])); for (t = 0, n = (l.data.datasets || []).length; t < n; ++t) if (l.isDatasetVisible(t)) if (a = l.data.datasets[t].data, H.isObject(a[0])) for (p[t] = [], e = 0, i = a.length; e < i; ++e)r = li(s, a[e]), g.push(r), p[t][e] = r; else p[t] = m.slice(0), o || (g = g.concat(m), o = !0); else p[t] = []; m.length && (c = Math.min(c, m[0]), f = Math.max(f, m[m.length - 1])), g.length && (g = n > 1 ? (function (t) { let e; let n; let i; const a = {}; const r = []; for (e = 0, n = t.length; e < n; ++e)a[i = t[e]] || (a[i] = !0, r.push(i)); return r; }(g)).sort(ii) : g.sort(ii), c = Math.min(c, g[0]), f = Math.max(f, g[g.length - 1])), c = li(s, ai(d)) || c, f = li(s, ri(d)) || f, c = c === ti ? +u.startOf(Date.now(), h) : c, f = f === Qn ? +u.endOf(Date.now(), h) + 1 : f, s.min = Math.min(c, f), s.max = Math.max(c + 1, f), s._table = [], s._timestamps = { data: g, datasets: p, labels: m }; }, buildTicks() { let t; let e; let n; const i = this; let a = i.min; let r = i.max; const o = i.options; const s = o.ticks; const l = o.time; let u = i._timestamps; const d = []; const h = i.getLabelCapacity(a); const c = s.source; const f = o.distribution; for (u = c === 'data' || c === 'auto' && f === 'series' ? u.data : c === 'labels' ? u.labels : (function (t, e, n, i) { let a; const r = t._adapter; const o = t.options; const s = o.time; const l = s.unit || ui(s.minUnit, e, n, i); const u = $n([s.stepSize, s.unitStepSize, 1]); const d = l === 'week' && s.isoWeekday; let h = e; const c = []; if (d && (h = +r.startOf(h, 'isoWeek', d)), h = +r.startOf(h, d ? 'day' : l), r.diff(n, e, l) > 1e5 * u) throw `${e} and ${n} are too far apart with stepSize of ${u} ${l}`; for (a = h; a < n; a = +r.add(a, u, l))c.push(a); return a !== n && o.bounds !== 'ticks' || c.push(a), c; }(i, a, r, h)), o.bounds === 'ticks' && u.length && (a = u[0], r = u[u.length - 1]), a = li(i, ai(o)) || a, r = li(i, ri(o)) || r, t = 0, e = u.length; t < e; ++t)(n = u[t]) >= a && n <= r && d.push(n); return i.min = a, i.max = r, i._unit = l.unit || (s.autoSkip ? ui(l.minUnit, i.min, i.max, h) : (function (t, e, n, i, a) { let r; let o; for (r = ni.length - 1; r >= ni.indexOf(n); r--) if (o = ni[r], ei[o].common && t._adapter.diff(a, i, o) >= e - 1) return o; return ni[n ? ni.indexOf(n) : 0]; }(i, d.length, l.minUnit, i.min, i.max))), i._majorUnit = s.major.enabled && i._unit !== 'year' ? (function (t) { for (let e = ni.indexOf(t) + 1, n = ni.length; e < n; ++e) if (ei[ni[e]].common) return ni[e]; }(i._unit)) : void 0, i._table = (function (t, e, n, i) { if (i === 'linear' || !t.length) return [{ time: e, pos: 0 }, { time: n, pos: 1 }]; let a; let r; let o; let s; let l; const u = []; const d = [e]; for (a = 0, r = t.length; a < r; ++a)(s = t[a]) > e && s < n && d.push(s); for (d.push(n), a = 0, r = d.length; a < r; ++a)l = d[a + 1], o = d[a - 1], s = d[a], void 0 !== o && void 0 !== l && Math.round((l + o) / 2) === s || u.push({ time: s, pos: a / (r - 1) }); return u; }(i._timestamps.data, a, r, f)), i._offsets = (function (t, e, n, i, a) { let r; let o; let s = 0; let l = 0; return a.offset && e.length && (r = oi(t, 'time', e[0], 'pos'), s = e.length === 1 ? 1 - r : (oi(t, 'time', e[1], 'pos') - r) / 2, o = oi(t, 'time', e[e.length - 1], 'pos'), l = e.length === 1 ? o : (o - oi(t, 'time', e[e.length - 2], 'pos')) / 2), { start: s, end: l, factor: 1 / (s + 1 + l) }; }(i._table, d, 0, 0, o)), s.reverse && d.reverse(), di(i, d, i._majorUnit); }, getLabelForIndex(t, e) { const n = this; const i = n._adapter; const a = n.chart.data; const r = n.options.time; let o = a.labels && t < a.labels.length ? a.labels[t] : ''; const s = a.datasets[e].data[t]; return H.isObject(s) && (o = n.getRightValue(s)), r.tooltipFormat ? i.format(si(n, o), r.tooltipFormat) : typeof o === 'string' ? o : i.format(si(n, o), r.displayFormats.datetime); }, tickFormatFunction(t, e, n, i) { const a = this._adapter; const r = this.options; const o = r.time.displayFormats; const s = o[this._unit]; const l = this._majorUnit; const u = o[l]; const d = n[e]; const h = r.ticks; const c = l && u && d && d.major; const f = a.format(t, i || (c ? u : s)); const g = c ? h.major : h.minor; const p = $n([g.callback, g.userCallback, h.callback, h.userCallback]); return p ? p(f, e, n) : f; }, convertTicksToLabels(t) { let e; let n; const i = []; for (e = 0, n = t.length; e < n; ++e)i.push(this.tickFormatFunction(t[e].value, e, t)); return i; }, getPixelForOffset(t) { const e = this._offsets; const n = oi(this._table, 'time', t, 'pos'); return this.getPixelForDecimal((e.start + n) * e.factor); }, getPixelForValue(t, e, n) { let i = null; if (void 0 !== e && void 0 !== n && (i = this._timestamps.datasets[n][e]), i === null && (i = li(this, t)), i !== null) return this.getPixelForOffset(i); }, getPixelForTick(t) { const e = this.getTicks(); return t >= 0 && t < e.length ? this.getPixelForOffset(e[t].value) : null; }, getValueForPixel(t) { const e = this._offsets; const n = this.getDecimalForPixel(t) / e.factor - e.end; const i = oi(this._table, 'pos', n, 'time'); return this._adapter._create(i); }, _getLabelSize(t) { const e = this.options.ticks; const n = this.ctx.measureText(t).width; const i = H.toRadians(this.isHorizontal() ? e.maxRotation : e.minRotation); const a = Math.cos(i); const r = Math.sin(i); const o = Jn(e.fontSize, N.global.defaultFontSize); return { w: n * a + o * r, h: n * r + o * a }; }, getLabelWidth(t) { return this._getLabelSize(t).w; }, getLabelCapacity(t) { const e = this; const n = e.options.time; const i = n.displayFormats; const a = i[n.unit] || i.millisecond; const r = e.tickFormatFunction(t, 0, di(e, [t], e._majorUnit), a); const o = e._getLabelSize(r); let s = Math.floor(e.isHorizontal() ? e.width / o.w : e.height / o.h); return e.options.offset && s--, s > 0 ? s : 1; },
  }); const ci = {
    position: 'bottom',
    distribution: 'linear',
    bounds: 'data',
    adapters: {},
    time: {
      parser: !1, unit: !1, round: !1, displayFormat: !1, isoWeekday: !1, minUnit: 'millisecond', displayFormats: {},
    },
    ticks: { autoSkip: !1, source: 'auto', major: { enabled: !1 } },
  }; hi._defaults = ci; const fi = {
    category: kn, linear: Tn, logarithmic: zn, radialLinear: Xn, time: hi,
  }; const gi = {
    datetime: 'MMM D, YYYY, h:mm:ss a', millisecond: 'h:mm:ss.SSS a', second: 'h:mm:ss a', minute: 'h:mm a', hour: 'hA', day: 'MMM D', week: 'll', month: 'MMM YYYY', quarter: '[Q]Q - YYYY', year: 'YYYY',
  }; rn._date.override(typeof t === 'function' ? {
    _id: 'moment', formats() { return gi; }, parse(e, n) { return typeof e === 'string' && typeof n === 'string' ? e = t(e, n) : e instanceof t || (e = t(e)), e.isValid() ? e.valueOf() : null; }, format(e, n) { return t(e).format(n); }, add(e, n, i) { return t(e).add(n, i).valueOf(); }, diff(e, n, i) { return t(e).diff(t(n), i); }, startOf(e, n, i) { return e = t(e), n === 'isoWeek' ? e.isoWeekday(i).valueOf() : e.startOf(n).valueOf(); }, endOf(e, n) { return t(e).endOf(n).valueOf(); }, _create(e) { return t(e); },
  } : {}), N._set('global', { plugins: { filler: { propagate: !0 } } }); const pi = { dataset(t) { const e = t.fill; const n = t.chart; const i = n.getDatasetMeta(e); const a = i && n.isDatasetVisible(e) && i.dataset._children || []; const r = a.length || 0; return r ? function (t, e) { return e < r && a[e]._view || null; } : null; }, boundary(t) { const e = t.boundary; const n = e ? e.x : null; const i = e ? e.y : null; return H.isArray(e) ? function (t, n) { return e[n]; } : function (t) { return { x: n === null ? t.x : n, y: i === null ? t.y : i }; }; } }; function mi(t, e, n) { let i; const a = t._model || {}; let r = a.fill; if (void 0 === r && (r = !!a.backgroundColor), !1 === r || r === null) return !1; if (!0 === r) return 'origin'; if (i = parseFloat(r, 10), isFinite(i) && Math.floor(i) === i) return r[0] !== '-' && r[0] !== '+' || (i = e + i), !(i === e || i < 0 || i >= n) && i; switch (r) { case 'bottom': return 'start'; case 'top': return 'end'; case 'zero': return 'origin'; case 'origin': case 'start': case 'end': return r; default: return !1; } } function vi(t) { return (t.el._scale || {}).getPointPositionForValue ? (function (t) { let e; let n; let i; let a; let r; const o = t.el._scale; const s = o.options; const l = o.chart.data.labels.length; const u = t.fill; const d = []; if (!l) return null; for (e = s.ticks.reverse ? o.max : o.min, n = s.ticks.reverse ? o.min : o.max, i = o.getPointPositionForValue(0, e), a = 0; a < l; ++a)r = u === 'start' || u === 'end' ? o.getPointPositionForValue(a, u === 'start' ? e : n) : o.getBasePosition(a), s.gridLines.circular && (r.cx = i.x, r.cy = i.y, r.angle = o.getIndexAngle(a) - Math.PI / 2), d.push(r); return d; }(t)) : (function (t) { let e; const n = t.el._model || {}; const i = t.el._scale || {}; const a = t.fill; let r = null; if (isFinite(a)) return null; if (a === 'start' ? r = void 0 === n.scaleBottom ? i.bottom : n.scaleBottom : a === 'end' ? r = void 0 === n.scaleTop ? i.top : n.scaleTop : void 0 !== n.scaleZero ? r = n.scaleZero : i.getBasePixel && (r = i.getBasePixel()), r != null) { if (void 0 !== r.x && void 0 !== r.y) return r; if (H.isFinite(r)) return { x: (e = i.isHorizontal()) ? r : null, y: e ? null : r }; } return null; }(t)); } function bi(t, e, n) { let i; let a = t[e].fill; const r = [e]; if (!n) return a; for (;!1 !== a && r.indexOf(a) === -1;) { if (!isFinite(a)) return a; if (!(i = t[a])) return !1; if (i.visible) return a; r.push(a), a = i.fill; } return !1; } function xi(t) { const e = t.fill; let n = 'dataset'; return !1 === e ? null : (isFinite(e) || (n = 'boundary'), pi[n](t)); } function yi(t) { return t && !t.skip; } function _i(t, e, n, i, a) { let r; let o; let s; let l; if (i && a) { for (t.moveTo(e[0].x, e[0].y), r = 1; r < i; ++r)H.canvas.lineTo(t, e[r - 1], e[r]); if (void 0 === n[0].angle) for (t.lineTo(n[a - 1].x, n[a - 1].y), r = a - 1; r > 0; --r)H.canvas.lineTo(t, n[r], n[r - 1], !0); else for (o = n[0].cx, s = n[0].cy, l = Math.sqrt(Math.pow(n[0].x - o, 2) + Math.pow(n[0].y - s, 2)), r = a - 1; r > 0; --r)t.arc(o, s, l, n[r].angle, n[r - 1].angle, !0); } } function ki(t, e, n, i, a, r) { let o; let s; let l; let u; let d; let h; let c; let f; const g = e.length; const p = i.spanGaps; let m = []; let v = []; let b = 0; let x = 0; for (t.beginPath(), o = 0, s = g; o < s; ++o)d = n(u = e[l = o % g]._view, l, i), h = yi(u), c = yi(d), r && void 0 === f && h && (s = g + (f = o + 1)), h && c ? (b = m.push(u), x = v.push(d)) : b && x && (p ? (h && m.push(u), c && v.push(d)) : (_i(t, m, v, b, x), b = x = 0, m = [], v = [])); _i(t, m, v, b, x), t.closePath(), t.fillStyle = a, t.fill(); } const wi = {
    id: 'filler',
    afterDatasetsUpdate(t, e) {
      let n; let i; let a; let r; const o = (t.data.datasets || []).length; const s = e.propagate; const l = []; for (i = 0; i < o; ++i) {
        r = null, (a = (n = t.getDatasetMeta(i)).dataset) && a._model && a instanceof kt.Line && (r = {
          visible: t.isDatasetVisible(i), fill: mi(a, i, o), chart: t, el: a,
        }), n.$filler = r, l.push(r);
      } for (i = 0; i < o; ++i)(r = l[i]) && (r.fill = bi(l, i, s), r.boundary = vi(r), r.mapper = xi(r));
    },
    beforeDatasetsDraw(t) { let e; let n; let i; let a; let r; let o; let s; const l = t._getSortedVisibleDatasetMetas(); const u = t.ctx; for (n = l.length - 1; n >= 0; --n)(e = l[n].$filler) && e.visible && (a = (i = e.el)._view, r = i._children || [], o = e.mapper, s = a.backgroundColor || N.global.defaultColor, o && s && r.length && (H.canvas.clipArea(u, t.chartArea), ki(u, r, o, a, s, i._loop), H.canvas.unclipArea(u))); },
  }; const Mi = H.rtl.getRtlAdapter; const Si = H.noop; const Ci = H.valueOrDefault; function Pi(t, e) { return t.usePointStyle && t.boxWidth > e ? e : t.boxWidth; }N._set('global', {
    legend: {
      display: !0,
      position: 'top',
      align: 'center',
      fullWidth: !0,
      reverse: !1,
      weight: 1e3,
      onClick(t, e) { const n = e.datasetIndex; const i = this.chart; const a = i.getDatasetMeta(n); a.hidden = a.hidden === null ? !i.data.datasets[n].hidden : null, i.update(); },
      onHover: null,
      onLeave: null,
      labels: {
        boxWidth: 40,
        padding: 10,
        generateLabels(t) {
          const e = t.data.datasets; const n = t.options.legend || {}; const i = n.labels && n.labels.usePointStyle; return t._getSortedDatasetMetas().map(((n) => {
            const a = n.controller.getStyle(i ? 0 : void 0); return {
              text: e[n.index].label, fillStyle: a.backgroundColor, hidden: !t.isDatasetVisible(n.index), lineCap: a.borderCapStyle, lineDash: a.borderDash, lineDashOffset: a.borderDashOffset, lineJoin: a.borderJoinStyle, lineWidth: a.borderWidth, strokeStyle: a.borderColor, pointStyle: a.pointStyle, rotation: a.rotation, datasetIndex: n.index,
            };
          }), this);
        },
      },
    },
    legendCallback(t) { let e; let n; let i; const a = document.createElement('ul'); const r = t.data.datasets; for (a.setAttribute('class', `${t.id}-legend`), e = 0, n = r.length; e < n; e++)(i = a.appendChild(document.createElement('li'))).appendChild(document.createElement('span')).style.backgroundColor = r[e].backgroundColor, r[e].label && i.appendChild(document.createTextNode(r[e].label)); return a.outerHTML; },
  }); const Ai = K.extend({
    initialize(t) { H.extend(this, t), this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1; },
    beforeUpdate: Si,
    update(t, e, n) { const i = this; return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize; },
    afterUpdate: Si,
    beforeSetDimensions: Si,
    setDimensions() { const t = this; t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = { width: 0, height: 0 }; },
    afterSetDimensions: Si,
    beforeBuildLabels: Si,
    buildLabels() { const t = this; const e = t.options.labels || {}; let n = H.callback(e.generateLabels, [t.chart], t) || []; e.filter && (n = n.filter(((n) => e.filter(n, t.chart.data)))), t.options.reverse && n.reverse(), t.legendItems = n; },
    afterBuildLabels: Si,
    beforeFit: Si,
    fit() {
      const t = this; const e = t.options; const n = e.labels; const i = e.display; const a = t.ctx; const r = H.options._parseFont(n); const o = r.size; const s = t.legendHitBoxes = []; const l = t.minSize; const u = t.isHorizontal(); if (u ? (l.width = t.maxWidth, l.height = i ? 10 : 0) : (l.width = i ? 10 : 0, l.height = t.maxHeight), i) {
        if (a.font = r.string, u) {
          const d = t.lineWidths = [0]; let h = 0; a.textAlign = 'left', a.textBaseline = 'middle', H.each(t.legendItems, ((t, e) => {
            const i = Pi(n, o) + o / 2 + a.measureText(t.text).width; (e === 0 || d[d.length - 1] + i + 2 * n.padding > l.width) && (h += o + n.padding, d[d.length - (e > 0 ? 0 : 1)] = 0), s[e] = {
              left: 0, top: 0, width: i, height: o,
            }, d[d.length - 1] += i + n.padding;
          })), l.height += h;
        } else {
          const c = n.padding; const f = t.columnWidths = []; const g = t.columnHeights = []; let p = n.padding; let m = 0; let v = 0; H.each(t.legendItems, ((t, e) => {
            const i = Pi(n, o) + o / 2 + a.measureText(t.text).width; e > 0 && v + o + 2 * c > l.height && (p += m + n.padding, f.push(m), g.push(v), m = 0, v = 0), m = Math.max(m, i), v += o + c, s[e] = {
              left: 0, top: 0, width: i, height: o,
            };
          })), p += m, f.push(m), g.push(v), l.width += p;
        }t.width = l.width, t.height = l.height;
      } else t.width = l.width = t.height = l.height = 0;
    },
    afterFit: Si,
    isHorizontal() { return this.options.position === 'top' || this.options.position === 'bottom'; },
    draw() { const t = this; const e = t.options; const n = e.labels; const i = N.global; const a = i.defaultColor; const r = i.elements.line; const o = t.height; const s = t.columnHeights; const l = t.width; const u = t.lineWidths; if (e.display) { let d; const h = Mi(e.rtl, t.left, t.minSize.width); const c = t.ctx; const f = Ci(n.fontColor, i.defaultFontColor); const g = H.options._parseFont(n); const p = g.size; c.textAlign = h.textAlign('left'), c.textBaseline = 'middle', c.lineWidth = 0.5, c.strokeStyle = f, c.fillStyle = f, c.font = g.string; const m = Pi(n, p); const v = t.legendHitBoxes; const b = function (t, i) { switch (e.align) { case 'start': return n.padding; case 'end': return t - i; default: return (t - i + n.padding) / 2; } }; const x = t.isHorizontal(); d = x ? { x: t.left + b(l, u[0]), y: t.top + n.padding, line: 0 } : { x: t.left + n.padding, y: t.top + b(o, s[0]), line: 0 }, H.rtl.overrideTextDirection(t.ctx, e.textDirection); const y = p + n.padding; H.each(t.legendItems, ((e, i) => { const f = c.measureText(e.text).width; const g = m + p / 2 + f; let _ = d.x; let k = d.y; h.setWidth(t.minSize.width), x ? i > 0 && _ + g + n.padding > t.left + t.minSize.width && (k = d.y += y, d.line++, _ = d.x = t.left + b(l, u[d.line])) : i > 0 && k + y > t.top + t.minSize.height && (_ = d.x = _ + t.columnWidths[d.line] + n.padding, d.line++, k = d.y = t.top + b(o, s[d.line])); const w = h.x(_); !(function (t, e, i) { if (!(isNaN(m) || m <= 0)) { c.save(); const o = Ci(i.lineWidth, r.borderWidth); if (c.fillStyle = Ci(i.fillStyle, a), c.lineCap = Ci(i.lineCap, r.borderCapStyle), c.lineDashOffset = Ci(i.lineDashOffset, r.borderDashOffset), c.lineJoin = Ci(i.lineJoin, r.borderJoinStyle), c.lineWidth = o, c.strokeStyle = Ci(i.strokeStyle, a), c.setLineDash && c.setLineDash(Ci(i.lineDash, r.borderDash)), n && n.usePointStyle) { const s = m * Math.SQRT2 / 2; const l = h.xPlus(t, m / 2); const u = e + p / 2; H.canvas.drawPoint(c, i.pointStyle, s, l, u, i.rotation); } else c.fillRect(h.leftForLtr(t, m), e, m, p), o !== 0 && c.strokeRect(h.leftForLtr(t, m), e, m, p); c.restore(); } }(w, k, e)), v[i].left = h.leftForLtr(w, v[i].width), v[i].top = k, (function (t, e, n, i) { const a = p / 2; const r = h.xPlus(t, m + a); const o = e + a; c.fillText(n.text, r, o), n.hidden && (c.beginPath(), c.lineWidth = 2, c.moveTo(r, o), c.lineTo(h.xPlus(r, i), o), c.stroke()); }(w, k, e, f)), x ? d.x += g + n.padding : d.y += y; })), H.rtl.restoreTextDirection(t.ctx, e.textDirection); } },
    _getLegendItemAt(t, e) { let n; let i; let a; const r = this; if (t >= r.left && t <= r.right && e >= r.top && e <= r.bottom) for (a = r.legendHitBoxes, n = 0; n < a.length; ++n) if (t >= (i = a[n]).left && t <= i.left + i.width && e >= i.top && e <= i.top + i.height) return r.legendItems[n]; return null; },
    handleEvent(t) { let e; const n = this; const i = n.options; const a = t.type === 'mouseup' ? 'click' : t.type; if (a === 'mousemove') { if (!i.onHover && !i.onLeave) return; } else { if (a !== 'click') return; if (!i.onClick) return; }e = n._getLegendItemAt(t.x, t.y), a === 'click' ? e && i.onClick && i.onClick.call(n, t.native, e) : (i.onLeave && e !== n._hoveredItem && (n._hoveredItem && i.onLeave.call(n, t.native, n._hoveredItem), n._hoveredItem = e), i.onHover && e && i.onHover.call(n, t.native, e)); },
  }); function Di(t, e) { const n = new Ai({ ctx: t.ctx, options: e, chart: t }); pe.configure(t, n, e), pe.addBox(t, n), t.legend = n; } const Ti = {
    id: 'legend', _element: Ai, beforeInit(t) { const e = t.options.legend; e && Di(t, e); }, beforeUpdate(t) { const e = t.options.legend; const n = t.legend; e ? (H.mergeIf(e, N.global.legend), n ? (pe.configure(t, n, e), n.options = e) : Di(t, e)) : n && (pe.removeBox(t, n), delete t.legend); }, afterEvent(t, e) { const n = t.legend; n && n.handleEvent(e); },
  }; const Ii = H.noop; N._set('global', {
    title: {
      display: !1, fontStyle: 'bold', fullWidth: !0, padding: 10, position: 'top', text: '', weight: 2e3,
    },
  }); const Fi = K.extend({
    initialize(t) { H.extend(this, t), this.legendHitBoxes = []; }, beforeUpdate: Ii, update(t, e, n) { const i = this; return i.beforeUpdate(), i.maxWidth = t, i.maxHeight = e, i.margins = n, i.beforeSetDimensions(), i.setDimensions(), i.afterSetDimensions(), i.beforeBuildLabels(), i.buildLabels(), i.afterBuildLabels(), i.beforeFit(), i.fit(), i.afterFit(), i.afterUpdate(), i.minSize; }, afterUpdate: Ii, beforeSetDimensions: Ii, setDimensions() { const t = this; t.isHorizontal() ? (t.width = t.maxWidth, t.left = 0, t.right = t.width) : (t.height = t.maxHeight, t.top = 0, t.bottom = t.height), t.paddingLeft = 0, t.paddingTop = 0, t.paddingRight = 0, t.paddingBottom = 0, t.minSize = { width: 0, height: 0 }; }, afterSetDimensions: Ii, beforeBuildLabels: Ii, buildLabels: Ii, afterBuildLabels: Ii, beforeFit: Ii, fit() { let t; const e = this; const n = e.options; const i = e.minSize = {}; const a = e.isHorizontal(); n.display ? (t = (H.isArray(n.text) ? n.text.length : 1) * H.options._parseFont(n).lineHeight + 2 * n.padding, e.width = i.width = a ? e.maxWidth : t, e.height = i.height = a ? t : e.maxHeight) : e.width = i.width = e.height = i.height = 0; }, afterFit: Ii, isHorizontal() { const t = this.options.position; return t === 'top' || t === 'bottom'; }, draw() { const t = this; const e = t.ctx; const n = t.options; if (n.display) { let i; let a; let r; const o = H.options._parseFont(n); const s = o.lineHeight; const l = s / 2 + n.padding; let u = 0; const d = t.top; const h = t.left; const c = t.bottom; const f = t.right; e.fillStyle = H.valueOrDefault(n.fontColor, N.global.defaultFontColor), e.font = o.string, t.isHorizontal() ? (a = h + (f - h) / 2, r = d + l, i = f - h) : (a = n.position === 'left' ? h + l : f - l, r = d + (c - d) / 2, i = c - d, u = Math.PI * (n.position === 'left' ? -0.5 : 0.5)), e.save(), e.translate(a, r), e.rotate(u), e.textAlign = 'center', e.textBaseline = 'middle'; const g = n.text; if (H.isArray(g)) for (let p = 0, m = 0; m < g.length; ++m)e.fillText(g[m], 0, p, i), p += s; else e.fillText(g, 0, 0, i); e.restore(); } },
  }); function Oi(t, e) { const n = new Fi({ ctx: t.ctx, options: e, chart: t }); pe.configure(t, n, e), pe.addBox(t, n), t.titleBlock = n; } const Li = {}; const Ri = wi; const zi = Ti; const Ni = {
    id: 'title', _element: Fi, beforeInit(t) { const e = t.options.title; e && Oi(t, e); }, beforeUpdate(t) { const e = t.options.title; const n = t.titleBlock; e ? (H.mergeIf(e, N.global.title), n ? (pe.configure(t, n, e), n.options = e) : Oi(t, e)) : n && (pe.removeBox(t, n), delete t.titleBlock); },
  }; for (const Bi in Li.filler = Ri, Li.legend = zi, Li.title = Ni, en.helpers = H, (function () { function t(t, e, n) { let i; return typeof t === 'string' ? (i = parseInt(t, 10), t.indexOf('%') !== -1 && (i = i / 100 * e.parentNode[n])) : i = t, i; } function e(t) { return t != null && t !== 'none'; } function n(n, i, a) { const r = document.defaultView; const o = H._getParentNode(n); const s = r.getComputedStyle(n)[i]; const l = r.getComputedStyle(o)[i]; const u = e(s); const d = e(l); const h = Number.POSITIVE_INFINITY; return u || d ? Math.min(u ? t(s, n, a) : h, d ? t(l, o, a) : h) : 'none'; }H.where = function (t, e) { if (H.isArray(t) && Array.prototype.filter) return t.filter(e); const n = []; return H.each(t, ((t) => { e(t) && n.push(t); })), n; }, H.findIndex = Array.prototype.findIndex ? function (t, e, n) { return t.findIndex(e, n); } : function (t, e, n) { n = void 0 === n ? t : n; for (let i = 0, a = t.length; i < a; ++i) if (e.call(n, t[i], i, t)) return i; return -1; }, H.findNextWhere = function (t, e, n) { H.isNullOrUndef(n) && (n = -1); for (let i = n + 1; i < t.length; i++) { const a = t[i]; if (e(a)) return a; } }, H.findPreviousWhere = function (t, e, n) { H.isNullOrUndef(n) && (n = t.length); for (let i = n - 1; i >= 0; i--) { const a = t[i]; if (e(a)) return a; } }, H.isNumber = function (t) { return !isNaN(parseFloat(t)) && isFinite(t); }, H.almostEquals = function (t, e, n) { return Math.abs(t - e) < n; }, H.almostWhole = function (t, e) { const n = Math.round(t); return n - e <= t && n + e >= t; }, H.max = function (t) { return t.reduce(((t, e) => (isNaN(e) ? t : Math.max(t, e))), Number.NEGATIVE_INFINITY); }, H.min = function (t) { return t.reduce(((t, e) => (isNaN(e) ? t : Math.min(t, e))), Number.POSITIVE_INFINITY); }, H.sign = Math.sign ? function (t) { return Math.sign(t); } : function (t) { return (t = +t) === 0 || isNaN(t) ? t : t > 0 ? 1 : -1; }, H.toRadians = function (t) { return t * (Math.PI / 180); }, H.toDegrees = function (t) { return t * (180 / Math.PI); }, H._decimalPlaces = function (t) { if (H.isFinite(t)) { for (var e = 1, n = 0; Math.round(t * e) / e !== t;)e *= 10, n++; return n; } }, H.getAngleFromPoint = function (t, e) { const n = e.x - t.x; const i = e.y - t.y; const a = Math.sqrt(n * n + i * i); let r = Math.atan2(i, n); return r < -0.5 * Math.PI && (r += 2 * Math.PI), { angle: r, distance: a }; }, H.distanceBetweenPoints = function (t, e) { return Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2)); }, H.aliasPixel = function (t) { return t % 2 == 0 ? 0 : 0.5; }, H._alignPixel = function (t, e, n) { const i = t.currentDevicePixelRatio; const a = n / 2; return Math.round((e - a) * i) / i + a; }, H.splineCurve = function (t, e, n, i) { const a = t.skip ? e : t; const r = e; const o = n.skip ? e : n; const s = Math.sqrt(Math.pow(r.x - a.x, 2) + Math.pow(r.y - a.y, 2)); const l = Math.sqrt(Math.pow(o.x - r.x, 2) + Math.pow(o.y - r.y, 2)); let u = s / (s + l); let d = l / (s + l); const h = i * (u = isNaN(u) ? 0 : u); const c = i * (d = isNaN(d) ? 0 : d); return { previous: { x: r.x - h * (o.x - a.x), y: r.y - h * (o.y - a.y) }, next: { x: r.x + c * (o.x - a.x), y: r.y + c * (o.y - a.y) } }; }, H.EPSILON = Number.EPSILON || 1e-14, H.splineCurveMonotone = function (t) { let e; let n; let i; let a; let r; let o; let s; let l; let u; const d = (t || []).map(((t) => ({ model: t._model, deltaK: 0, mK: 0 }))); const h = d.length; for (e = 0; e < h; ++e) if (!(i = d[e]).model.skip) { if (n = e > 0 ? d[e - 1] : null, (a = e < h - 1 ? d[e + 1] : null) && !a.model.skip) { const c = a.model.x - i.model.x; i.deltaK = c !== 0 ? (a.model.y - i.model.y) / c : 0; }!n || n.model.skip ? i.mK = i.deltaK : !a || a.model.skip ? i.mK = n.deltaK : this.sign(n.deltaK) !== this.sign(i.deltaK) ? i.mK = 0 : i.mK = (n.deltaK + i.deltaK) / 2; } for (e = 0; e < h - 1; ++e)i = d[e], a = d[e + 1], i.model.skip || a.model.skip || (H.almostEquals(i.deltaK, 0, this.EPSILON) ? i.mK = a.mK = 0 : (r = i.mK / i.deltaK, o = a.mK / i.deltaK, (l = Math.pow(r, 2) + Math.pow(o, 2)) <= 9 || (s = 3 / Math.sqrt(l), i.mK = r * s * i.deltaK, a.mK = o * s * i.deltaK))); for (e = 0; e < h; ++e)(i = d[e]).model.skip || (n = e > 0 ? d[e - 1] : null, a = e < h - 1 ? d[e + 1] : null, n && !n.model.skip && (u = (i.model.x - n.model.x) / 3, i.model.controlPointPreviousX = i.model.x - u, i.model.controlPointPreviousY = i.model.y - u * i.mK), a && !a.model.skip && (u = (a.model.x - i.model.x) / 3, i.model.controlPointNextX = i.model.x + u, i.model.controlPointNextY = i.model.y + u * i.mK)); }, H.nextItem = function (t, e, n) { return n ? e >= t.length - 1 ? t[0] : t[e + 1] : e >= t.length - 1 ? t[t.length - 1] : t[e + 1]; }, H.previousItem = function (t, e, n) { return n ? e <= 0 ? t[t.length - 1] : t[e - 1] : e <= 0 ? t[0] : t[e - 1]; }, H.niceNum = function (t, e) { const n = Math.floor(H.log10(t)); const i = t / Math.pow(10, n); return (e ? i < 1.5 ? 1 : i < 3 ? 2 : i < 7 ? 5 : 10 : i <= 1 ? 1 : i <= 2 ? 2 : i <= 5 ? 5 : 10) * Math.pow(10, n); }, H.requestAnimFrame = typeof window === 'undefined' ? function (t) { t(); } : window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (t) { return window.setTimeout(t, 1e3 / 60); }, H.getRelativePosition = function (t, e) { let n; let i; const a = t.originalEvent || t; const r = t.target || t.srcElement; const o = r.getBoundingClientRect(); const s = a.touches; s && s.length > 0 ? (n = s[0].clientX, i = s[0].clientY) : (n = a.clientX, i = a.clientY); const l = parseFloat(H.getStyle(r, 'padding-left')); const u = parseFloat(H.getStyle(r, 'padding-top')); const d = parseFloat(H.getStyle(r, 'padding-right')); const h = parseFloat(H.getStyle(r, 'padding-bottom')); const c = o.right - o.left - l - d; const f = o.bottom - o.top - u - h; return { x: n = Math.round((n - o.left - l) / c * r.width / e.currentDevicePixelRatio), y: i = Math.round((i - o.top - u) / f * r.height / e.currentDevicePixelRatio) }; }, H.getConstraintWidth = function (t) { return n(t, 'max-width', 'clientWidth'); }, H.getConstraintHeight = function (t) { return n(t, 'max-height', 'clientHeight'); }, H._calculatePadding = function (t, e, n) { return (e = H.getStyle(t, e)).indexOf('%') > -1 ? n * parseInt(e, 10) / 100 : parseInt(e, 10); }, H._getParentNode = function (t) { let e = t.parentNode; return e && e.toString() === '[object ShadowRoot]' && (e = e.host), e; }, H.getMaximumWidth = function (t) { const e = H._getParentNode(t); if (!e) return t.clientWidth; const n = e.clientWidth; const i = n - H._calculatePadding(e, 'padding-left', n) - H._calculatePadding(e, 'padding-right', n); const a = H.getConstraintWidth(t); return isNaN(a) ? i : Math.min(i, a); }, H.getMaximumHeight = function (t) { const e = H._getParentNode(t); if (!e) return t.clientHeight; const n = e.clientHeight; const i = n - H._calculatePadding(e, 'padding-top', n) - H._calculatePadding(e, 'padding-bottom', n); const a = H.getConstraintHeight(t); return isNaN(a) ? i : Math.min(i, a); }, H.getStyle = function (t, e) { return t.currentStyle ? t.currentStyle[e] : document.defaultView.getComputedStyle(t, null).getPropertyValue(e); }, H.retinaScale = function (t, e) { const n = t.currentDevicePixelRatio = e || typeof window !== 'undefined' && window.devicePixelRatio || 1; if (n !== 1) { const i = t.canvas; const a = t.height; const r = t.width; i.height = a * n, i.width = r * n, t.ctx.scale(n, n), i.style.height || i.style.width || (i.style.height = `${a}px`, i.style.width = `${r}px`); } }, H.fontString = function (t, e, n) { return `${e} ${t}px ${n}`; }, H.longestText = function (t, e, n, i) { let a = (i = i || {}).data = i.data || {}; let r = i.garbageCollect = i.garbageCollect || []; i.font !== e && (a = i.data = {}, r = i.garbageCollect = [], i.font = e), t.font = e; let o; let s; let l; let u; let d; let h = 0; const c = n.length; for (o = 0; o < c; o++) if ((u = n[o]) != null && !0 !== H.isArray(u))h = H.measureText(t, a, r, h, u); else if (H.isArray(u)) for (s = 0, l = u.length; s < l; s++)(d = u[s]) == null || H.isArray(d) || (h = H.measureText(t, a, r, h, d)); const f = r.length / 2; if (f > n.length) { for (o = 0; o < f; o++) delete a[r[o]]; r.splice(0, f); } return h; }, H.measureText = function (t, e, n, i, a) { let r = e[a]; return r || (r = e[a] = t.measureText(a).width, n.push(a)), r > i && (i = r), i; }, H.numberOfLabelLines = function (t) { let e = 1; return H.each(t, ((t) => { H.isArray(t) && t.length > e && (e = t.length); })), e; }, H.color = _ ? function (t) { return t instanceof CanvasGradient && (t = N.global.defaultColor), _(t); } : function (t) { return console.error('Color.js not found!'), t; }, H.getHoverColor = function (t) { return t instanceof CanvasPattern || t instanceof CanvasGradient ? t : H.color(t).saturate(0.5).darken(0.1).rgbString(); }; }()), en._adapters = rn, en.Animation = $, en.animationService = J, en.controllers = Jt, en.DatasetController = it, en.defaults = N, en.Element = K, en.elements = kt, en.Interaction = re, en.layouts = pe, en.platform = Oe, en.plugins = Le, en.Scale = yn, en.scaleService = Re, en.Ticks = on, en.Tooltip = Ye, en.helpers.each(fi, ((t, e) => { en.scaleService.registerScaleType(e, t, t._defaults); })), Li)Li.hasOwnProperty(Bi) && en.plugins.register(Li[Bi]); en.platform.initialize(); const Ei = en; return typeof window !== 'undefined' && (window.Chart = en), en.Chart = en, en.Legend = Li.legend._element, en.Title = Li.title._element, en.pluginService = en.plugins, en.PluginBase = en.Element.extend({}), en.canvasHelpers = en.helpers.canvas, en.layoutService = en.layouts, en.LinearScaleBase = Cn, en.helpers.each(['Bar', 'Bubble', 'Doughnut', 'Line', 'PolarArea', 'Radar', 'Scatter'], ((t) => { en[t] = function (e, n) { return new en(e, en.helpers.merge(n || {}, { type: t.charAt(0).toLowerCase() + t.slice(1) })); }; })), Ei;
})));
